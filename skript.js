document.addEventListener('DOMContentLoaded', () => {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–º–æ–¥–∑–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    function countEmojis(str) {
        // –ü–æ–∫—Ä—ã–≤–∞–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ emoji, –≤ —Ç–æ–º —á–∏—Å–ª–µ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ
        const emojiRegex = /(\p{Extended_Pictographic}(?:\uFE0F|\u20E3)?)/gu;
        return (str.match(emojiRegex) || []).length;
    }

    const ui = {
        slotMachine: document.getElementById('slot-machine'),
        lever: document.getElementById('lever'),
        spinsLeft: document.getElementById('spins-left'),
        logPanel: document.getElementById('log-panel'),
        statRun: document.getElementById('stat-run'),
        statTurn: document.getElementById('stat-turn'),
        statCoins: document.getElementById('stat-coins'),
        statTickets: document.getElementById('stat-tickets'),
        statLuck: document.getElementById('stat-luck'),
        statDebt: document.getElementById('stat-debt'),
        bankBalance: document.getElementById('bank-balance'),
        atmInterestRate: document.getElementById('atm-interest-rate'),
        btnDeposit: document.getElementById('btn-deposit'),
        shopItems: document.getElementById('shop-items'),
        btnRerollShop: document.getElementById('btn-reroll-shop'),
        inventoryItems: document.getElementById('inventory-items'),
        btnEndTurn: document.getElementById('btn-end-turn'),
        startScreen: document.getElementById('start-screen'),
        gameOverScreen: document.getElementById('game-over-screen'),
        spinPurchaseModal: document.getElementById('spin-purchase-modal'),
        purchaseModalTitle: document.getElementById('purchase-modal-title'),
        purchaseModalCoins: document.getElementById('purchase-modal-coins'),
        btnBuySpins7: document.getElementById('buy-spins-7'),
        btnBuySpins3: document.getElementById('buy-spins-3'),
        btnBuySpin1: document.getElementById('buy-spin-1'),
        btnBuyNothing: document.getElementById('buy-nothing'),
        btnPlanning: document.getElementById('btn-planning'),
        planningModal: document.getElementById('planning-modal'),
        planningShopItems: document.getElementById('planning-shop-items'),
        planningInventoryItems: document.getElementById('planning-inventory-items'),
        planningTickets: document.getElementById('planning-tickets'),
        btnPlanningReroll: document.getElementById('btn-planning-reroll'),
        btnFinishPlanning: document.getElementById('btn-finish-planning'),
        judgementModal: document.getElementById('judgement-modal'),
        judgementTitle: document.getElementById('judgement-title'),
        judgementText: document.getElementById('judgement-text'),
        judgementContinue: document.getElementById('judgement-continue'),
        finalRun: document.getElementById('final-run'),
        btnStartGame: document.getElementById('btn-start-game'),
        btnRestartGame: document.getElementById('btn-restart-game'),
        endOfRoundModal: document.getElementById('end-of-round-modal'),
        eorTitle: document.getElementById('eor-title'),
        eorCoins: document.getElementById('eor-coins'),
        eorBank: document.getElementById('eor-bank'),
        eorDepositAmount: document.getElementById('eor-deposit-amount'),
        btnEorDeposit: document.getElementById('btn-eor-deposit'),
        btnConfirmEndTurn: document.getElementById('btn-confirm-end-turn'),
        purchaseModalDebt: document.getElementById('purchase-modal-debt'),
        btnPayDebtEarly: document.getElementById('btn-pay-debt-early'),
        earlyPayoffBonusInfo: document.getElementById('early-payoff-bonus-info'),
        earlyPayoffSection: document.getElementById('early-payoff-section'),
        statDebtStart: document.getElementById('stat-debt-start'),
        btnDepositAll: document.getElementById('btn-deposit-all'),
        btnDepositExcept7: document.getElementById('btn-deposit-except-7'),
        btnDepositExcept3: document.getElementById('btn-deposit-except-3'),
        btnDepositHalf: document.getElementById('btn-deposit-half'),
        btnEorDepositAll: document.getElementById('btn-eor-deposit-all'),
        btnEorDepositExcept7: document.getElementById('btn-eor-deposit-except-7'),
        btnEorDepositExcept3: document.getElementById('btn-eor-deposit-except-3'),
        btnEorDepositHalf: document.getElementById('btn-eor-deposit-half'),
        btnLeaderboard: document.getElementById('btn-leaderboard'),
    };
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ø–æ –ø—Ä–∞–≤–æ–º—É –∫–ª–∏–∫—É –º—ã—à–∏ –Ω–∞ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    document.addEventListener('contextmenu', event => event.preventDefault());

    const CONFIG = {
        ROWS: 3, COLS: 5, REROLL_COST: 2,
        SPIN_ANIMATION_TIME: 1200, 
        SPIN_PACKAGE_1: { spins: 7, tickets: 1, cost: 10, base_cost: 10 },
        SPIN_PACKAGE_2: { spins: 3, tickets: 2, cost: 7, base_cost: 7 },
    };
    window.CONFIG = CONFIG;
    const GRAPHICS = {
        lemon: 'üçã', cherry: 'üçí', clover: 'üçÄ', bell: 'üîî', diamond: 'üíé', coins: 'üí∞', seven: '7Ô∏è‚É£',
        pirate: 'üè¥‚Äç‚ò†Ô∏è', // –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
    };
    const SYMBOLS = [
        { id: 'lemon',    value: 1, weight: 194, graphic: GRAPHICS.lemon },   // 19.4%
        { id: 'cherry',   value: 1, weight: 194, graphic: GRAPHICS.cherry },  // 19.4%
        { id: 'clover',   value: 2, weight: 149, graphic: GRAPHICS.clover },  // 14.9%
        { id: 'bell',     value: 2, weight: 149, graphic: GRAPHICS.bell },    // 14.9%
        { id: 'diamond',  value: 3, weight: 119, graphic: GRAPHICS.diamond }, // 11.9%
        { id: 'coins',    value: 3, weight: 119, graphic: GRAPHICS.coins },   // 11.9%
        { id: 'seven',    value: 6, weight: 75,  graphic: GRAPHICS.seven },   // 7.5%
    ];
    window.SYMBOLS = SYMBOLS;
    const ORIGINAL_SYMBOLS = JSON.parse(JSON.stringify(SYMBOLS)); // –î–ª—è —Å–±—Ä–æ—Å–∞ —à–∞–Ω—Å–æ–≤ –≤ –Ω–æ–≤–æ–π –∏–≥—Ä–µ

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ø-–∞–ø–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    window.symbols = SYMBOLS;
    window.symbolWeights = {};
    window.gameState = {};

    

    function updateWeightedSymbols() {
        // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤ SYMBOLS, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ Dev-–º–µ–Ω—é
        let currentSymbols = JSON.parse(JSON.stringify(SYMBOLS));

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Å—Å–∏–≤–∫–∏ —Ç–∏–ø–∞ slot_modifier –∫ —ç—Ç–æ–π —á–∏—Å—Ç–æ–π –∫–æ–ø–∏–∏
        if (state.activePassives && state.activePassives.length > 0) {
            state.activePassives.forEach(passive => {
                if (passive.type === 'slot_modifier' && typeof passive.effect === 'function') {
                    const tempState = { ...state };
                    const originalWindowSymbols = window.SYMBOLS;
                    window.SYMBOLS = currentSymbols;
                    passive.effect(tempState);
                    window.SYMBOLS = originalWindowSymbols;
                }
            });
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç –õ—É–ø—ã
        if (hasItem('magnifying_glass')) {
            const effect = ALL_ITEMS.find(i => i.id === 'magnifying_glass').effect.base_value_increase;
            currentSymbols.forEach(s => {
                if (effect.symbols.includes(s.id)) {
                    s.value += effect.amount;
                }
            });
        }

        // --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –æ—Ç —É—Å–∏–ª–∏—Ç–µ–ª–µ–π –≤–∏—à–Ω–∏ ---
        if (window.state.cherryBaseValue) {
            currentSymbols.forEach(s => {
                if (s.id === 'cherry') {
                    s.value += window.state.cherryBaseValue;
                }
            });
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–§–∏–ª—å—Ç—Ä –ù–µ—É–¥–∞—á"
        const removedSymbolId = state.inventory.find(item => item.effect?.remove_symbol)?.effect.remove_symbol;
        if (removedSymbolId) {
            currentSymbols = currentSymbols.filter(s => s.id !== removedSymbolId);
        }

        weightedSymbols = currentSymbols.flatMap(s => Array(s.weight).fill(s));

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è window.symbols –∏ window.symbolWeights
        window.symbols = currentSymbols;
        window.symbolWeights = {};
        currentSymbols.forEach(symbol => {
            window.symbolWeights[symbol.id] = symbol.weight;
        });
        window.totalWeight = currentSymbols.reduce((acc, s) => acc + s.weight, 0);
        if (!Array.isArray(window.symbols)) {
            console.error('[BUG] window.symbols –Ω–µ –º–∞—Å—Å–∏–≤!', window.symbols);
        }
    }

    // --- —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç updateWeightedSymbols ---
    function updateSymbolWeightsForStats() {
        if (window.updateWeightedSymbols) {
            window.updateWeightedSymbols();
        }
    }

    const PAYLINES = [
        // Scannable lines (will be checked for 3, 4, 5 in a row)
        { name: "–í–µ—Ä—Ö–Ω—è—è –ª–∏–Ω–∏—è", positions: [0, 1, 2, 3, 4], scannable: true, type: "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è" },
        { name: "–°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è", positions: [5, 6, 7, 8, 9], scannable: true, type: "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è" },
        { name: "–ù–∏–∂–Ω—è—è –ª–∏–Ω–∏—è", positions: [10, 11, 12, 13, 14], scannable: true, type: "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è" },
        
        // Fixed-pattern lines (must match all positions)
        { name: "–ö–æ–ª–æ–Ω–∫–∞ 1", positions: [0, 5, 10], multiplier: 1, type: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è" },
        { name: "–ö–æ–ª–æ–Ω–∫–∞ 2", positions: [1, 6, 11], multiplier: 1, type: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è" },
        { name: "–ö–æ–ª–æ–Ω–∫–∞ 3", positions: [2, 7, 12], multiplier: 1, type: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è" },
        { name: "–ö–æ–ª–æ–Ω–∫–∞ 4", positions: [3, 8, 13], multiplier: 1, type: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è" },
        { name: "–ö–æ–ª–æ–Ω–∫–∞ 5", positions: [4, 9, 14], multiplier: 1, type: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è" },
        { name: "–î–∏–∞–≥–æ–Ω–∞–ª—å ‚Üò", positions: [0, 6, 12], multiplier: 2, type: "–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è" },
        { name: "–î–∏–∞–≥–æ–Ω–∞–ª—å ‚Üô", positions: [10, 6, 2], multiplier: 2, type: "–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è" },
        { name: "–ú–∞–ª–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å ‚Üò", positions: [1, 7, 13], multiplier: 2, type: "–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è" },
        { name: "–ú–∞–ª–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å ‚Üô", positions: [11, 7, 3], multiplier: 2, type: "–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è" },

        { name: "–ó–∞–≥", positions: [0, 6, 12, 8, 4], multiplier: 4, type: "–ó–∏–≥-–ó–∞–≥" },
        { name: "–ó–∏–≥", positions: [10, 6, 2, 8, 14], multiplier: 4, type: "–ó–∏–≥-–ó–∞–≥" },
        { name: "–°—Ç—É–ø–µ–Ω–∏ –≤–Ω–∏–∑", positions: [0, 5, 7, 9, 14], multiplier: 4, type: "–ó–∏–≥-–ó–∞–≥" },
        { name: "–°—Ç—É–ø–µ–Ω–∏ –≤–≤–µ—Ä—Ö", positions: [10, 5, 7, 9, 4], multiplier: 4, type: "–ó–∏–≥-–ó–∞–≥" },
        
        { name: "–ù–µ–±–æ", positions: [2, 6, 7, 8, 12], multiplier: 7, type: "–ù–µ–±–æ/–ó–µ–º–ª—è" },
        { name: "–ó–µ–º–ª—è", positions: [5, 1, 7, 13, 9], multiplier: 7, type: "–ù–µ–±–æ/–ó–µ–º–ª—è" },
        
        { name: "–¢—Ä–µ—Ç–∏–π –ì–ª–∞–∑", positions: [1, 6, 12, 8, 3], multiplier: 5, type: "–°–µ–∫—Ä–µ—Ç–Ω–∞—è" },
        
        { name: "–†–∞–º–∫–∞", positions: [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14], multiplier: 10, type: "–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è" },
        { name: "–ö—Ä–µ—Å—Ç", positions: [0, 5, 10, 11, 13, 14, 9, 4], multiplier: 10, type: "–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è" },
    ];

    // –î–µ–ª–∞–µ–º PAYLINES –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º
    window.PAYLINES = PAYLINES;

    let state = {};
    let weightedSymbols = [];
    let devDebugLuck = false;
    let lastKnownTickets = 0;
    let lastKnownCoins = 0;
    let firstSession = true; // –§–ª–∞–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã —Ç–æ–ª—å–∫–æ –Ω–µ –≤ –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é
    let lastAdShownTime = 0; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã

    function showTicketChangePopup(change) {
        if (change === 0) return;

        const ticketCounter = ui.statTickets;
        const innerSpan = ticketCounter.querySelector('span');
        if (!ticketCounter || !innerSpan) return;

        const popup = document.createElement('div');
        popup.className = 'ticket-change-popup';
        popup.textContent = (change > 0 ? '+' : '') + change;
        
        if (change > 0) {
            popup.classList.add('gain');
        } else {
            popup.classList.add('loss');
        }

        document.body.appendChild(popup);
        
        const rect = innerSpan.getBoundingClientRect();
        popup.style.left = `${rect.right + 5}px`;
        popup.style.top = `${rect.top + rect.height / 2}px`;
        
        popup.addEventListener('animationend', () => {
            popup.remove();
        });
    }

    function showCoinChangePopup(change) {
        if (change === 0) return;

        const coinCounter = ui.statCoins;
        const innerSpan = coinCounter.querySelector('span');
        if (!coinCounter || !innerSpan) return;

        const popup = document.createElement('div');
        popup.className = 'coin-change-popup';
        popup.textContent = (change > 0 ? '+' : '') + change;
        
        if (change > 0) {
            popup.classList.add('gain');
        } else {
            popup.classList.add('loss');
        }

        document.body.appendChild(popup);
        
        const rect = innerSpan.getBoundingClientRect();
        popup.style.left = `${rect.right + 5}px`;
        popup.style.top = `${rect.top + rect.height / 2}px`;
        
        popup.addEventListener('animationend', () => {
            popup.remove();
        });
    }

    function showPassiveChoiceModal(excludeIds = []) {
        let modal = document.getElementById('passive-choice-modal');
        if (modal) modal.remove();

        modal = document.createElement('div');
        modal.id = 'passive-choice-modal';
        modal.className = 'passive-choice-modal';

        // --- –ü–ê–°–°–ò–í–ö–ê: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä ---
        let passiveCount = 3;
        if (hasPassive('expanded_choice')) {
            passiveCount = 4;
        }

        const passives = getRandomPassives(passiveCount, excludeIds);
        let choicesHTML = '';

        const typeMap = {
            'item_mod': { text: '–ü–∞—Å—Å–∏–≤–Ω—ã–π', class: 'passive' },
            'one_time': { text: '–†–∞–∑–æ–≤—ã–π', class: 'temporary' },
            'slot_modifier': { text: '–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä', class: 'slot_modifier' }
        };

        passives.forEach(p => {
            const typeInfo = typeMap[p.type] || { text: '–≠—Ñ—Ñ–µ–∫—Ç', class: '' };
            choicesHTML += `
                <div class="passive-choice" data-passive-id="${p.id}">
                    <div class="choice-header">
                        <h3>${p.emoji || ''} ${p.name}</h3>
                        <span class="choice-type ${typeInfo.class}">${typeInfo.text}</span>
                    </div>
                    <p>${p.desc}</p>
                </div>
            `;
        });

        modal.innerHTML = `
            <div class="passive-choice-content">
                <h2>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Å—Å–∏–≤–Ω—ã–π –±–æ–Ω—É—Å</h2>
                <p>–≠—Ç–æ—Ç –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã. –í—ã–±–µ—Ä–∏—Ç–µ –º—É–¥—Ä–æ.</p>
                <div class="passive-choices">
                    ${choicesHTML}
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        modal.querySelectorAll('.passive-choice').forEach(choiceDiv => {
            choiceDiv.onclick = () => {
                const passiveId = choiceDiv.dataset.passiveId;
                const chosenPassive = ALL_PASSIVES.find(p => p.id === passiveId);
                applyPassive(chosenPassive, state);
                modal.remove();
                updateUI();
                startTurn(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
            };
        });
    }

    function hasItem(itemId) {
        return state.inventory && state.inventory.some(item => item.id === itemId);
    }

    function hasPassive(passiveId) {
        return state.activePassives && state.activePassives.some(p => p.id === passiveId);
    }

    function getItemEffectValue(effectKey, defaultValue, accumulator = 'sum') {
        let items = [...state.inventory];
        // mimic: –∫–æ–ø–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        const mimicItem = items.find(item => item.effect?.mimic);
        if (mimicItem) {
            const targetId = mimicItem.effect.mimic.target;
            const target = ALL_ITEMS.find(i => i.id === targetId);
            if (target) items.push({...target, id: 'mimic_copy'});
        }
        // flat_bonus_enhancer: —É—Å–∏–ª–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –±–æ–Ω—É—Å—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        const enhancer = items.find(item => item.effect?.flat_bonus_enhancer);
        const enhancerValue = enhancer ? enhancer.effect.flat_bonus_enhancer : null;
        return items.reduce((acc, item) => {
            if (item.effect) {
                // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É
                let value = item.effect;
                for (const key of effectKey.split('.')) {
                    if (value && value.hasOwnProperty(key)) {
                        value = value[key];
                    } else {
                        value = undefined;
                        break;
                    }
                }
                if (value !== undefined) {
                    // –£—Å–∏–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å/–ø—Ä–æ—Ü–µ–Ω—Ç –∏ –µ—Å—Ç—å flat_bonus_enhancer, –∏ —ç—Ç–æ –Ω–µ —Å–∞–º —ç–Ω—Ö–∞–Ω—Å–µ—Ä
                    if (
                        enhancerValue &&
                        typeof value === 'number' &&
                        !effectKey.toLowerCase().includes('multiplier') &&
                        !effectKey.toLowerCase().includes('percent') &&
                        !effectKey.toLowerCase().includes('interest') &&
                        (!item.effect.flat_bonus_enhancer)
                    ) {
                        const oldValue = value;
                        value = Math.ceil(value * enhancerValue);
                        if (typeof console !== 'undefined') {
                            console.log(
                                `[AURA] –ë–æ–Ω—É—Å "${effectKey}" –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ "${item.name}" —É—Å–∏–ª–µ–Ω —Å ${oldValue} –¥–æ ${value} (–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: x${enhancerValue})`
                            );
                        }
                    }
                    if (accumulator === 'multiply') return acc * value;
                    return acc + value;
                }
            }
            return acc;
        }, defaultValue);
    }

    function getBreakableUsesBoost() {
        return state.inventory.reduce((acc, item) => {
            if (item.modifier && item.modifier.effect && item.modifier.effect.breakable_item_uses_boost) {
                return acc + item.modifier.effect.breakable_item_uses_boost;
            }
            return acc;
        }, 0);
    }

    if (typeof window !== 'undefined') {
      window.getBreakableUsesBoost = getBreakableUsesBoost;
    }

    function generateGrid() {
        updateWeightedSymbols();
        // --- –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ó–ê–ü–†–ï–©–Å–ù–ù–´–• –°–ò–ú–í–û–õ–û–í ---
        const banned = (state.bannedSymbols || []).filter(b => b.spinsLeft > 0).map(b => b.symbol);
        let filteredWeightedSymbols = weightedSymbols.filter(s => !banned.includes(s.id));
        let filteredSYMBOLS = SYMBOLS.filter(s => !banned.includes(s.id));

        let tempLuck = 0;
        
        // --- –í–†–ï–ú–ï–ù–ù–ê–Ø –£–î–ê–ß–ê –û–¢ temporary_luck_on_spin ---
        let tempLuckFromItems = 0;
        if (Array.isArray(state.grid)) {
            state.inventory.forEach(item => {
                if (item.effect?.temporary_luck_on_spin) {
                    const symbolId = item.effect.temporary_luck_on_spin;
                    const count = state.grid.filter(s => s && s.id === symbolId).length;
                    if (count > 0) {
                        tempLuckFromItems += count;
                    }
                }
                // [NEW] conditional_luck: –µ—Å–ª–∏ –Ω–∞ –ø–æ–ª–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª, –¥–∞—ë–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å
                if (item.effect?.conditional_luck) {
                    const { symbol, bonus } = item.effect.conditional_luck;
                    const found = state.grid.some(s => s && s.id === symbol);
                    if (found) {
                        tempLuckFromItems += bonus;
                        addLog(`${item.name}: +${bonus} –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —É–¥–∞—á–µ (—É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ).`, 'win');
                        animateInventoryItem(item.id);
                    }
                }
            });
        }
        // –í–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–æ—Ç —Å–ø–∏–Ω
        let totalTempLuck = (state.tempLuck || 0) + tempLuckFromItems;

        // --- –ü–ê–°–°–ò–í–ö–ê: –£–¥–∞—á–∞ –Ω–æ–≤–∏—á–∫–∞ ---
        if (hasPassive('beginners_luck_passive') && state.flags.isFirstSpinOfRound) {
            tempLuck += 10;
            addLog(`–£–¥–∞—á–∞ –Ω–æ–≤–∏—á–∫–∞: +10 –∫ —É–¥–∞—á–µ –Ω–∞ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–∫—Ä—É—Ç!`, 'win');
            state.flags.isFirstSpinOfRound = false; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–Ω—É—Å
        }

        // [NEW] –õ–æ–≥–∏–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ 'desperate_measures'
        if (hasItem('desperate_measures') && state.coins < 10) {
            const bonus = ALL_ITEMS.find(i => i.id === 'desperate_measures').effect.on_spin_luck_bonus.bonus;
            tempLuck += bonus;
            addLog(`–û—Ç—á–∞—è–Ω–Ω—ã–µ –º–µ—Ä—ã: +${bonus} –∫ —É–¥–∞—á–µ (–º–∞–ª–æ –º–æ–Ω–µ—Ç).`, 'win');
            animateInventoryItem('desperate_measures');
        }

        if(hasItem('blood_ritual')) {
            const effect = ALL_ITEMS.find(i => i.id === 'blood_ritual').effect.on_spin_sacrifice;
            // --- –ü–ê–°–°–ò–í–ö–ê: –§–æ–∫—É—Å —Ä–∏—Ç—É–∞–ª–∏—Å—Ç–∞ ---
            let cost = effect.cost;
            let bonusLuck = effect.bonus.luck;
            if (hasPassive('ritualist_focus')) {
                cost = Math.max(0, cost - 1);
                bonusLuck += 2;
            }

            if(state.coins >= cost){
                state.coins -= cost;
                tempLuck += bonusLuck;
                addLog(`–ö—Ä–æ–≤–∞–≤—ã–π –†–∏—Ç—É–∞–ª: -${cost}üí≤, +${bonusLuck} –∫ —É–¥–∞—á–µ –Ω–∞ —ç—Ç–æ—Ç —Å–ø–∏–Ω.`, 'win');
                animateInventoryItem('blood_ritual'); // [NEW] –ê–Ω–∏–º–∞—Ü–∏—è
            }
        }
        // [NEW] –õ–æ–≥–∏–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ 'lucky_hat'
            if (hasItem('lucky_hat')) {
                const effect = ALL_ITEMS.find(i => i.id === 'lucky_hat').effect.every_n_spin_luck;
                if ((state.roundSpinsMade + 1) % effect.n === 0) {
                    tempLuck += effect.luck;
                    addLog(`–®–ª—è–ø–∞ —É–¥–∞—á–∏: +${effect.luck} –∫ —É–¥–∞—á–µ (–∫–∞–∂–¥—ã–π ${effect.n}-–π —Å–ø–∏–Ω).`, 'win');
                    animateInventoryItem('lucky_hat');
                }
            }
            
        
        const perRunLuck = hasItem('growing_debt') ? getItemEffectValue('per_run_bonus.luck', 0, 'sum') * state.run : 0;
        
        // [FIX] –ü—Ä–µ–¥–º–µ—Ç "–ì–æ—Ä–¥–æ—Å—Ç—å –±–∞—Ä–∞—Ö–æ–ª—å—â–∏–∫–∞" —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç getHoarderPrideBonus
        let hoarderLuck = 0;
        if (hasItem('hoarders_pride')) {
            hoarderLuck = getHoarderPrideBonus();
        }

        // [NEW] –õ–æ–≥–∏–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ 'ticket_hoarder'
            let ticketLuck = 0;
            if (hasItem('ticket_hoarder')) {
                const effect = ALL_ITEMS.find(i => i.id === 'ticket_hoarder').effect.per_ticket_luck;
                ticketLuck = Math.floor(state.tickets / effect.per) * effect.luck;
            }
        
        // –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º totalTempLuck –≤–º–µ—Å—Ç–æ state.tempLuck
        const totalLuck = (state.permanentLuckBonus || 0) + getItemEffectValue('luck', 0) + totalTempLuck + tempLuck + perRunLuck + hoarderLuck + ticketLuck + (state.cherryLuckBonus || 0);

        if (state.cherryLuckBonus > 0) {
            addLog(`–í–∏—à–Ω—ë–≤–∞—è —É–¥–∞—á–∞: +${state.cherryLuckBonus} –∫ —É–¥–∞—á–µ –Ω–∞ —ç—Ç–æ—Ç —Å–ø–∏–Ω.`, 'win');
            state.cherryLuckBonus = 0; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–Ω—É—Å
        }
        if (hoarderLuck > 0) {
            addLog(`–ì–æ—Ä–¥–æ—Å—Ç—å –±–∞—Ä–∞—Ö–æ–ª—å—â–∏–∫–∞: +${hoarderLuck} –∫ —É–¥–∞—á–µ –∑–∞ –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã.`, 'win');
        }
        if (ticketLuck > 0) {
            addLog(`–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä —Ç–∞–ª–æ–Ω–æ–≤: +${ticketLuck} –∫ —É–¥–∞—á–µ –∑–∞ —Ç–∞–ª–æ–Ω—ã.`, 'win');
        }
        
        // --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —É–¥–∞—á–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ 3 —á–∞—Å—Ç–∏ –ø–æ —Å–ª—É—á–∞–π–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º ---
        // 1. –î–µ–ª–∏–º —É–¥–∞—á—É –Ω–∞ 3 —Å–ª—É—á–∞–π–Ω—ã–µ —á–∞—Å—Ç–∏
        function splitLuckRandomly(total, parts) {
            if (total <= 0) return Array(parts).fill(0);
            let cuts = Array.from({length: parts-1}, () => Math.random());
            cuts.sort();
            let result = [];
            let prev = 0;
            for (let i = 0; i < cuts.length; i++) {
                result.push(Math.floor((cuts[i] - prev) * total));
                prev = cuts[i];
            }
            result.push(Math.floor((1 - prev) * total));
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—É–º–º—É (–Ω–∞ —Å–ª—É—á–∞–π –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è)
            let diff = total - result.reduce((a,b)=>a+b,0);
            for(let i=0; i<Math.abs(diff); i++) result[i%parts] += Math.sign(diff);
            return result;
        }
        const luckParts = splitLuckRandomly(totalLuck, 3);
        // 2. –í—ã–±–∏—Ä–∞–µ–º 2 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞
        const chosenSymbolIds = [];
        for (let i = 0; i < 2; i++) {
            const idx = Math.floor(Math.random() * filteredSYMBOLS.length);
            chosenSymbolIds.push(filteredSYMBOLS[idx].id);
        }
        // 3. –ö–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å–ª—É—á–∞–π–Ω–æ –Ω–∞–∑–Ω–∞—á–∞–µ–º –æ–¥–Ω–æ–º—É –∏–∑ –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const luckBonuses = {};
        for (let i = 0; i < 3; i++) {
            const symbolIdx = Math.floor(Math.random() * 2); // 0 –∏–ª–∏ 1
            const id = chosenSymbolIds[symbolIdx];
            luckBonuses[id] = (luckBonuses[id] || 0) + luckParts[i];
        }
        // --- DEBUG LOGS ---
        console.log('[DEBUG] –£–¥–∞—á–∞ —Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏:', luckParts);
        console.log('[DEBUG] –°–∏–º–≤–æ–ª—ã –¥–ª—è —É–¥–∞—á–∏:', chosenSymbolIds);
        console.log('[DEBUG] –ò—Ç–æ–≥–æ–≤—ã–µ –±–æ–Ω—É—Å—ã –ø–æ —Å–∏–º–≤–æ–ª–∞–º:', luckBonuses);
        // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –∫ –≤–µ—Å–∞–º
        let adjustedSymbols = filteredWeightedSymbols.map(symbol => {
            if (luckBonuses[symbol.id]) {
                let newWeight = symbol.weight + Math.floor(symbol.value * luckBonuses[symbol.id] * 18);
                return { ...symbol, weight: newWeight };
            }
            return { ...symbol, weight: symbol.weight };
        });

        if (devDebugLuck) {
            let uniqueWeights = {};
            adjustedSymbols.forEach(s => { uniqueWeights[s.id] = s.weight; });
            let weightsStr = Object.entries(uniqueWeights)
                .map(([id, w]) => `${GRAPHICS[id]}:${w}`)
                .join(' ');
            addLog(`Dev: generateGrid() totalLuck=${totalLuck}, –≤–µ—Å–∞: ${weightsStr}`);
            devDebugLuck = false;
        }

        const adjustedWeightedSymbols = adjustedSymbols.flatMap(s => Array(s.weight > 0 ? s.weight : 0).fill(s));

        let grid = Array.from({ length: CONFIG.ROWS * CONFIG.COLS }, () =>
            adjustedWeightedSymbols[Math.floor(Math.random() * adjustedWeightedSymbols.length)]
        );

        // --- –ü–ê–°–°–ò–í–ö–ê: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç ---
        if (hasPassive('middle_man') && Math.random() < 0.5) {
            const highValueSymbols = filteredSYMBOLS.filter(s => ['diamond', 'coins', 'seven'].includes(s.id));
            if (highValueSymbols.length > 0) {
                const randomHighSymbol = highValueSymbols[Math.floor(Math.random() * highValueSymbols.length)];
                grid[7] = randomHighSymbol;
                addLog(`–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ä–∞–±–æ—Ç–∞–ª! –í —Ü–µ–Ω—Ç—Ä–µ –ø–æ—è–≤–∏–ª—Å—è ${randomHighSymbol.graphic}.`, 'win');
            }
        }
        
        // --- –≠–§–§–ï–ö–¢: guarantee_symbol ---
        const guarantee = state.inventory.find(item => item.effect?.guarantee_symbol);
        if (guarantee) {
            const { symbol, count } = guarantee.effect.guarantee_symbol;
            if (!banned.includes(symbol)) {
                let positions = Array.from({length: grid.length}, (_, i) => i);
                for (let i = 0; i < count; i++) {
                    if (positions.length === 0) break;
                    const idx = Math.floor(Math.random() * positions.length);
                    grid[positions[idx]] = SYMBOLS.find(s => s.id === symbol);
                    positions.splice(idx, 1);
                }
                animateInventoryItem(guarantee.id);
            }
        }
        // --- –≠–§–§–ï–ö–¢: sync_cells ---
        const sync = state.inventory.find(item => item.effect?.sync_cells);
        if (sync) {
            const positions = sync.effect.sync_cells.cells;
            if (Array.isArray(positions) && positions.length > 0 && grid.length > 0) {
                // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –∑–∞–ø—Ä–µ—â—ë–Ω
                const symbol = grid[positions[0]];
                if (!banned.includes(symbol.id)) {
                    positions.forEach(pos => grid[pos] = symbol);
                    animateInventoryItem(sync.id);
                }
            }
        }

        // --- –≠–§–§–ï–ö–¢: golden_symbol_chance (–ü–æ–∑–æ–ª–æ—Ç–∞) ---
        const goldenPolishItems = state.inventory.filter(item => item.effect?.golden_symbol_chance);
        goldenPolishItems.forEach(item => {
            const effect = item.effect.golden_symbol_chance;
            const targetSymbol = effect.symbol;
            const chance = effect.chance;
            const multiplier = effect.multiplier;
            
            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º –≤ —Å–µ—Ç–∫–µ
            grid.forEach((symbol, index) => {
                if (symbol && symbol.id === targetSymbol && Math.random() < chance) {
                    // –°–æ–∑–¥–∞–µ–º –∑–æ–ª–æ—Ç—É—é –≤–µ—Ä—Å–∏—é —Å–∏–º–≤–æ–ª–∞
                    const goldenSymbol = {
                        ...symbol,
                        id: symbol.id,
                        value: symbol.value * multiplier,
                        isGolden: true,
                        originalValue: symbol.value
                    };
                    grid[index] = goldenSymbol;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–∏
                    addLog(`‚ú® –ü–æ–∑–æ–ª–æ—Ç–∞ ${symbol.graphic}: —Å–∏–º–≤–æ–ª —Å—Ç–∞–ª –∑–æ–ª–æ—Ç—ã–º! (${symbol.value} ‚Üí ${goldenSymbol.value})`, 'win');
                    animateInventoryItem(item.id);
                }
            });
        });

        // --- –°–ï–ö–†–ï–¢–ù–´–ô –°–ò–ú–í–û–õ: –ü–ò–†–ê–¢–°–ö–ò–ô –§–õ–ê–ì ---
        // –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ã—á–Ω–æ–π —Å–µ—Ç–∫–∏, –¥–ª—è –∫–∞–∂–¥–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–≥
        const pirateSymbol = { id: 'pirate', value: 0, weight: 0, graphic: GRAPHICS.pirate };
        const pirateMaxCount = 3;
        let pirateChance = 0.02 + Math.min(totalLuck * 0.005, 0.5 - 0.02); // 2% –±–∞–∑–æ–≤–æ +0.5% –∑–∞ –∫–∞–∂–¥—É—é —É–¥–∞—á—É, –º–∞–∫—Å–∏–º—É–º 50%
        if (pirateChance > 0.5) pirateChance = 0.5;
        let piratesPlaced = 0;
        if (state.run < 3) {
            // –ü–∏—Ä–∞—Ç—Å–∫–∏–µ —Ñ–ª–∞–≥–∏ –Ω–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –¥–æ 3-–≥–æ —Ü–∏–∫–ª–∞
            console.log('[DEBUG] –ü–∏—Ä–∞—Ç—Å–∫–∏–π —Ñ–ª–∞–≥: —Ü–∏–∫–ª < 3, –Ω–µ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥');
        } else if (state.pirateFlagCooldown && state.pirateFlagCooldown > 0) {
            state.pirateFlagCooldown--;
            console.log('[DEBUG] –ü–∏—Ä–∞—Ç—Å–∫–∏–π —Ñ–ª–∞–≥: –∫—É–ª–¥–∞—É–Ω, –Ω–µ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥');
        } else {
            for (const line of PAYLINES.filter(l => l.scannable && l.type === '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è')) {
                for (const pos of line.positions) {
                    if (piratesPlaced >= pirateMaxCount) break;
                    if (Math.random() < pirateChance) {
                        grid[pos] = pirateSymbol;
                        piratesPlaced++;
                    }
                }
            }
            if (piratesPlaced > 0) {
                state.pirateFlagCooldown = 1;
            }
            console.log(`[DEBUG] –ü–∏—Ä–∞—Ç—Å–∫–∏–π —Ñ–ª–∞–≥: –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞ —Å–ø–∏–Ω = ${piratesPlaced}`);
        }

        // --- –≠–§–§–ï–ö–¢: slot_machine_heart ---
        if (hasItem('slot_machine_heart')) {
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —è—á–µ–π–∫—É –¥–ª—è –¥–∂–µ–∫–ø–æ—Ç–∞
            state.jackpotCellIndex = Math.floor(Math.random() * (CONFIG.ROWS * CONFIG.COLS));
            // –î–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é/–ø–æ–¥—Å–≤–µ—Ç–∫—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        } else {
            state.jackpotCellIndex = undefined;
        }

        // --- –≠–§–§–ï–ö–¢: mirror_dimension ---
        if (hasItem('mirror_dimension')) {
            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è: –ª–µ–≤–∞—è —á–∞—Å—Ç—å <- –ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å
            const mirrorPairs = [
                [0, 4], [1, 3], [5, 9], [6, 8], [10, 14], [11, 13]
            ];
            mirrorPairs.forEach(([left, right]) => {
                grid[left] = { ...grid[right] };
            });
        }

        // --- –≠–§–§–ï–ö–¢: –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –°–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å ---
        const singularityItem = state.inventory.find(item => item.id === 'cosmic_singularity');
        if (singularityItem) {
            const chance = singularityItem.effect?.singularity_chance || 0.01;
            if (Math.random() < chance) {
                const centerSymbol = grid[7];
                if (centerSymbol) {
                    for (let i = 0; i < grid.length; i++) {
                        grid[i] = { ...centerSymbol };
                    }
                    addLog('–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –°–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å: –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –ø—Ä–∏—Ç—è–Ω—É—Ç—ã –∫ —Ü–µ–Ω—Ç—Ä—É!', 'win');
                    animateInventoryItem('cosmic_singularity');
                }
            }
        }

        return grid;
    }

    // --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –í–ò–ó–£–ê–õ–¨–ù–û–ì–û –ü–†–ï–í–†–ê–©–ï–ù–ò–Ø –°–ò–ú–í–û–õ–û–í –í –ó–û–õ–û–¢–´–ï ---
    function animateGoldenTransformation(symbolElement, symbolData) {
        if (!symbolElement || !symbolData.isGolden) return;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è
        symbolElement.classList.add('turning-golden');
        
        // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∑–æ–ª–æ—Ç–æ–π —ç—Ñ—Ñ–µ–∫—Ç
        setTimeout(() => {
            symbolElement.classList.remove('turning-golden');
            symbolElement.classList.add('golden');
        }, 600);
    }

    // --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ó–û–õ–û–¢–´–• –°–ò–ú–í–û–õ–û–í ---
    function updateGoldenSymbolsDisplay() {
        const reels = ui.slotMachine.querySelectorAll('.reel');
        const finalGrid = state.grid;

        reels.forEach((reel, i) => {
            const symbols = reel.querySelectorAll('.symbol');
            const symbolData = finalGrid[i];
            
            if (symbolData && symbolData.isGolden) {
                const symbolElement = symbols[symbols.length - 1]; // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª - —Ç–µ–∫—É—â–∏–π
                if (symbolElement && !symbolElement.classList.contains('golden')) {
                    animateGoldenTransformation(symbolElement, symbolData);
                }
            }
        });
    }

    function showTotalWinPopup(amount) {
        const popup = document.createElement('div');
        popup.className = 'total-win-popup';
        popup.innerHTML = `
            <div class="win-title">–û–ë–©–ò–ô –í–´–ò–ì–†–´–®</div>
            <div class="win-amount">+${formatNumberWithComma(amount)}üí≤</div>
        `;
        document.body.appendChild(popup);

        if (amount >= 100) {
            const colors = ['#FFD700', '#00ff7f', '#ff3b3b', '#40c4ff', '#b388ff'];
            for (let i = 0; i < 50; i++) {
                const confetti = document.createElement('div');
                confetti.className = 'confetti';
                confetti.style.left = Math.random() * 100 + 'vw';
                confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                confetti.style.animationDuration = (Math.random() * 1 + 1) + 's';
                document.body.appendChild(confetti);
                setTimeout(() => confetti.remove(), 2000);
            }
        }

        setTimeout(() => {
            popup.classList.add('show');
            setTimeout(() => {
                popup.classList.remove('show');
                popup.classList.add('fade-out');
                setTimeout(() => popup.remove(), 1000);
            }, 1500);
        }, 100);
    }

    function calculateWinnings() {
        let grid = [...state.grid];
        let totalWinnings = 0;
        const allWinningPositions = new Set();
        let winningLinesInfo = [];
        
        // [NEW] –õ–æ–≥–∏–∫–∞ –¥–ª—è Wild Clover –∏ –¥—Ä—É–≥–∏—Ö wild-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        const wildSymbolIds = state.inventory
            .filter(item => item.effect?.wild_symbol)
            .map(item => item.effect.wild_symbol);
        if (wildSymbolIds.length > 0) {
            // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö wild-–ø—Ä–µ–¥–º–µ—Ç–æ–≤
            state.inventory.forEach(item => {
                if (item.effect?.wild_symbol) animateInventoryItem(item.id);
            });
        }

        // --- 0. –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´ ---
        state.tempLuck = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —É–¥–∞—á—É –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        state.inventory.forEach(item => {
            if (item.effect?.temporary_luck_on_spin) {
                const symbolId = item.effect.temporary_luck_on_spin;
                const count = grid.filter(s => s.id === symbolId).length;
                if (count > 0) {
                    state.tempLuck += count;
                    addLog(`${item.name}: +${count} –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —É–¥–∞—á–µ.`, 'win');
                    animateInventoryItem(item.id); // [NEW] –ê–Ω–∏–º–∞—Ü–∏—è
                }
            }
            // [NEW] conditional_luck: –µ—Å–ª–∏ –Ω–∞ –ø–æ–ª–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª, –¥–∞—ë–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å
            if (item.effect?.conditional_luck) {
                const { symbol, bonus } = item.effect.conditional_luck;
                const found = grid.some(s => s.id === symbol);
                if (found) {
                    state.tempLuck += bonus;
                    addLog(`${item.name}: +${bonus} –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —É–¥–∞—á–µ (—É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ).`, 'win');
                    animateInventoryItem(item.id);
                }
            }
        });

        const substitutions = state.inventory.filter(item => item.effect?.substitute).map(item => item.effect.substitute);
        if (substitutions.length > 0) {
            let substitutionLogged = false;
            grid = grid.map(symbol => {
                const sub = substitutions.find(s => s.from === symbol.id);
                if (sub) {
                    if(!substitutionLogged) { addLog(`–¶–µ–¥—Ä–∞ –ª–∏–º–æ–Ω–∞: üçã —Å—Ç–∞–ª–∏ üçÄ.`, 'win'); substitutionLogged = true; }
                    return SYMBOLS.find(s_data => s_data.id === sub.to) || symbol;
                }
                return symbol;
            });
        }

        // --- 1. –ü–†–û–í–ï–†–ö–ê –õ–ò–ù–ò–ô –í–´–ü–õ–ê–¢ ---
        let activePaylines = [...PAYLINES];
        state.inventory.forEach(item => {
            if (item.effect?.add_payline) { activePaylines.push(item.effect.add_payline); }
        });
        
        const payBothWays = hasItem("twins_mirror") || state.inventory.some(item => item.effect?.pay_both_ways);

        if (payBothWays) {
            const mirrored = activePaylines.filter(l => l.scannable).map(line => ({
                ...line,
                name: line.name + ' (–æ–±—Ä–∞—Ç–Ω–æ)',
                positions: [...line.positions].reverse(),
            }));
            activePaylines = activePaylines.concat(mirrored);
        }

        const symbolMultipliers = {};
        state.inventory.forEach(item => {
            if (item.effect?.symbol_value_multiplier) {
                const eff = item.effect.symbol_value_multiplier;
                symbolMultipliers[eff.symbol] = (symbolMultipliers[eff.symbol] || 1) * eff.multiplier;
            }
        });
        // --- [NEW] winMultiplier (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö–æ–ª–æ–∫–æ–ª—å—á–∏–∫ —É–¥–∞—á–∏) ---
        let winMultiplier = 1;
        state.inventory.forEach(item => {
            if (item.effect?.winMultiplier) {
                // –î–ª—è lucky_bell: –µ—Å–ª–∏ –Ω–∞ –ø–æ–ª–µ –µ—Å—Ç—å bell, –ø—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
                if (item.id === 'lucky_bell') {
                    if (grid.some(s => s.id === 'bell')) {
                        winMultiplier *= item.effect.winMultiplier;
                        animateInventoryItem('lucky_bell');
                    }
                } else {
                    // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å winMultiplier ‚Äî –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º
                    winMultiplier *= item.effect.winMultiplier;
                }
            }
        });
        winMultiplier = Math.ceil(winMultiplier); // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        // –°—É–º–º–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å –∏ –±–æ–Ω—É—Å –∑–∞ —Ü–∏–∫–ª
        const baseAllSymbolsMultiplierBoost = getItemEffectValue('all_symbols_multiplier_boost', 0, 'sum');
        const perRunAllSymbolsMultiplierBoost = state.inventory.reduce((acc, item) => {
            if (item.effect?.per_run_bonus?.all_symbols_multiplier_boost) {
                return acc + item.effect.per_run_bonus.all_symbols_multiplier_boost * state.run;
            }
            return acc;
        }, 0);
        const allSymbolsMultiplierBoostCurrent = baseAllSymbolsMultiplierBoost + perRunAllSymbolsMultiplierBoost;
        if (allSymbolsMultiplierBoostCurrent > 0) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å –∫–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º
            ['lemon', 'cherry', 'clover', 'bell', 'diamond', 'coins', 'seven'].forEach(symbolId => {
                symbolMultipliers[symbolId] = (symbolMultipliers[symbolId] || 1) + allSymbolsMultiplierBoostCurrent;
            });
        }
        const lineLengthBonuses = {};
        state.inventory.forEach(item => {
            if (item.effect?.line_length_win_bonus) {
                const eff = item.effect.line_length_win_bonus;
                lineLengthBonuses[eff.length] = (lineLengthBonuses[eff.length] || 0) + eff.bonus;
            }
        });
        const lineWinBonuses = {};
        const lineWinTickets = {};
        state.inventory.forEach(item => {
            if (item.effect?.on_line_win_bonus) {
                const eff = item.effect.on_line_win_bonus;
                if (eff.coins) lineWinBonuses[eff.length] = (lineWinBonuses[eff.length] || 0) + eff.coins;
                if (eff.tickets) lineWinTickets[eff.length] = (lineWinTickets[eff.length] || 0) + eff.tickets;
            }
        });

        // --- –ö–†–ò–°–¢–ê–õ–õ –•–ê–û–°–ê: –≤—ã–±–∏—Ä–∞–µ–º –ª–∏–Ω–∏—é –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä ---
        if (hasItem('chaos_crystal')) {
            const chaosItem = state.inventory.find(item => item.id === 'chaos_crystal');
            const effect = chaosItem.effect.chaos_line_modifier;
            const min = effect.min ?? -2;
            const max = effect.max ?? 3;
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ª–∏–Ω–∏—é –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            const allLines = [...PAYLINES];
            const randomLine = allLines[Math.floor(Math.random() * allLines.length)];
            // –°–ª—É—á–∞–π–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            const mod = Math.floor(Math.random() * (max - min + 1)) + min;
            state.chaosLineMod = { lineName: randomLine.name, mod };
            addLog(`üíé –ö—Ä–∏—Å—Ç–∞–ª–ª –•–∞–æ—Å–∞: –ª–∏–Ω–∏—è "${randomLine.name}" –ø–æ–ª—É—á–∏—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä ${mod > 0 ? '+' : ''}${mod} –∫ –º–Ω–æ–∂–∏—Ç–µ–ª—é!`, mod >= 0 ? 'win' : 'loss');
            animateInventoryItem('chaos_crystal');
        } else {
            state.chaosLineMod = undefined;
        }

        activePaylines.forEach(line => {
            const symbolsOnLine = line.positions.map(pos => grid[pos]);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ª–∏–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ –∑–µ—Ä–∫–∞–ª–∞?
            const mirrorLeft = [0,1,5,6,10,11];
            const isMirrorLine = line.positions.every(pos => mirrorLeft.includes(pos));
            
            const processWin = (firstSymbol, winLength, lineMultiplier, winningPositionsOnLine) => {
                 let win = 0;
                 
                 // --- –ü–ê–°–°–ò–í–ö–ê: –û–≥—Ä–∞–Ω—â–∏–∫ –∞–ª–º–∞–∑–æ–≤ ---
                if (hasPassive('diamond_cutter') && firstSymbol.id === 'diamond') {
                    lineMultiplier += winLength;
                }
                // --- –ü–ê–°–°–ò–í–ö–ê: –ü–æ—á—Ç–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å ---
                if (hasPassive('almost_there') && winLength === 4) {
                    lineMultiplier += 1;
                }
                
                let symbolValue = firstSymbol.value;
                if (hasPassive('seven_symphony') && firstSymbol.id === 'seven') {
                    symbolValue = Math.floor(symbolValue * 1.5);
                }
                
                let itemMultiplier = symbolMultipliers[firstSymbol.id] || 1;
                if (hasPassive('golden_touch') && firstSymbol.id === 'lemon' && hasItem('golden_lemon')) {
                    itemMultiplier += 1;
                }
                symbolValue = Math.floor(symbolValue * itemMultiplier);

                //–∑–∞ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –≤ –ª–∏–Ω–∏–∏ –¥–∞—ë—Ç—Å—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
                win = symbolValue * winLength * lineMultiplier;
                
                if (lineLengthBonuses[winLength]) {
                    let bonus = lineLengthBonuses[winLength];
                    if (hasPassive('sticky_fingers_plus') && winLength === 3 && hasItem('sticky_fingers')) {
                        bonus += 1;
                    }
                    win += bonus;
                }
                if (lineWinBonuses[winLength]) {
                    let bonus = lineWinBonuses[winLength];
                    bonus = applyCoinDoubler(bonus);
                    win += bonus;
                }

                // [NEW] –õ–æ–≥–∏–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ 'central_focus'
                if (hasItem('central_focus') && winningPositionsOnLine.some(pos => pos % 5 === 2)) {
                    const bonus = ALL_ITEMS.find(i => i.id === 'central_focus').effect.on_line_win_bonus.coins;
                    win += applyCoinDoubler(bonus);
                    animateInventoryItem('central_focus');
                }
                
                // --- –ü–ê–°–°–ò–í–ö–ê: –ó–≤–æ–Ω–∞—Ä—å ---
                if (hasPassive('bell_ringer') && firstSymbol.id === 'bell') {
                    const bellCount = grid.filter(s => s && s.id === 'bell').length;
                    win += bellCount;
                }
                // --- –ü–ê–°–°–ò–í–ö–ê: –ü—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏–µ ---
                if (hasPassive('prosperity_clover') && firstSymbol.id === 'clover') {
                    const coinCount = grid.filter(s => s && s.id === 'coins').length;
                    win += (coinCount * 2);
                }
                
                if (lineWinTickets[winLength]) {
                    state.tickets += lineWinTickets[winLength];
                    addLog(`–¢–∞–ª–æ–Ω—ã: +${lineWinTickets[winLength]}üéüÔ∏è –∑–∞ –ª–∏–Ω–∏—é x${winLength}.`, 'win');
                }
                // --- –ü–ê–°–°–ò–í–ö–ê: –ì–µ–æ–ª–æ–≥ ---
                if (hasPassive('geologist') && line.type === '–ù–µ–±–æ/–ó–µ–º–ª—è') {
                    state.tickets += 3;
                    addLog(`–ì–µ–æ–ª–æ–≥: +3üéüÔ∏è –∑–∞ –ª–∏–Ω–∏—é "${line.name}"!`, 'win');
                }

                const symbolWinBonusItem = state.inventory.find(item => item.effect?.symbol_win_bonus?.symbol === firstSymbol.id);
                if(symbolWinBonusItem){
                    let bonus = symbolWinBonusItem.effect.symbol_win_bonus.bonus;
                    win += bonus;
                    animateInventoryItem(symbolWinBonusItem.id); // [NEW] –ê–Ω–∏–º–∞—Ü–∏—è
                }
                
                const symbolWinTicketItem = state.inventory.find(item => item.effect?.symbol_win_bonus_ticket?.symbol === firstSymbol.id);
                if(symbolWinTicketItem){
                    let ticketBonus = symbolWinTicketItem.effect.symbol_win_bonus_ticket.tickets;
                    state.tickets += ticketBonus;
                    addLog(`${symbolWinTicketItem.name}: +${ticketBonus}üéüÔ∏è –∑–∞ –ª–∏–Ω–∏—é ${GRAPHICS[firstSymbol.id]}.`, 'win');
                    animateInventoryItem(symbolWinTicketItem.id);
                }


                if (hasPassive('lucky_bomb') && firstSymbol.id === 'cherry' && hasItem('cherry_bomb')) {
                    state.tickets += 1;
                    addLog(`–°—á–∞—Å—Ç–ª–∏–≤–∞—è –±–æ–º–±–∞: +1üéüÔ∏è –∑–∞ –ª–∏–Ω–∏—é –≤–∏—à–µ–Ω!`, 'win');
                }
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö–æ–ª–æ–∫–æ–ª—å—á–∏–∫ —É–¥–∞—á–∏)
                if (winMultiplier > 1) {
                    win = Math.floor(win * winMultiplier);
                }
                
                return win;
            };

            // [REFACTOR] –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Wild-—Å–∏–º–≤–æ–ª–æ–≤
            if (line.scannable) {
                const lengthMultipliers = { 3: 1, 4: 2, 5: 3 };
                let i = 0;
                while (i < symbolsOnLine.length) {
                    let currentSymbol = symbolsOnLine[i];
                    // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª - wild, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ-wild —Å–∏–º–≤–æ–ª –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ª–∏–Ω–∏–∏
                    if (wildSymbolIds.length > 0 && wildSymbolIds.includes(currentSymbol.id)) {
                        const nextNonWild = symbolsOnLine.slice(i + 1).find(s => !wildSymbolIds.includes(s.id));
                        if (nextNonWild) {
                            currentSymbol = nextNonWild;
                        } else { // –í—Å—è –ª–∏–Ω–∏—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ wild'–æ–≤
                            i++; continue;
                        }
                    }

                    let comboLength = 0;
                    let comboPositions = [];
                    for (let j = i; j < symbolsOnLine.length; j++) {
                        if (symbolsOnLine[j].id === currentSymbol.id || (wildSymbolIds.length > 0 && wildSymbolIds.includes(symbolsOnLine[j].id))) {
                            comboLength++;
                            comboPositions.push(line.positions[j]);
                        } else {
                            break;
                        }
                    }

                    if (comboLength >= 3) {
                        let lineMultiplier = lengthMultipliers[comboLength];
                        // –°—É–º–º–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å –∏ –±–æ–Ω—É—Å –∑–∞ —Ü–∏–∫–ª –¥–ª—è line_type_multiplier_bonus
                        const typeBonus = state.inventory.reduce((acc, item) => {
                            // –û–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å
                            if (item.effect?.line_type_multiplier_bonus && item.effect.line_type_multiplier_bonus.types.some(type => line.type === type)) {
                                acc += item.effect.line_type_multiplier_bonus.bonus;
                            }
                            // –ë–æ–Ω—É—Å –∑–∞ —Ü–∏–∫–ª
                            if (item.effect?.per_run_bonus?.line_type_multiplier_bonus && item.effect.per_run_bonus.line_type_multiplier_bonus.types.some(type => line.type === type)) {
                                acc += item.effect.per_run_bonus.line_type_multiplier_bonus.bonus * (window.state?.run || 1);
                            }
                            return acc;
                        }, 0);
                        lineMultiplier += typeBonus;
                        
                        const lengthBonus = state.inventory.filter(item => item.effect?.line_length_multiplier_bonus).reduce((acc, item) => (item.effect.line_length_multiplier_bonus.length === comboLength) ? acc * item.effect.line_length_multiplier_bonus.multiplier : acc, 1);
                        lineMultiplier *= lengthBonus;

                        // --- –ü–∞–ª–∏—Ç—Ä–∞ —Ö—É–¥–æ–∂–Ω–∏–∫–∞: –±–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ ---
                        const paletteItem = state.inventory.find(item => item.effect?.diverse_line_bonus);
                        if (paletteItem && comboLength >= (paletteItem.effect.diverse_line_bonus.min_length || 2)) {
                            // –°–æ–±–∏—Ä–∞–µ–º "—Ä–µ–∞–ª—å–Ω—ã–µ" —Å–∏–º–≤–æ–ª—ã –ª–∏–Ω–∏–∏ (wild —Å—á–∏—Ç–∞–µ–º –∑–∞ currentSymbol)
                            const realSymbols = symbolsOnLine.slice(i, i + comboLength).map(s => (wildSymbolIds.length > 0 && wildSymbolIds.includes(s.id)) ? currentSymbol.id : s.id);
                            const uniqueSymbols = new Set(realSymbols);
                            if (uniqueSymbols.size >= 2) {
                                lineMultiplier += paletteItem.effect.diverse_line_bonus.bonus;
                                addLog(`–ü–∞–ª–∏—Ç—Ä–∞ —Ö—É–¥–æ–∂–Ω–∏–∫–∞: –ª–∏–Ω–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤! +${paletteItem.effect.diverse_line_bonus.bonus} –∫ –º–Ω–æ–∂–∏—Ç–µ–ª—é.`, 'win');
                                animateInventoryItem(paletteItem.id);
                            }
                        }

                        // --- diverse_line_bonus: –±–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ (—Å—É–º–º–∏—Ä—É–µ—Ç—Å—è —Å–æ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤) ---
                        const allDiverseBonuses = state.inventory
                            .filter(item => item.effect?.diverse_line_bonus && comboLength >= (item.effect.diverse_line_bonus.min_length || 2))
                            .map(item => item.effect.diverse_line_bonus);
                        const realSymbols = symbolsOnLine.slice(i, i + comboLength).map(s => (wildSymbolIds.length > 0 && wildSymbolIds.includes(s.id)) ? currentSymbol.id : s.id);
                        const uniqueSymbols = new Set(realSymbols);
                        allDiverseBonuses.forEach(bonusObj => {
                            if (uniqueSymbols.size >= bonusObj.min_length) {
                                lineMultiplier += bonusObj.bonus;
                                addLog(`–ë–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ: –ª–∏–Ω–∏—è –∏–∑ ${uniqueSymbols.size} —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤! +${bonusObj.bonus} –∫ –º–Ω–æ–∂–∏—Ç–µ–ª—é.`, 'win');
                            }
                        });

                        // --- –ø—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ö—Ä–∏—Å—Ç–∞–ª–ª–∞ –•–∞–æ—Å–∞ –∫ lineMultiplier ---
                        let chaosMod = 0;
                        if (state.chaosLineMod && state.chaosLineMod.lineName === line.name) {
                            chaosMod = state.chaosLineMod.mod;
                        }
                        lineMultiplier += chaosMod;

                        let win = processWin(currentSymbol, comboLength, lineMultiplier, comboPositions);
                        // --- –ó–µ—Ä–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è: –¥–µ–ª–∏–º –≤—ã–∏–≥—Ä—ã—à –Ω–∞ 2 ---
                        if (isMirrorLine) {
                            win = Math.floor(win / 2);
                        }
                        
                        winningLinesInfo.push({ name: `${line.name} (x${comboLength})`, symbol: currentSymbol.id, win, positions: comboPositions });
                        totalWinnings += win;
                        comboPositions.forEach(pos => allWinningPositions.add(pos));
                        
                        i += comboLength;
                    } else {
                        i++;
                    }
                }
            } 
            else { // –î–ª—è –Ω–µ—Å–∫–∞–Ω–∏—Ä—É–µ–º—ã—Ö –ª–∏–Ω–∏–π
                const firstSymbol = symbolsOnLine[0];
                let lineSymbol = firstSymbol;
                 // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª - wild, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–µ-wild
                if (wildSymbolIds.length > 0 && wildSymbolIds.includes(firstSymbol.id)) {
                    const nextNonWild = symbolsOnLine.find(s => !wildSymbolIds.includes(s.id));
                    if (nextNonWild) lineSymbol = nextNonWild;
                }

                if (symbolsOnLine.every(s => s.id === lineSymbol.id || (wildSymbolIds.length > 0 && wildSymbolIds.includes(s.id)))) {
                    let lineMultiplier = line.multiplier;
                    // –°—É–º–º–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å –∏ –±–æ–Ω—É—Å –∑–∞ —Ü–∏–∫–ª –¥–ª—è line_type_multiplier_bonus
                    const typeBonus = state.inventory.reduce((acc, item) => {
                        // –û–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å
                        if (item.effect?.line_type_multiplier_bonus && item.effect.line_type_multiplier_bonus.types.some(type => line.type === type)) {
                            acc += item.effect.line_type_multiplier_bonus.bonus;
                        }
                        // –ë–æ–Ω—É—Å –∑–∞ —Ü–∏–∫–ª
                        if (item.effect?.per_run_bonus?.line_type_multiplier_bonus && item.effect.per_run_bonus.line_type_multiplier_bonus.types.some(type => line.type === type)) {
                            acc += item.effect.per_run_bonus.line_type_multiplier_bonus.bonus * (window.state?.run || 1);
                        }
                        return acc;
                    }, 0);
                    lineMultiplier += typeBonus;

                    const lengthBonus = state.inventory.filter(item => item.effect?.line_length_multiplier_bonus).reduce((acc, item) => (item.effect.line_length_multiplier_bonus.length === line.positions.length) ? acc * item.effect.line_length_multiplier_bonus.multiplier : acc, 1);
                    lineMultiplier *= lengthBonus;

                    // --- –ü–∞–ª–∏—Ç—Ä–∞ —Ö—É–¥–æ–∂–Ω–∏–∫–∞: –±–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ (–¥–ª—è –Ω–µ-—Å–∫–∞–Ω–∏—Ä—É–µ–º—ã—Ö –ª–∏–Ω–∏–π) --- 
                    const paletteItem = state.inventory.find(item => item.effect?.diverse_line_bonus);
                    if (paletteItem && line.positions.length >= (paletteItem.effect.diverse_line_bonus.min_length || 2)) {
                        // –°–æ–±–∏—Ä–∞–µ–º "—Ä–µ–∞–ª—å–Ω—ã–µ" —Å–∏–º–≤–æ–ª—ã –ª–∏–Ω–∏–∏ (wild —Å—á–∏—Ç–∞–µ–º –∑–∞ lineSymbol)
                        const realSymbols = symbolsOnLine.map(s => (wildSymbolIds.length > 0 && wildSymbolIds.includes(s.id)) ? lineSymbol.id : s.id);
                        const uniqueSymbols = new Set(realSymbols);
                        if (uniqueSymbols.size >= 2) {
                            lineMultiplier += paletteItem.effect.diverse_line_bonus.bonus;
                            addLog(`–ü–∞–ª–∏—Ç—Ä–∞ —Ö—É–¥–æ–∂–Ω–∏–∫–∞: –ª–∏–Ω–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤! +${paletteItem.effect.diverse_line_bonus.bonus} –∫ –º–Ω–æ–∂–∏—Ç–µ–ª—é.`, 'win');
                            animateInventoryItem(paletteItem.id);
                        }
                    }

                    // --- diverse_line_bonus: –±–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ (–¥–ª—è –Ω–µ-—Å–∫–∞–Ω–∏—Ä—É–µ–º—ã—Ö –ª–∏–Ω–∏–π, —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è —Å–æ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤) --- 
                    const allDiverseBonuses2 = state.inventory
                        .filter(item => item.effect?.diverse_line_bonus && line.positions.length >= (item.effect.diverse_line_bonus.min_length || 2))
                        .map(item => item.effect.diverse_line_bonus);
                    const realSymbols2 = symbolsOnLine.map(s => (wildSymbolIds.length > 0 && wildSymbolIds.includes(s.id)) ? lineSymbol.id : s.id);
                    const uniqueSymbols2 = new Set(realSymbols2);
                    allDiverseBonuses2.forEach(bonusObj => {
                        if (uniqueSymbols2.size >= bonusObj.min_length) {
                            lineMultiplier += bonusObj.bonus;
                            addLog(`–ë–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ: –ª–∏–Ω–∏—è –∏–∑ ${uniqueSymbols2.size} —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤! +${bonusObj.bonus} –∫ –º–Ω–æ–∂–∏—Ç–µ–ª—é.`, 'win');
                        }
                    });

                    // --- –ø—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ö—Ä–∏—Å—Ç–∞–ª–ª–∞ –•–∞–æ—Å–∞ –∫ lineMultiplier ---
                    let chaosMod = 0;
                    if (state.chaosLineMod && state.chaosLineMod.lineName === line.name) {
                        chaosMod = state.chaosLineMod.mod;
                    }
                    lineMultiplier += chaosMod;

                    let win = processWin(lineSymbol, line.positions.length, lineMultiplier, line.positions);
                    // --- –ó–µ—Ä–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è: –¥–µ–ª–∏–º –≤—ã–∏–≥—Ä—ã—à –Ω–∞ 2 ---
                    if (isMirrorLine) {
                        win = Math.floor(win / 2);
                    }
                    
                    totalWinnings += win;
                    winningLinesInfo.push({ name: line.name, symbol: lineSymbol.id, win, positions: line.positions });
                    line.positions.forEach(pos => allWinningPositions.add(pos));
                }
            }
        });

        // –ü–æ—Å–ª–µ –ø–æ–¥—Å—á—ë—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        state.chaosLineMod = undefined;

        // --- 2. –ü–†–û–í–ï–†–ö–ê –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í ---
        const symbolCounts = grid.reduce((acc, s) => { acc[s.id] = (acc[s.id] || 0) + 1; return acc; }, {});
        const [topSymbolId, topCount] = Object.entries(symbolCounts).sort((a,b) => b[1] - a[1])[0] || [null, 0];

        if (topCount === 15) {
            state.consecutiveJackpots = (state.consecutiveJackpots || 0) + 1;
            if (state.consecutiveJackpots >= 2) {
                state.pirateFlagSuperChance = true;
                
            }
            const jackpotWin = SYMBOLS.find(s => s.id === topSymbolId).value * 15 * topCount * (state.run || 1);
            totalWinnings += jackpotWin;
            addLog(`üí• –î–ñ–ï–ö–ü–û–¢!!! üí• (${topSymbolId} x15 x${state.run || 1}): +${formatNumberWithComma(jackpotWin)}üí≤`, 'win');
            for(let i=0; i<15; i++) allWinningPositions.add(i);
            
            setTimeout(() => {
                const jackpotOverlay = document.createElement('div');
                jackpotOverlay.className = 'jackpot-overlay';
                jackpotOverlay.innerHTML = `
                    <div class="jackpot-content">
                        <div class="jackpot-title">–î–ñ–ï–ö–ü–û–¢!!!</div>
                        <div class="jackpot-amount">+${formatNumberWithComma(jackpotWin)}üí≤</div>
                    </div>
                `;
                document.body.appendChild(jackpotOverlay);
                
                for (let i = 0; i < 50; i++) {
                    const particle = document.createElement('div');
                    particle.className = 'jackpot-particle';
                    particle.style.setProperty('--angle', `${Math.random() * 360}deg`);
                    particle.style.setProperty('--delay', `${Math.random() * 0.5}s`);
                    jackpotOverlay.appendChild(particle);
                }
                
                setTimeout(() => {
                    jackpotOverlay.classList.add('fade-out');
                    setTimeout(() => jackpotOverlay.remove(), 1000);
                }, 4000);
            }, 1000);
        } else if (topCount >= 12 && topCount < 15) {
            const eyeWin = SYMBOLS.find(s => s.id === topSymbolId).value * 10 * topCount;
            totalWinnings += eyeWin;
            addLog(`üëÅÔ∏è –ì–õ–ê–ó! üëÅÔ∏è (${topSymbolId} x${topCount}): +${formatNumberWithComma(eyeWin)}üí≤`, 'win');
            grid.forEach((s, i) => { if(s.id === topSymbolId) allWinningPositions.add(i); });
        }

        // --- 3. –ü–û–°–¢-–ë–û–ù–£–°–´ –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
        const loggedLines = new Set();
        winningLinesInfo.forEach(info => {
             if (!loggedLines.has(info.name)) {
                addLog(`${info.name} (${GRAPHICS[info.symbol]}): +${info.win}üí≤`, 'win');
                loggedLines.add(info.name);
             }
        });

        state.lastWinningLines = winningLinesInfo;

        if (winningLinesInfo.length > 1) {
            let comboMultiplier = 1;
            if (hasItem('combo_counter')) {
                comboMultiplier = state.inventory.find(item => item.id === 'combo_counter')?.effect?.combo_bonus_multiplier || 1.5;
                animateInventoryItem('combo_counter');
            }
            let baseComboRate = 0.25;
            if (hasPassive('combo_king')) {
                baseComboRate = 0.40;
            }
            const comboBonus = Math.floor(totalWinnings * ((1 + (winningLinesInfo.length - 1) * baseComboRate - 1) * comboMultiplier));
            totalWinnings += comboBonus;
            addLog(`üî• –ö–û–ú–ë–û x${winningLinesInfo.length}! –ë–æ–Ω—É—Å: +${formatNumberWithComma(comboBonus)}üí≤`, 'win');

            // --- –ü–ê–°–°–ò–í–ö–ê: –¶–µ–ø–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è ---
            if (hasPassive('chain_reaction')) {
                let ticketBonus = 0;
                for(let i = 0; i < winningLinesInfo.length; i++) {
                    if (Math.random() < 0.10) {
                        ticketBonus++;
                    }
                }
                if (ticketBonus > 0) {
                    state.tickets += ticketBonus;
                    addLog(`–¶–µ–ø–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è: +${ticketBonus}üéüÔ∏è –∑–∞ –∫–æ–º–±–æ!`, 'win');
                }
            }
        }
        
        // --- PASSIVE BONUSES ---
        if (state.activePassives.length > 0) {
            if (hasPassive('clover_bonus') && totalWinnings > 0) {
                const cloverCount = grid.filter(s => s.id === 'clover').length;
                if (cloverCount > 0) {
                    const bonus = cloverCount;
                    totalWinnings += bonus;
                    addLog(`–ö–ª–µ–≤–µ—Ä–Ω—ã–π –±–æ–Ω—É—Å: +${formatNumberWithComma(bonus)}üí≤ –∑–∞ –∫–ª–µ–≤–µ—Ä—ã.`, 'win');
                }
            }
            if (hasPassive('wilder_clover') && hasItem('wild_clover')) {
                const cloverCount = grid.filter(s => s.id === 'clover').length;
                if (cloverCount > 0) {
                    totalWinnings += cloverCount;
                    addLog(`–î–∏—á–∞–π—à–∏–π –∫–ª–µ–≤–µ—Ä: +${cloverCount}üí≤ –∑–∞ –∫–∞–∂–¥—ã–π –∫–ª–µ–≤–µ—Ä –Ω–∞ –ø–æ–ª–µ.`, 'win');
                }
            }

            if (hasPassive('cherry_luck')) {
                const cherryCount = grid.filter(s => s.id === 'cherry').length;
                if (cherryCount > 0) {
                    state.cherryLuckBonus = (state.cherryLuckBonus || 0) + cherryCount;
                }
            }
        }


        // [NEW] –ë–æ–Ω—É—Å—ã –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
        let postSpinBonuses = 0;
        let gamblersCoin = state.inventory.find(item => item.id === 'gamblers_coin');
        if (gamblersCoin && typeof gamblersCoin.on_spin_bonus === 'function' && winningLinesInfo.length > 0) {
            // –ú–æ–Ω–µ—Ç–∫–∞ —à—É–ª–µ—Ä–∞ –∑–∞–º–µ–Ω—è–µ—Ç –≤—ã–∏–≥—Ä—ã—à
            const result = gamblersCoin.on_spin_bonus(state.grid, totalWinnings, state);
            totalWinnings = result;
            addLog(`${gamblersCoin.name}: ${result >= 0 ? '+' : ''}${formatNumberWithComma(result)}üí≤`, result >= 0 ? 'win' : 'loss');
            if (result > 0) {
                animateInventoryItem(gamblersCoin.id);
            } else if (result < 0) {
                // –ê–Ω–∏–º–∞—Ü–∏—è –∫—Ä–∞—Å–Ω–æ–π –æ–±–≤–æ–¥–∫–∏ –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã—à–∞
                const el = document.querySelector(`#inventory-items [data-item-id='gamblers_coin'], #planning-inventory-items [data-item-id='gamblers_coin']`);
                if (el) {
                    el.classList.remove('item-activated');
                    void el.offsetWidth;
                    el.classList.add('item-activated-loss');
                    setTimeout(() => {
                        el.classList.remove('item-activated-loss');
                    }, 800);
                }
            }
            // –ï—Å–ª–∏ result === 0 ‚Äî –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤–æ–æ–±—â–µ
        }
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ on_spin_bonus
        state.inventory.forEach(item => {
            if (item.on_spin_bonus && item.id !== 'gamblers_coin') {
                const bonus = item.on_spin_bonus(state.grid, totalWinnings, state);
                if (bonus > 0) {
                    postSpinBonuses += bonus;
                    addLog(`${item.name}: +${formatNumberWithComma(bonus)}üí≤`, 'win');
                    animateInventoryItem(item.id);
                }
            }
        });
        totalWinnings += postSpinBonuses;

        // [NEW] –ë–æ–Ω—É—Å—ã –æ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (—Ñ—Ä—É–∫—Ç–æ–≤—ã–π —Å–∞–ª–∞—Ç –∏ —Ç.–¥.)
        if (hasItem('fruit_salad')) {
            let bonus = applyFruitSaladBonus(grid);
            if (bonus > 0) {
                totalWinnings += applyCoinDoubler(bonus);
                addLog(`–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–∞–ª–∞—Ç: +${applyCoinDoubler(bonus)}üí≤`, 'win');
                animateInventoryItem('fruit_salad');
            }
        }
        if (hasItem('sweet_spin')) {
            let bonus = applySweetSpinBonus(grid);
            if (bonus > 0) {
                totalWinnings += applyCoinDoubler(bonus);
                addLog(`–°–ª–∞–¥–∫–∏–π –ø—Ä–æ–∫—Ä—É—Ç: +${applyCoinDoubler(bonus)}üí≤`, 'win');
                animateInventoryItem('sweet_spin');
            }
        }
        if (hasItem('clover_field')) {
            let bonus = applyCloverFieldBonus(grid);
            if (bonus > 0) {
                totalWinnings += applyCoinDoubler(bonus);
                addLog(`–ö–ª–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ: +${applyCoinDoubler(bonus)}üí≤`, 'win');
                animateInventoryItem('clover_field');
            }
        }
        if (hasItem('bookends')) {
            let bonus = applyBookendsBonus(grid);
            if (bonus > 0) {
                totalWinnings += applyCoinDoubler(bonus);
                addLog(`–ö–Ω–∏–∂–Ω—ã–µ –ø–æ–¥–ø–æ—Ä–∫–∏: +${applyCoinDoubler(bonus)}üí≤`, 'win');
                animateInventoryItem('bookends');
            }
        }
        if (hasItem('minimalist') && totalWinnings > 0) {
            let bonus = getEmptySlotBonus();
             if (bonus > 0) {
                totalWinnings += applyCoinDoubler(bonus);
                addLog(`–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç: +${applyCoinDoubler(bonus)}üí≤ –∑–∞ –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã.`, 'win');
                animateInventoryItem('minimalist');
            }
        }
        
        // --- –û–±—â–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –≤—ã–∏–≥—Ä—ã—à–∞ ---
        // [NEW] –õ–æ–≥–∏–∫–∞ 'oddly_lucky'
        if (hasItem('oddly_lucky') && state.turn % 2 !== 0 && totalWinnings > 0) {
             const multiplier = ALL_ITEMS.find(i => i.id === 'oddly_lucky').effect.odd_round_multiplier;
             const bonus = Math.floor(totalWinnings * (multiplier - 1));
             totalWinnings += bonus;
             addLog(`–°—Ç—Ä–∞–Ω–Ω–∞—è —É–¥–∞—á–∞: +${Math.round((multiplier - 1) * 100)}% –±–æ–Ω—É—Å! (+${formatNumberWithComma(bonus)}üí≤)`, 'win');
             animateInventoryItem('oddly_lucky');
        }

        // [NEW] –õ–æ–≥–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è –≤—ã–∏–≥—Ä—ã—à–∞ –æ—Ç luck_chance –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        if (state.tempWinMultiplier && state.tempWinMultiplier > 1 && totalWinnings > 0) {
            const bonus = Math.floor(totalWinnings * (state.tempWinMultiplier - 1));
            totalWinnings += bonus;
            addLog(`–í—Ä–µ–º–µ–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å x${state.tempWinMultiplier}: +${formatNumberWithComma(bonus)}üí≤`, 'win');
            state.tempWinMultiplier = 1; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        }

        const finalMultiplierItem = state.inventory.find(item => item.effect?.winMultiplier);
        if (finalMultiplierItem && totalWinnings > 0) {
            const finalMultiplier = finalMultiplierItem.effect.winMultiplier;
            const bonus = Math.floor(totalWinnings * (finalMultiplier - 1));
            totalWinnings += bonus;
            if(finalMultiplierItem.id === 'demon_contract') {
                addLog(`${finalMultiplierItem.name}: +${formatNumberWithComma(bonus)}üí≤`, 'win');
                animateInventoryItem(finalMultiplierItem.id);
            }
        }

        // [FIX] –õ–æ–≥–∏–∫–∞ 'last_chance'
        if (hasItem('last_chance') && state.spinsLeft === 0) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∞
            const lastChanceMultiplier = state.inventory.find(item => item.id === 'last_chance')?.effect?.on_last_spin_bonus?.multiplier || 3;
            if (totalWinnings > 0) {
                const bonus = totalWinnings * (lastChanceMultiplier - 1);
                totalWinnings += bonus;
                addLog(`–ü–æ—Å–ª–µ–¥–Ω–∏–π –®–∞–Ω—Å: x${lastChanceMultiplier} –∫ –≤—ã–∏–≥—Ä—ã—à—É! (+${formatNumberWithComma(bonus)}üí≤)`, 'win');
                animateInventoryItem('last_chance');
            }
        }

        // [NEW] –õ–æ–≥–∏–∫–∞ '–≠—Ö–æ-–ö–∞–º–µ–Ω—å'
        if (hasItem('echo_stone') && state.echoStoneMultiplier > 1 && totalWinnings > 0) {
            const multiplier = state.echoStoneMultiplier;
            const bonus = Math.floor(totalWinnings * (multiplier - 1));
            totalWinnings += bonus;
            addLog(`–≠—Ö–æ-–ö–∞–º–µ–Ω—å: –ú–Ω–æ–∂–∏—Ç–µ–ª—å x${multiplier}! (+${formatNumberWithComma(bonus)}üí≤)`, 'win');
            animateInventoryItem('echo_stone');
        }

        // --- –≠–§–§–ï–ö–¢: slot_machine_heart ---
        if (hasItem('slot_machine_heart') && typeof state.jackpotCellIndex === 'number') {
            const jackpotSymbol = ALL_ITEMS.find(i => i.id === 'slot_machine_heart').effect.jackpot_cell.symbol;
            const jackpotMultiplier = ALL_ITEMS.find(i => i.id === 'slot_machine_heart').effect.jackpot_cell.multiplier;
            if (state.grid[state.jackpotCellIndex]?.id === jackpotSymbol && totalWinnings > 0) {
                totalWinnings *= jackpotMultiplier;
                addLog(`–°–µ—Ä–¥—Ü–µ –∞–≤—Ç–æ–º–∞—Ç–∞: –í –¥–∂–µ–∫–ø–æ—Ç-—è—á–µ–π–∫–µ –≤—ã–ø–∞–ª 7Ô∏è‚É£! –í—ã–∏–≥—Ä—ã—à —É–º–Ω–æ–∂–µ–Ω –Ω–∞ 100!`, 'win');
                animateInventoryItem('slot_machine_heart');
            }
        }

        // --- –®–¢–†–ê–§ –û–¢ –ú–û–î–ò–§–ò–ö–ê–¢–û–†–ê "–ù–ï –ó–ê–ù–ò–ú–ê–ï–¢ –ú–ï–°–¢–û" ---
        const itemsWithWinPenalty = state.inventory.filter(item => 
            item.effect?.win_penalty || item.modifier?.effect?.win_penalty
        );
        if (itemsWithWinPenalty.length > 0 && totalWinnings > 0) {
            const totalPenalty = itemsWithWinPenalty.reduce((sum, item) => {
                return sum + (item.effect?.win_penalty || item.modifier?.effect?.win_penalty || 0);
            }, 0);
            if (totalPenalty > 0) {
                const penaltyAmount = Math.floor(totalWinnings * totalPenalty);
                totalWinnings -= penaltyAmount;
                addLog(`–®—Ç—Ä–∞—Ñ "–ù–µ –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ—Å—Ç–æ": -${penaltyAmount}üí≤ (${(totalPenalty * 100).toFixed(0)}%)`, 'loss');
            }
        }

        totalWinnings = Math.floor(totalWinnings);
        
        // --- –≠–§–§–ï–ö–¢: –î–∞—Ä –ú–∏–¥–∞—Å–∞ (luck_to_double_win) ---
        const midasItem = state.inventory.find(item => item.modifier && item.modifier.effect?.luck_to_double_win);
        if (midasItem && totalWinnings > 0) {
            // –£–¥–∞—á–∞ ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            let luck = getItemEffectValue('luck', 0, 'sum');
            // –®–∞–Ω—Å: min(luck * 2.5, 100)%
            let chance = Math.min(luck * 2.5, 100);
            if (Math.random() * 100 < chance) {
                totalWinnings *= 2;
                addLog(`‚ú® –î–∞—Ä –ú–∏–¥–∞—Å–∞! –£–¥–∞—á–∞: ${luck}, —à–∞–Ω—Å: ${chance}%. –í—ã–∏–≥—Ä—ã—à —É–¥–≤–æ–µ–Ω!`, 'win');
                animateInventoryItem(midasItem.id);
            }
        }

        // --- –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã–∏–≥—Ä—ã—à–∞ ---
        if (winningLinesInfo.length > 0) {
            const jackpotDelay = topCount === 15 ? 5500 : 0;
            
            if (winningLinesInfo.length > 1) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π
                setTimeout(() => {
                    animateWinningLinesSequentially(winningLinesInfo, () => {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–ø–∞–ø —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π
                        showTotalWinPopup(totalWinnings);
                    });
                }, jackpotDelay);
            } else {
                // –î–ª—è –æ–¥–Ω–æ–π –ª–∏–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –∞–Ω–∏–º–∞—Ü–∏—é
                setTimeout(() => {
                    highlightWinningCells(Array.from(allWinningPositions), totalWinnings, false, winningLinesInfo);
                    if (totalWinnings >= 50) {
                        setTimeout(() => showTotalWinPopup(totalWinnings), 2000);
                    }
                }, jackpotDelay);
            }
        }


        if (totalWinnings > 0) {
            state.coins += totalWinnings;
            state.flags.consecutiveLosses = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
            state.winStreak = (state.winStreak || 0) + 1; // [NEW] –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–µ—Ä–∏—é –ø–æ–±–µ–¥

            // [NEW] –õ–æ–≥–∏–∫–∞ 'hot_streak'
            if (hasItem('hot_streak') && state.winStreak > 1) {
                const bonus = ALL_ITEMS.find(i => i.id === 'hot_streak').effect.on_win_streak_bonus;
                const finalBonus = applyCoinDoubler(bonus);
                state.coins += finalBonus;
                addLog(`–ù–∞ –≤–æ–ª–Ω–µ —É—Å–ø–µ—Ö–∞ (x${state.winStreak}): +${finalBonus}üí≤`, 'win');
                animateInventoryItem('hot_streak');
            }
            

            // === GLASS CANNON ===
            const glassCannonIdx = state.inventory.findIndex(item => item.id === 'glass_cannon');
            if (glassCannonIdx !== -1) {
                const item = state.inventory[glassCannonIdx];
                if (Math.random() < 0.10) {
                    addLog('–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –ø—É—à–∫–∞ —Ç—Ä–µ—Å–Ω—É–ª–∞ –∏ —Ä–∞—Å—Å—ã–ø–∞–ª–∞—Å—å! üí•', 'loss');
                    animateInventoryItem('glass_cannon');
                    state.inventory.splice(glassCannonIdx, 1);
                }
            }
        } else { 
            addLog('–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ.');
            if (hasItem('scrap_metal')) {
                const lossBonus = getItemEffectValue('on_loss_bonus', 0);
                state.piggyBank += lossBonus * state.turn;
                addLog(`–ö–æ–ø–∏–ª–∫–∞ –≤–ø–∏—Ç–∞–ª–∞: +${lossBonus}üí≤. –í—Å–µ–≥–æ: ${state.piggyBank}üí≤`);
            }
            state.winStreak = 0; // [NEW] –°–±—Ä–æ—Å —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥
            // --- –ü–ê–°–°–ò–í–ö–ê: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—à–∏–±–∫–∞—Ö ---
            if (hasPassive('learning_from_mistakes')) {
                state.flags.consecutiveLosses++;
                if (state.flags.consecutiveLosses >= 4) {
                    state.permanentLuckBonus += 2;
                    addLog(`–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—à–∏–±–∫–∞—Ö: +2 –∫ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–π —É–¥–∞—á–µ!`, 'win');
                    state.flags.consecutiveLosses = 0;
                }
            }
            // === DEMON CONTRACT ===
            const demonItem = state.inventory.find(item => item.id === 'demon_contract');
            if (demonItem && state.bankBalance > 0) {
                const penalty = Math.floor(state.bankBalance * 0.05);
                if (penalty > 0) {
                    state.bankBalance -= penalty;
                    addLog('üòà –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å –î–µ–º–æ–Ω–æ–º: -5% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–Ω–∫–µ!', 'loss');
                    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –¥–ª—è –¥–µ–º–æ–Ω–∞
                    const el = document.querySelector(`#inventory-items [data-item-id='demon_contract'], #planning-inventory-items [data-item-id='demon_contract']`);
                    if (el) {
                        el.classList.remove('item-activated');
                        void el.offsetWidth;
                        el.classList.add('item-activated-loss');
                        setTimeout(() => {
                            el.classList.remove('item-activated-loss');
                        }, 800);
                    }
                }
            }
        }

        // --- 2.1. –ü–†–û–í–ï–†–ö–ê –°–ï–ö–†–ï–¢–ù–û–ì–û –°–ò–ú–í–û–õ–ê: –ü–ò–†–ê–¢–°–ö–ò–ô –§–õ–ê–ì ---
        for (const line of PAYLINES.filter(l => l.scannable && l.type === '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è')) {
            const symbolsOnLine = line.positions.map(pos => grid[pos]);
            let pirateStreak = 0;
            let pirateCells = [];
            for (let i = 0; i < symbolsOnLine.length; i++) {
                if (symbolsOnLine[i].id === 'pirate') {
                    pirateStreak++;
                    pirateCells.push(line.positions[i]);
                    // –ï—Å–ª–∏ –ø–æ–¥—Ä—è–¥ 3
                    if (pirateStreak === 3) {
                        const lost = Math.floor(state.coins * 0.6);
                        if (lost > 0) {
                            state.coins -= lost;
                            addLog('–ü—Ä–æ–∫–ª—è—Ç—å–µ! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —á–∞—Å—Ç—å –º–æ–Ω–µ—Ç.', 'loss');
                        }
                        highlightCurseCells(pirateCells.slice(-3), 3, lost);
                        pirateStreak = 0;
                        pirateCells = [];
                    }
                } else {
                    if (pirateStreak === 1) highlightCurseCells([line.positions[i-1]], 1, 0);
                    if (pirateStreak === 2) highlightCurseCells([line.positions[i-2], line.positions[i-1]], 2, 0);
                    pirateStreak = 0;
                    pirateCells = [];
                }
            }
            // –ï—Å–ª–∏ –ª–∏–Ω–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 1 –∏–ª–∏ 2 –ø–æ–¥—Ä—è–¥
            if (pirateStreak === 1) highlightCurseCells([line.positions[symbolsOnLine.length-1]], 1, 0);
            if (pirateStreak === 2) highlightCurseCells([line.positions[symbolsOnLine.length-2], line.positions[symbolsOnLine.length-1]], 2, 0);
        }

        // --- –≠–§–§–ï–ö–¢: luck_battery ---
        if (hasItem('luck_battery')) {
            state.luckBatteryCharge = state.luckBatteryCharge || 0;
            if (totalWinnings === 0) {
                state.luckBatteryCharge++;
                addLog(`–ë–∞—Ç–∞—Ä–µ—è —É–¥–∞—á–∏: +1 –∑–∞—Ä—è–¥ (—Ç–µ–∫—É—â–∏–π: ${state.luckBatteryCharge})`, 'win');
                animateInventoryItem('luck_battery');
            } else if (state.luckBatteryCharge > 0) {
                const multiplier = 1 + state.luckBatteryCharge;
                const bonus = totalWinnings * (multiplier - 1);
                totalWinnings *= multiplier;
                addLog(`–ë–∞—Ç–∞—Ä–µ—è —É–¥–∞—á–∏: –∑–∞—Ä—è–¥ x${multiplier}! (+${formatNumberWithComma(bonus)}üí≤)`, 'win');
                animateInventoryItem('luck_battery');
                state.luckBatteryCharge = 0;
            }
        }

        // --- –î–ª—è –ö–∞–º–Ω—è-—Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä–∞: –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–∏–º–≤–æ–ª –ø–µ—Ä–≤–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ —Ä—è–¥–∞ ---
        if (winningLinesInfo.length > 0) {
            state.lastWinningSymbol = winningLinesInfo[0].symbol;
        } else {
            state.lastWinningSymbol = undefined;
        }

        // --- –ë–æ–Ω—É—Å—ã on_win_bonus (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö–∞–º–µ–Ω—å-—Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä) ---
        state.inventory.forEach(item => {
          if (typeof item.on_win_bonus === 'function') {
            const bonus = item.on_win_bonus(state.grid, totalWinnings, state, winningLinesInfo);
            if (bonus > 0) {
              totalWinnings += bonus;
              addLog(`${item.name}: +${bonus}üí≤`, 'win');
              animateInventoryItem(item.id);
            }
          }
        });

        // --- –õ–û–ì–ò–ö–ê: –°–∏–º–±–∏–æ—Ç–∏—á–µ—Å–∫–∏–π –ü–∞—Ä–∞–∑–∏—Ç ---
        const symbioticParasite = state.inventory.find(item => item.effect?.symbiotic_luck);
        if (symbioticParasite) {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä–∞–∑–∏—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (state.symbioticParasiteLuck === undefined) {
                state.symbioticParasiteLuck = 0;
            }
            
            if (totalWinnings > 0) {
                // –í—ã–∏–≥—Ä—ã—à: +1 –∫ —É–¥–∞—á–µ
                state.symbioticParasiteLuck++;
                state.luck++;
                addLog(`ü¶† –°–∏–º–±–∏–æ—Ç–∏—á–µ—Å–∫–∏–π –ü–∞—Ä–∞–∑–∏—Ç: +1 –∫ —É–¥–∞—á–µ –∑–∞ –≤—ã–∏–≥—Ä—ã—à (–Ω–∞–∫–æ–ø–ª–µ–Ω–æ: +${state.symbioticParasiteLuck})`, 'win');
                animateInventoryItem(symbioticParasite.id);
            } else {
                // –ü—Ä–æ–∏–≥—Ä—ã—à: -1 –∫ —É–¥–∞—á–µ
                state.symbioticParasiteLuck--;
                state.luck--;
                addLog(`ü¶† –°–∏–º–±–∏–æ—Ç–∏—á–µ—Å–∫–∏–π –ü–∞—Ä–∞–∑–∏—Ç: -1 –∫ —É–¥–∞—á–µ –∑–∞ –ø—Ä–æ–∏–≥—Ä—ã—à (–Ω–∞–∫–æ–ø–ª–µ–Ω–æ: +${state.symbioticParasiteLuck})`, 'loss');
                animateInventoryItem(symbioticParasite.id);
            }
        }
    }

    function highlightWinningCells(positions, winAmount, isCombo = false, winningLines = []) {
        const cells = ui.slotMachine.querySelectorAll('.slot-cell');
        let highlightClass = 'highlight';
        
        if (winAmount > 50) highlightClass = 'highlight-huge';
        else if (winAmount > 20) highlightClass = 'highlight-big';

        const isJackpot = positions.length === 15;

        let comboLevel;
        if (isCombo) {
            if (winningLines.length >= 9) comboLevel = 5;
            else if (winningLines.length >= 7) comboLevel = 4;
            else if (winningLines.length >= 5) comboLevel = 3;
            else if (winningLines.length >= 3) comboLevel = 2;
            else comboLevel = 1;
        } else {
            comboLevel = 0;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è
        const hasMirrorDimension = hasItem('mirror_dimension');
        const mirrorPositions = [];
        if (hasMirrorDimension) {
            // –ù–∞—Ö–æ–¥–∏–º –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –≤ –ø–æ–∑–∏—Ü–∏—è—Ö
            for (let i = 0; i < positions.length; i++) {
                const pos = positions[i];
                let mirrorPos;
                if (pos < 5) {
                    mirrorPos = 10 + (pos % 5);
                } else if (pos < 10) {
                    mirrorPos = 5 + (4 - (pos % 5));
                } else {
                    mirrorPos = pos % 5;
                }
                if (positions.includes(mirrorPos) && mirrorPos !== pos) {
                    mirrorPositions.push(pos, mirrorPos);
                }
            }
        }
        
        if (comboLevel > 0) {
            ui.slotMachine.classList.add('combo-active');
            if (isJackpot) ui.slotMachine.classList.add('jackpot');
            
            const sequenceTime = positions.length * 150;
            const holdTime = 2500;

            positions.forEach((pos, index) => {
                setTimeout(() => {
                    const cell = cells[pos];
                    if (cell) {
                        cell.classList.add('sequential-highlight');
                        if (isJackpot) cell.classList.add('jackpot');
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É –¥–ª—è –∑–µ—Ä–∫–∞–ª—å–Ω—ã—Ö –æ—Ç—Ä–∞–∂–µ–Ω–∏–π
                        if (mirrorPositions.includes(pos)) {
                            cell.classList.add('mirror-highlight');
                        }
                        
                        if (comboLevel >= 3) {
                            for (let i = 0; i < 3; i++) {
                                const particle = document.createElement('div');
                                particle.className = 'particle' + (isJackpot ? ' jackpot' : '');
                                cell.appendChild(particle);
                                setTimeout(() => particle.remove(), 500);
                            }
                        }

                        if (comboLevel >= 4) {
                            const coinCount = isJackpot ? (comboLevel === 5 ? 12 : 8) : (comboLevel === 5 ? 8 : 5);
                            const cellRect = cell.getBoundingClientRect();
                            const cellCenterX = cellRect.left + cellRect.width / 2;
                            const cellCenterY = cellRect.top + cellRect.height / 2;
                            for (let i = 0; i < coinCount; i++) {
                                setTimeout(() => {
                                    const coin = document.createElement('div');
                                    coin.className = 'flying-coin' + (isJackpot ? ' jackpot' : '');
                                    coin.textContent = 'üí≤';
                                    coin.style.position = 'fixed';
                                    coin.style.left = (cellCenterX - 16) + 'px';
                                    coin.style.top = (cellCenterY - 16) + 'px';
                                    coin.style.width = '32px';
                                    coin.style.height = '32px';
                                    coin.style.fontSize = '2em';
                                    coin.style.pointerEvents = 'none';
                                    coin.style.zIndex = 9999;
                                    document.body.appendChild(coin);
                                    const angle = (-70 + Math.random() * 140) * (Math.PI / 180);
                                    const radius = 80 + Math.random() * 40;
                                    const dx = Math.sin(angle) * radius;
                                    const dy = -Math.cos(angle) * radius;
                                    coin.animate([
                                        { transform: 'translate(0,0) scale(1)', opacity: 1 },
                                        { transform: `translate(${dx}px,${dy}px) scale(1.1)`, opacity: 1 }
                                    ], {
                                        duration: 350,
                                        easing: 'cubic-bezier(0.5,0,0.7,1)'
                                    });
                                    setTimeout(() => {
                                        coin.animate([
                                            { transform: `translate(${dx}px,${dy}px) scale(1.1)`, opacity: 1 },
                                            { transform: `translate(${dx}px,${dy+180+Math.random()*40}px) scale(0.9)`, opacity: 0 }
                                        ], {
                                            duration: 600,
                                            easing: 'cubic-bezier(0.3,0.7,0.7,1)'
                                        });
                                        setTimeout(() => coin.remove(), 600);
                                    }, 350);
                                }, i * 100);
                            }
                        }

                        setTimeout(() => {
                            cell.classList.remove('sequential-highlight');
                            cell.classList.add(`combo-${comboLevel}`, 'sequential');
                            if (isJackpot) cell.classList.add('jackpot');
                            
                            const symbol = cell.querySelector('.symbol');
                            if (symbol) {
                                symbol.classList.add('winning');
                                if (isJackpot) symbol.classList.add('jackpot');
                            }
                        }, 500);
                    }
                }, index * 150);
            });

            setTimeout(() => {
                const comboText = document.createElement('div');
                comboText.className = 'combo-text';
                comboText.textContent = `–ö–û–ú–ë–û x${winningLines.length}!`;
                document.body.appendChild(comboText);
                
                setTimeout(() => comboText.classList.add('show'), 100);
                
                setTimeout(() => {
                    comboText.classList.remove('show');
                    comboText.classList.add('fade-out');
                    setTimeout(() => comboText.remove(), 500);
                }, 1500);
            }, sequenceTime);

            setTimeout(() => {
                cells.forEach(cell => {
                    cell.classList.remove('highlight', 'highlight-big', 'highlight-huge');
                    cell.classList.remove('combo-1', 'combo-2', 'combo-3', 'combo-4', 'combo-5', 'sequential');
                    cell.classList.remove('sequential-highlight', 'mirror-highlight');
                    const symbol = cell.querySelector('.symbol');
                    if (symbol) {
                        symbol.classList.remove('winning');
                    }
                });
                ui.slotMachine.classList.remove('combo-active');
            }, sequenceTime + holdTime);

        } else {
            positions.forEach(pos => {
                const cell = cells[pos];
                if (cell) {
                    cell.classList.add(highlightClass);
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É –¥–ª—è –∑–µ—Ä–∫–∞–ª—å–Ω—ã—Ö –æ—Ç—Ä–∞–∂–µ–Ω–∏–π
                    if (mirrorPositions.includes(pos)) {
                        cell.classList.add('mirror-highlight');
                    }
                }
            });
            
            setTimeout(() => {
                cells.forEach(cell => {
                    cell.classList.remove('highlight', 'highlight-big', 'highlight-huge', 'mirror-highlight');
                });
            }, 2000);
        }
    }

    function animateWinningLinesSequentially(winningLinesInfo, onComplete = null) {
        if (!winningLinesInfo || winningLinesInfo.length === 0) {
            if (onComplete) onComplete();
            return;
        }
        
        const cells = ui.slotMachine.querySelectorAll('.slot-cell');
        let currentLineIndex = 0;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∏–Ω–∏–π
        const baseDelay = 100; // –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏
        const baseLineDelay = 950; // –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–∏–Ω–∏—è–º–∏
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π –ª–∏–Ω–∏–∏
        function getSpeedForLine(lineIndex) {
            // –ß–µ–º –¥–∞–ª—å—à–µ –ª–∏–Ω–∏—è, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –∞–Ω–∏–º–∞—Ü–∏—è
            const speedMultiplier = Math.max(0.3, 1 - lineIndex * 0.12);
            return {
                cellDelay: Math.floor(baseDelay * speedMultiplier),
                lineDelay: Math.floor(baseLineDelay * speedMultiplier)
            };
        }
        
        function animateNextLine() {
            if (currentLineIndex >= winningLinesInfo.length) {
                // –í—Å–µ –ª–∏–Ω–∏–∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω—ã, —Ç–µ–ø–µ—Ä—å –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—Å–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Å–ª–æ—Ç—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                const allWinningPositions = new Set();
                winningLinesInfo.forEach(line => {
                    line.positions.forEach(pos => allWinningPositions.add(pos));
                });
                
                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—Å–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Å–ª–æ—Ç—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                allWinningPositions.forEach(pos => {
                    const cell = cells[pos];
                    if (cell) {
                        cell.classList.add('line-highlight');
                        const symbol = cell.querySelector('.symbol');
                        if (symbol) {
                            symbol.classList.add('line-winning');
                        }
                    }
                });
                
                // –û—á–∏—â–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏ –≤—ã–∑—ã–≤–∞–µ–º callback
                setTimeout(() => {
                    cells.forEach(cell => {
                        cell.classList.remove('line-highlight', 'line-highlight-sequential');
                        const symbol = cell.querySelector('.symbol');
                        if (symbol) {
                            symbol.classList.remove('line-winning');
                        }
                    });
                    
                    // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–ø–∞–ø–∞
                    if (onComplete) {
                        setTimeout(onComplete, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –ø–æ–ø–∞–ø–æ–º
                    }
                }, 2000);
                return;
            }
            
            const lineInfo = winningLinesInfo[currentLineIndex];
            const positions = lineInfo.positions;
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–∏–Ω–∏–∏
            const { cellDelay, lineDelay } = getSpeedForLine(currentLineIndex);
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
            cells.forEach(cell => {
                cell.classList.remove('line-highlight', 'line-highlight-sequential');
                const symbol = cell.querySelector('.symbol');
                if (symbol) {
                    symbol.classList.remove('line-winning');
                }
            });
            
            // –ê–Ω–∏–º–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –ª–∏–Ω–∏—é
            positions.forEach((pos, index) => {
                setTimeout(() => {
                    const cell = cells[pos];
                    if (cell) {
                        cell.classList.add('line-highlight-sequential');
                        const symbol = cell.querySelector('.symbol');
                        if (symbol) {
                            symbol.classList.add('line-winning');
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ç—Ä—è—Å–∫–∏ –¥–ª—è —è—á–µ–π–∫–∏
                        cell.style.animation = 'lineSequentialShake 0.3s ease-out';
                        setTimeout(() => {
                            cell.style.animation = '';
                        }, 300);
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å —Å–ª—É—á–∞–π–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
                        for (let i = 0; i < 3; i++) {
                            const particle = document.createElement('div');
                            particle.className = 'line-particle';
                            
                            // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–∏—Ü—ã
                            const angle = Math.random() * 360;
                            const distance = 15 + Math.random() * 10;
                            const x = Math.cos(angle * Math.PI / 180) * distance;
                            const y = Math.sin(angle * Math.PI / 180) * distance;
                            
                            particle.style.setProperty('--x', x / 20);
                            particle.style.setProperty('--y', y / 20);
                            
                            cell.appendChild(particle);
                            setTimeout(() => particle.remove(), 400);
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è —Å–∏–º–≤–æ–ª–∞
                        if (symbol) {
                            symbol.style.animation = 'lineSymbolWobble 0.4s ease-out';
                            setTimeout(() => {
                                symbol.style.animation = '';
                            }, 400);
                        }
                    }
                }, index * cellDelay);
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–Ω–∏–∏
            setTimeout(() => {
                const linePopup = document.createElement('div');
                linePopup.className = 'line-popup';
                linePopup.innerHTML = `
                    <div class="line-popup-content">
                        <div class="line-name">${lineInfo.name}</div>
                        <div class="line-win">+${formatNumberWithComma(lineInfo.win)}üí≤</div>
                    </div>
                `;
                // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ø-–∞–ø –≤–Ω—É—Ç—Ä—å —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
                ui.slotMachine.appendChild(linePopup);

                // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ø-–∞–ø –ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
                linePopup.style.position = 'absolute';
                linePopup.style.left = '50%';
                linePopup.style.top = '50%';
                linePopup.style.transform = 'translate(-50%, -50%)'; // —Å—Ç—Ä–æ–≥–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                linePopup.style.zIndex = 30;
                
                setTimeout(() => linePopup.classList.add('show'), 50);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ç—Ä—è—Å–∫–∏ –¥–ª—è –ø–æ–ø–∞–ø–∞
                setTimeout(() => {
                    linePopup.style.animation = 'linePopupShake 0.3s ease-out';
                    setTimeout(() => {
                        linePopup.style.animation = '';
                    }, 300);
                }, 200);
                
                setTimeout(() => {
                    linePopup.classList.remove('show');
                    linePopup.classList.add('fade-out');
                    setTimeout(() => linePopup.remove(), 300);
                }, 1500);
            }, positions.length * cellDelay + 200);
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ª–∏–Ω–∏–∏
            setTimeout(() => {
                currentLineIndex++;
                animateNextLine();
            }, positions.length * cellDelay + lineDelay);
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        animateNextLine();
    }

    function highlightCurseCells(pirateCells, pirateCount, lostAmount) {
        const cells = ui.slotMachine.querySelectorAll('.slot-cell');
        pirateCells.forEach((pos, idx) => {
            let className = 'pirate-1';
            if (pirateCount === 2) className = 'pirate-2';
            if (pirateCount >= 3) className = 'pirate-3';
            cells[pos]?.classList.add(className);
        });
        if (pirateCount >= 3 && lostAmount > 0) {
            // –ü–æ–ø–∞–ø
            const popup = document.createElement('div');
            popup.className = 'curse-loss-popup';
            popup.innerHTML = `
                <div class="curse-title">–ü–†–û–ö–õ–Ø–¢–¨–ï!</div>
                <div class="curse-hint">–¢—Ä–∏ –ø–∏—Ä–∞—Ç—Å–∫–∏—Ö —Ñ–ª–∞–≥–∞! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ ${formatNumberWithComma(lostAmount)} –º–æ–Ω–µ—Ç.</div>
                <div class="curse-flags">üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è</div>
            `;
            document.body.appendChild(popup);
            setTimeout(() => {
                popup.classList.add('show');
                setTimeout(() => {
                    popup.classList.remove('show');
                    popup.classList.add('fade-out');
                    setTimeout(() => popup.remove(), 1000);
                }, 2500);
            }, 100);
        }
        setTimeout(() => {
            pirateCells.forEach(pos => {
                cells[pos]?.classList.remove('pirate-1', 'pirate-2', 'pirate-3');
            });
        }, 2200);
    }

    function populateShop() {
        state.shop = [];
        
        const availableItems = [...ALL_ITEMS].filter(item => !hasItem(item.id));
        const commons = availableItems.filter(i => i.rarity === 'common');
        const rares = availableItems.filter(i => i.rarity === 'rare');
        const legendaries = availableItems.filter(i => i.rarity === 'legendary');

        if (hasItem('cherry_value_engine') && Math.random() < 0.35) {
            const alreadyInShop = state.shop.some(item => item.id === 'cherry_value_boost_token');
            if (!alreadyInShop) {
                state.shop.push(window.ALL_ITEMS.find(item => item.id === 'cherry_value_boost_token'));
            }
        }

        // --- –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–¥–∫–∏–π –∞–º—É–ª–µ—Ç –≤ –ø–µ—Ä–≤–æ–º –º–∞–≥–∞–∑–∏–Ω–µ 3-–≥–æ —Ü–∏–∫–ª–∞ ---
        if (state.run === 3 && state.turn === 1 && rares.length > 0) {
            const randomIndex = Math.floor(Math.random() * rares.length);
            const rareItem = { ...rares[randomIndex] };
            rareItem.cost = Math.max(1, Math.floor(rareItem.cost / 2));
            // –°–±—Ä–æ—Å uses –¥–ª—è breakable –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            if (rareItem.effect && rareItem.effect.luck_chance && rareItem.effect.luck_chance.breakable) {
                rareItem.uses = (rareItem.effect.luck_chance.max_uses || 1) + getBreakableUsesBoost();
            }
            if (rareItem.effect && rareItem.effect.breakable && !rareItem.effect.luck_chance) {
                rareItem.uses = (rareItem.effect.max_uses || 10) + getBreakableUsesBoost();
            }
            // [NEW] –°–±—Ä–æ—Å uses –¥–ª—è wild_clover_next_spin.breakable
            if (rareItem.effect && rareItem.effect.wild_clover_next_spin && rareItem.effect.wild_clover_next_spin.breakable) {
                rareItem.uses = (rareItem.effect.wild_clover_next_spin.max_uses || 1) + getBreakableUsesBoost();
            }
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            const modifiedRareItem = addRandomModifier(rareItem);
            if (modifiedRareItem.modifier) {
                addLog(`‚ú® –†–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º: ${modifiedRareItem.name}`, 'win');
            }
            state.shop.push(modifiedRareItem);
            const idx = availableItems.findIndex(x => x.id === rareItem.id);
            if (idx !== -1) availableItems.splice(idx, 1);
            rares.splice(randomIndex, 1);
        }

        // --- –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∞–º—É–ª–µ—Ç –≤ –ø–µ—Ä–≤–æ–º –º–∞–≥–∞–∑–∏–Ω–µ 4-–≥–æ —Ü–∏–∫–ª–∞ (–µ—Å–ª–∏ 20+ —Ç–∞–ª–æ–Ω–æ–≤) ---
        if (state.run === 4 && state.turn === 1 && state.tickets >= 20 && legendaries.length > 0) {
            const randomIndex = Math.floor(Math.random() * legendaries.length);
            const legendaryItem = { ...legendaries[randomIndex] };
            // –°–±—Ä–æ—Å uses –¥–ª—è breakable –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            if (legendaryItem.effect && legendaryItem.effect.luck_chance && legendaryItem.effect.luck_chance.breakable) {
                legendaryItem.uses = (legendaryItem.effect.luck_chance.max_uses || 1) + getBreakableUsesBoost();
            }
            if (legendaryItem.effect && legendaryItem.effect.breakable && !legendaryItem.effect.luck_chance) {
                legendaryItem.uses = (legendaryItem.effect.max_uses || 10) + getBreakableUsesBoost();
            }
            // [NEW] –°–±—Ä–æ—Å uses –¥–ª—è wild_clover_next_spin.breakable
            if (legendaryItem.effect && legendaryItem.effect.wild_clover_next_spin && legendaryItem.effect.wild_clover_next_spin.breakable) {
                legendaryItem.uses = (legendaryItem.effect.wild_clover_next_spin.max_uses || 1) + getBreakableUsesBoost();
            }
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            const modifiedLegendaryItem = addRandomModifier(legendaryItem);
            if (modifiedLegendaryItem.modifier) {
                addLog(`‚ú® –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º: ${modifiedLegendaryItem.name}`, 'win');
            }
            state.shop.push(modifiedLegendaryItem);
            addLog(`üèÜ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —É–¥–∞—á–∞! –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ—è–≤–∏–ª—Å—è ${modifiedLegendaryItem.name} (—É –≤–∞—Å ${state.tickets}üéüÔ∏è)!`, 'win');
            const idx = availableItems.findIndex(x => x.id === legendaryItem.id);
            if (idx !== -1) availableItems.splice(idx, 1);
            legendaries.splice(randomIndex, 1);
        }

        for (let i = state.shop.length; i < 5; i++) {
            let pool = [];
            const roll = Math.random();
            if (roll < 0.6 && commons.length > 0) pool = commons;
            else if (roll < 0.9 && rares.length > 0) pool = rares;
            else if (legendaries.length > 0) pool = legendaries;
            else if (commons.length > 0) pool = commons;
            else if (rares.length > 0) pool = rares;
            else if (legendaries.length > 0) pool = legendaries;
            if (pool.length > 0) {
                const randomIndex = Math.floor(Math.random() * pool.length);
                const item = pool[randomIndex];
                // –°–±—Ä–æ—Å uses –¥–ª—è breakable –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                if (item.effect && item.effect.luck_chance && item.effect.luck_chance.breakable) {
                    item.uses = (item.effect.luck_chance.max_uses || 1) + getBreakableUsesBoost();
                }
                if (item.effect && item.effect.breakable && !item.effect.luck_chance) {
                    item.uses = (item.effect.max_uses || 10) + getBreakableUsesBoost();
                }
                // [NEW] –°–±—Ä–æ—Å uses –¥–ª—è wild_clover_next_spin.breakable
                if (item.effect && item.effect.wild_clover_next_spin && item.effect.wild_clover_next_spin.breakable) {
                    item.uses = (item.effect.wild_clover_next_spin.max_uses || 1) + getBreakableUsesBoost();
                }
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                const modifiedItem = addRandomModifier(item);
                if (modifiedItem.modifier) {
                    addLog(`‚ú® –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ—è–≤–∏–ª—Å—è –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: ${modifiedItem.name}`, 'win');
                }
                state.shop.push(modifiedItem);
                const idx = availableItems.findIndex(x => x.id === item.id);
                if (idx !== -1) availableItems.splice(idx, 1);
                if (pool === commons) commons.splice(commons.indexOf(item), 1);
                if (pool === rares) rares.splice(rares.indexOf(item), 1);
                if (pool === legendaries) legendaries.splice(legendaries.indexOf(item), 1);
            }
        }
        
        // --- –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ü–ê–°–°–ò–í–ö–ò "–ú–ê–°–¢–ï–† –ú–û–î–ò–§–ò–ö–ê–¶–ò–ô" –ö –ù–û–í–´–ú –ü–†–ï–î–ú–ï–¢–ê–ú ---
        if (hasPassive('modification_master')) {
            let updatedCount = 0;
            state.shop.forEach(item => {
                if (item.modifier) {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (—É–±–∏—Ä–∞–µ–º —à—Ç—Ä–∞—Ñ +20%)
                    const originalCost = Math.ceil(item.cost / 1.2);
                    if (item.cost !== originalCost) {
                        item.cost = originalCost;
                        updatedCount++;
                    }
                }
            });
            
            if (updatedCount > 0) {
                addLog(`‚ö° –ú–∞—Å—Ç–µ—Ä –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: ${updatedCount} –Ω–æ–≤—ã—Ö –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±–µ–∑ —à—Ç—Ä–∞—Ñ–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏!`, 'win');
            }
        }
    }
    
    function animateSpinsCounter(oldValue, newValue) {
        const counter = ui.spinsLeft;
        const counterRect = counter.getBoundingClientRect();
        const counterWrapper = document.createElement('div');
        counterWrapper.className = 'spins-counter';
        counterWrapper.style.height = `${counterRect.height}px`;
        
        const oldSpan = document.createElement('span');
        oldSpan.className = 'old-value';
        oldSpan.textContent = oldValue;
        
        const newSpan = document.createElement('span');
        newSpan.className = 'new-value';
        newSpan.textContent = newValue;
        
        counterWrapper.appendChild(oldSpan);
        counterWrapper.appendChild(newSpan);
        
        counter.textContent = '';
        counter.appendChild(counterWrapper);
        
        setTimeout(() => {
            counter.textContent = newValue;
        }, 400);
    }

    function showLuckChancePopups(triggeredItems) {
        if (!triggeredItems || triggeredItems.length === 0) return;
        
        let idx = 0;
        
        function showNext() {
            const item = triggeredItems[idx];
            
            // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–ø-–∞–ø–∞
            const popup = document.createElement('div');
            popup.className = 'luck-chance-popup';
            
            // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ø-–∞–ø–∞
            popup.innerHTML = `
                <div class="luck-chance-content">
                    <div class="luck-chance-icon">
                        <svg viewBox="0 0 100 100" width="80" height="80" class="luck-chance-svg">
                            <rect x="10" y="10" width="80" height="80" fill="#1a1a1a" stroke="#fffbe6" stroke-width="3"/>
                            <text x="50" y="55" text-anchor="middle" font-size="20" fill="white" font-weight="bold">${item.thumbnail}</text>
                        </svg>
                    </div>
                    <div class="luck-chance-info">
                        <div class="luck-chance-name">${item.name}</div>
                        <div class="luck-chance-effect">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</div>
                    </div>
                    <div class="luck-chance-particles"></div>
                </div>
            `;
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–ø-–∞–ø –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞
            popup.style.position = 'fixed';
            popup.style.top = '50%';
            popup.style.left = '50%';
            popup.style.transform = 'translate(-50%, -50%) scale(0)';
            popup.style.zIndex = '3000';
            
            document.body.appendChild(popup);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            setTimeout(() => {
                popup.style.transform = 'translate(-50%, -50%) scale(1)';
                popup.classList.add('show');
                
                // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
                createLuckParticles(popup.querySelector('.luck-chance-particles'));
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
                setTimeout(() => {
                    popup.classList.add('fade-out');
                    setTimeout(() => {
                        popup.remove();
                        idx++;
                        if (idx < triggeredItems.length) {
                            setTimeout(showNext, 200); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø-–∞–ø–∞–º–∏
                        }
                    }, 600);
                }, 2500);
            }, 100);
        }
        
        function createLuckParticles(container) {
            for (let i = 0; i < 12; i++) {
                const particle = document.createElement('div');
                particle.className = 'luck-particle';
                particle.style.setProperty('--angle', `${(i * 30)}deg`);
                particle.style.setProperty('--delay', `${i * 0.1}s`);
                container.appendChild(particle);
            }
        }
        
        showNext();
    }

    function processLuckChanceItems(state) {
        let chanceMultiplier = 1;
        state.inventory.forEach(item => {
            if (item.effect && item.effect.luck_chance_multiplier) {
                chanceMultiplier *= item.effect.luck_chance_multiplier;
                animateInventoryItem(item.id); // [NEW] –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —É—Å–∏–ª–∏—Ç–µ–ª—è
            }
        });

        let luckBonus = 0;
        let itemsToRemove = [];
        let triggeredItems = [];
        state.inventory.forEach((item, idx) => {
            if (item.effect && item.effect.luck_chance) {
                const eff = item.effect.luck_chance;
                let chance = eff.chance * chanceMultiplier;
                if (hasPassive('gamblers_delight') && item.id === 'doubloon') {
                    chance *= 2;
                }
                if (chance > 1) chance = 1;

                if (Math.random() < chance) {
                    animateInventoryItem(item.id); // [NEW] –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Å—Ä–∞–±–æ—Ç–∞–≤—à–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
                    if (eff.luck) {
                        luckBonus += eff.luck;
                        addLog(`${item.name}: +${eff.luck} –∫ —É–¥–∞—á–µ (—à–∞–Ω—Å ${(eff.chance*100).toFixed(1)}% x${chanceMultiplier.toFixed(1)} = ${(chance*100).toFixed(1)}%)!`, 'win');
                    }
                    if (eff.coins) {
                        const bonus = applyCoinDoubler(eff.coins);
                        state.coins += bonus;
                        addLog(`${item.name}: +${bonus}üí≤ (—à–∞–Ω—Å ${(eff.chance*100).toFixed(1)}% x${chanceMultiplier.toFixed(1)} = ${(chance*100).toFixed(1)}%)!`, 'win');
                    }
                    if (eff.tickets) {
                        state.tickets += eff.tickets;
                        addLog(`${item.name}: +${eff.tickets}üéüÔ∏è (—à–∞–Ω—Å ${(eff.chance*100).toFixed(1)}% x${chanceMultiplier.toFixed(1)} = ${(chance*100).toFixed(1)}%)!`, 'win');
                    }
                    if (eff.free_spins) {
                        state.spinsLeft += eff.free_spins;
                        addLog(`${item.name}: +${eff.free_spins} –ø—Ä–æ–∫—Ä—É—Ç(–æ–≤) (—à–∞–Ω—Å ${(eff.chance*100).toFixed(1)}% x${chanceMultiplier.toFixed(1)} = ${(chance*100).toFixed(1)}%)!`, 'win');
                    }
                    if (eff.interest_bonus) {
                        state.baseInterestRate += eff.interest_bonus;
                        addLog(`${item.name}: +${(eff.interest_bonus*100).toFixed(0)}% –∫ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–µ (—à–∞–Ω—Å ${(eff.chance*100).toFixed(1)}% x${chanceMultiplier.toFixed(1)} = ${(chance*100).toFixed(1)}%)!`, 'win');
                    }
                    if (eff.win_multiplier) {
                        // –í—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–∫—Ä—É—Ç–∞
                        if (!state.tempWinMultiplier) state.tempWinMultiplier = 1;
                        state.tempWinMultiplier *= eff.win_multiplier;
                        addLog(`${item.name}: x${eff.win_multiplier} –∫ –≤—ã–∏–≥—Ä—ã—à—É (—à–∞–Ω—Å ${(eff.chance*100).toFixed(1)}% x${chanceMultiplier.toFixed(1)} = ${(chance*100).toFixed(1)}%)!`, 'win');
                    }
                    if (item.id === 'doubloon') {
                        state.spinsLeft += 1;
                        addLog(`${item.name}: +1 –ø—Ä–æ–∫—Ä—É—Ç! (—à–∞–Ω—Å ${(eff.chance*100).toFixed(1)}% x${chanceMultiplier.toFixed(1)} = ${(chance*100).toFixed(1)}%)`, 'win');
                    }
                    triggeredItems.push(item); // –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —É–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–ø-–∞–ø
                    if (eff.breakable) {
                        if (item.uses === undefined) item.uses = (eff.max_uses || 1) + getBreakableUsesBoost();
                        item.uses--;
                        if (item.uses <= 0) {
                            addLog(`${item.name} —Å–ª–æ–º–∞–ª—Å—è!`, 'loss');
                            // --- [NEW] –ü–∞—Å—Å–∏–≤–∫–∞ –§–µ–Ω–∏–∫—Å ---
                            if (hasPassive('phoenix_passive')) {
                                state.luck += 5;
                                const bonus = 10 * (state.run || 1);
                                state.coins += bonus;
                                addLog('üî• –§–µ–Ω–∏–∫—Å: +5 –∫ —É–¥–∞—á–µ –∏ +' + bonus + 'üí≤ –∑–∞ –ø–æ–ª–æ–º–∫—É –ø—Ä–µ–¥–º–µ—Ç–∞!', 'win');
                            }
                            itemsToRemove.push(idx);
                        }
                    } else {
                        // --- –ü–ê–°–°–ò–í–ö–ê: –ü—Ä–µ–¥–≤–∫—É—à–µ–Ω–∏–µ ---
                        if (hasPassive('anticipation')) {
                            state.coins += 1;
                            addLog(`–ü—Ä–µ–¥–≤–∫—É—à–µ–Ω–∏–µ: +1üí≤ –∑–∞ –Ω–µ—Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–π —à–∞–Ω—Å "${item.name}".`, 'win');
                        }
                    }
                }
            }
        });
        for (let i = itemsToRemove.length - 1; i >= 0; i--) {
            const removed = state.inventory[itemsToRemove[i]];
            if (removed && removed.modifier && removed.modifier.divine && typeof window.releaseDivineModifier === 'function') {
                window.releaseDivineModifier(removed.modifier.id);
            }
            state.inventory.splice(itemsToRemove[i], 1);
        }
        if (luckBonus > 0) {
            state.tempLuck = (state.tempLuck || 0) + luckBonus;
        }
        if (triggeredItems.length > 0) {
            showLuckChancePopups(triggeredItems);
        }
    }

    async function spin() {
        if (state.spinsLeft <= 0 || state.gameover || state.isSpinning) return;
        
        // [NEW] Reset Echo Stone state for the new spin
        state.activatedItemsThisSpin = new Set();
        state.echoStoneMultiplier = 1;
        updateEchoStoneDisplay();

        state.isSpinning = true;
        ui.lever.classList.add('pulled');

        state.roundSpinsMade = (state.roundSpinsMade || 0) + 1; // [NEW] –°—á–µ—Ç—á–∏–∫ —Å–ø–∏–Ω–æ–≤ –∑–∞ —Ä–∞—É–Ω–¥
        state.totalSpinsMade = (state.totalSpinsMade || 0) + 1; // [NEW] –û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ —Å–ø–∏–Ω–æ–≤

        let freeSpin = false;
        if (hasItem('lucky_penny') && !state.firstSpinUsed) {
            freeSpin = true;
            state.firstSpinUsed = true;
            addLog('–°—á–∞—Å—Ç–ª–∏–≤–∞—è –º–æ–Ω–µ—Ç–∫–∞: –ø–µ—Ä–≤—ã–π –ø—Ä–æ–∫—Ä—É—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!', 'win');
            animateInventoryItem('lucky_penny'); // [NEW] –ê–Ω–∏–º–∞—Ü–∏—è
        }

        processLuckChanceItems(state);

        // --- –°–ë–û–ô –†–ï–ê–õ–¨–ù–û–°–¢–ò ---
        const glitchItem = state.inventory.find(item => item.effect?.reality_glitch);
        let glitchTriggered = false;
        if (glitchItem) {
            const chance = glitchItem.effect.reality_glitch.chance;
            if (Math.random() < chance) {
                glitchTriggered = true;
            }
        }

        const oldSpinsLeft = state.spinsLeft;
        if (!freeSpin) {
            state.spinsLeft--;
        }

        // [NEW] –õ–æ–≥–∏–∫–∞ 'hourglass'
        if(hasItem('hourglass') && state.totalSpinsMade > 0 && state.totalSpinsMade % 10 === 0) {
            const bonus = ALL_ITEMS.find(i => i.id === 'hourglass').effect.on_spin_count_bonus.spins;
            state.spinsLeft += bonus;
            addLog(`–ü–µ—Å–æ—á–Ω—ã–µ –ß–∞—Å—ã: +${bonus} –ø—Ä–æ–∫—Ä—É—Ç –∑–∞ –∫–∞–∂–¥—ã–µ 10 —Å–ø–∏–Ω–æ–≤.`, 'win');
            animateInventoryItem('hourglass');
        }

        // [NEW] –õ–æ–≥–∏–∫–∞ 'early_bird_spins'
        if(hasItem('early_bird_spins') && state.roundSpinsMade <= 3) {
            // –§–ª–∞–≥ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ calculateWinnings
            addLog(`–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞: —ç—Ç–æ—Ç –ø—Ä–æ–∫—Ä—É—Ç –ø–æ–ª—É—á–∏—Ç +1 –∫ –º–Ω–æ–∂–∏—Ç–µ–ª—é –≤—ã–∏–≥—Ä—ã—à–µ–π!`, 'win');
            animateInventoryItem('early_bird_spins');
        }

        animateSpinsCounter(oldSpinsLeft, state.spinsLeft);

        // --- –°–ë–û–ô –†–ï–ê–õ–¨–ù–û–°–¢–ò: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∏–≥—Ä—ã—à, –ø–æ—Ç–æ–º –¥–∂–µ–∫–ø–æ—Ç ---
        if (glitchTriggered) {
            // 1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—É—é —Å–µ—Ç–∫—É (—Ä–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω–µ—Ç –ª–∏–Ω–∏–π)
            const allSymbols = SYMBOLS;
            let badGrid = [];
            for (let i = 0; i < CONFIG.ROWS * CONFIG.COLS; i++) {
                badGrid.push(allSymbols[i % allSymbols.length]);
            }
            state.grid = badGrid;
            await runSpinAnimation();
            calculateWinnings();
            addLog('–°–±–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: –≥–ª–∏—á... —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫...', 'loss');
            // 2. –ß–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É —Ä–µ–∑–∫–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥–∂–µ–∫–ø–æ—Ç –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –¥–∂–µ–∫–ø–æ—Ç–∞
                const randomSymbol = SYMBOLS[Math.floor(Math.random() * SYMBOLS.length)];
                let jackpotGrid = Array(CONFIG.ROWS * CONFIG.COLS).fill(randomSymbol);
                state.grid = jackpotGrid;
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
                updateReels();
                calculateWinnings();
                addLog(`–°–±–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: –í–°–Å –û–î–ò–ù–ê–ö–û–í–û! –î–ñ–ï–ö–ü–û–¢ ${randomSymbol.graphic}!!!`, 'win');
                animateInventoryItem(glitchItem.id);
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º UI
                setTimeout(() => {
                    state.tempLuck = 0;
                    state.isSpinning = false;
                    ui.lever.classList.remove('pulled');
                    
                    // [NEW] –õ–æ–≥–∏–∫–∞ –¥–ª—è breakable –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±–µ–∑ luck_chance
                    let itemsToRemove = [];
                    state.inventory.forEach((item, idx) => {
                        if (item.effect?.breakable && !item.effect?.luck_chance) {
                            if (item.uses === undefined) item.uses = (item.effect.max_uses || 10) + getBreakableUsesBoost();
                            item.uses--;
                            if (item.uses <= 0) {
                                addLog(`${item.name} —Å–ª–æ–º–∞–ª—Å—è!`, 'loss');
                                
                                if (hasPassive('phoenix_passive')) {
                                    state.luck += 5;
                                    const bonus = 10 * (state.run || 1);
                                    state.coins += bonus;
                                    addLog('üî• –§–µ–Ω–∏–∫—Å: +5 –∫ —É–¥–∞—á–µ –∏ +' + bonus + 'üí≤ –∑–∞ –ø–æ–ª–æ–º–∫—É –ø—Ä–µ–¥–º–µ—Ç–∞!', 'win');
                                }
                                itemsToRemove.push(idx);
                            }
                        }
                    });
                    
                    // –£–¥–∞–ª—è–µ–º —Å–ª–æ–º–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
                    for (let i = itemsToRemove.length - 1; i >= 0; i--) {
                        const removed = state.inventory[itemsToRemove[i]];
                        if (removed && removed.modifier && removed.modifier.divine && typeof window.releaseDivineModifier === 'function') {
                            window.releaseDivineModifier(removed.modifier.id);
                        }
                        state.inventory.splice(itemsToRemove[i], 1);
                    }
                    
                    updateUI(); // –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–¥–µ—Å—å, –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π.
                }, 900); // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª–∏—Ç—Å—è 800ms, –±–µ—Ä–µ–º —Å –∑–∞–ø–∞—Å–æ–º.
            }, 1000);
            // –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ return, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –æ–±—ã—á–Ω—ã–π —Å–ø–∏–Ω
            return;
        }
        // --- –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Å–±–æ—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ ---

        // --- DEV –†–ï–ñ–ò–ú: 100% –ü–†–û–ò–ì–†–´–®–ù–´–ï –ü–†–û–ö–†–£–¢–´ ---
        if (state.dev100LoseMode) {
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π
            function hasWinningLines(grid) {
                let activePaylines = [...PAYLINES];
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                state.inventory.forEach(item => {
                    if (item.effect?.add_payline) { activePaylines.push(item.effect.add_payline); }
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ª–∏–Ω–∏—é
                for (const line of activePaylines) {
                    if (!line.scannable) continue;
                    
                    const symbolsOnLine = line.positions.map(pos => grid[pos]);
                    let i = 0;
                    
                    while (i < symbolsOnLine.length) {
                        let currentSymbol = symbolsOnLine[i];
                        let comboLength = 0;
                        
                        for (let j = i; j < symbolsOnLine.length; j++) {
                            if (symbolsOnLine[j].id === currentSymbol.id) {
                                comboLength++;
                            } else {
                                break;
                            }
                        }
                        
                        // –ï—Å–ª–∏ –µ—Å—Ç—å 3 –∏–ª–∏ –±–æ–ª—å—à–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—Ä—è–¥ - —ç—Ç–æ –≤—ã–∏–≥—Ä—ã—à
                        if (comboLength >= 3) {
                            return true;
                        }
                        
                        i += comboLength;
                    }
                }
                return false;
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—É—é —Å–µ—Ç–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            let badGrid = [];
            let attempts = 0;
            const maxAttempts = 100;
            
            do {
                badGrid = [];
                const allSymbols = SYMBOLS;
                
                // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –µ–≥–æ
                let shuffledSymbols = [...allSymbols];
                for (let i = shuffledSymbols.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [shuffledSymbols[i], shuffledSymbols[j]] = [shuffledSymbols[j], shuffledSymbols[i]];
                }
                
                // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ—Ç–∫—É –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
                for (let i = 0; i < CONFIG.ROWS * CONFIG.COLS; i++) {
                    badGrid.push(shuffledSymbols[i % shuffledSymbols.length]);
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –±–æ–ª—å—à–µ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
                for (let i = 0; i < 5; i++) {
                    const pos1 = Math.floor(Math.random() * badGrid.length);
                    const pos2 = Math.floor(Math.random() * badGrid.length);
                    [badGrid[pos1], badGrid[pos2]] = [badGrid[pos2], badGrid[pos1]];
                }
                
                attempts++;
            } while (hasWinningLines(badGrid) && attempts < maxAttempts);
            
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—É—é —Å–µ—Ç–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—É—é
            if (attempts >= maxAttempts) {
                badGrid = [];
                const symbols = SYMBOLS;
                // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å–æ—Å–µ–¥–Ω–∏—Ö
                for (let i = 0; i < CONFIG.ROWS * CONFIG.COLS; i++) {
                    const prevSymbol = i > 0 ? badGrid[i - 1] : null;
                    const aboveSymbol = i >= CONFIG.COLS ? badGrid[i - CONFIG.COLS] : null;
                    
                    let availableSymbols = symbols.filter(s => 
                        (!prevSymbol || s.id !== prevSymbol.id) && 
                        (!aboveSymbol || s.id !== aboveSymbol.id)
                    );
                    
                    if (availableSymbols.length === 0) {
                        availableSymbols = symbols;
                    }
                    
                    badGrid.push(availableSymbols[Math.floor(Math.random() * availableSymbols.length)]);
                }
            }
            
            state.grid = badGrid;
            await runSpinAnimation();
            calculateWinnings();
            addLog('Dev: 100% –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–π –ø—Ä–æ–∫—Ä—É—Ç', 'loss');
            
            setTimeout(() => {
                state.tempLuck = 0;
                state.isSpinning = false;
                ui.lever.classList.remove('pulled');
                
                // [NEW] –õ–æ–≥–∏–∫–∞ –¥–ª—è breakable –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±–µ–∑ luck_chance
                let itemsToRemove = [];
                state.inventory.forEach((item, idx) => {
                    if (item.effect?.breakable && !item.effect?.luck_chance) {
                        if (item.uses === undefined) item.uses = (item.effect.max_uses || 10) + getBreakableUsesBoost();
                        item.uses--;
                        if (item.uses <= 0) {
                            addLog(`${item.name} —Å–ª–æ–º–∞–ª—Å—è!`, 'loss');
                            // --- [NEW] –ü–∞—Å—Å–∏–≤–∫–∞ –§–µ–Ω–∏–∫—Å ---
                            if (hasPassive('phoenix_passive')) {
                                state.luck += 5;
                                const bonus = 10 * (state.run || 1);
                                state.coins += bonus;
                                addLog('üî• –§–µ–Ω–∏–∫—Å: +5 –∫ —É–¥–∞—á–µ –∏ +' + bonus + 'üí≤ –∑–∞ –ø–æ–ª–æ–º–∫—É –ø—Ä–µ–¥–º–µ—Ç–∞!', 'win');
                            }
                            itemsToRemove.push(idx);
                        }
                    }
                });
                
                // –£–¥–∞–ª—è–µ–º —Å–ª–æ–º–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
                for (let i = itemsToRemove.length - 1; i >= 0; i--) {
                    const removed = state.inventory[itemsToRemove[i]];
                    if (removed && removed.modifier && removed.modifier.divine && typeof window.releaseDivineModifier === 'function') {
                        window.releaseDivineModifier(removed.modifier.id);
                    }
                    state.inventory.splice(itemsToRemove[i], 1);
                }
                
                updateUI();
            }, 900);
            return;
        }
        // --- –∫–æ–Ω–µ—Ü dev —Ä–µ–∂–∏–º–∞ ---

        state.grid = generateGrid();
        await runSpinAnimation();
        calculateWinnings();

        // === [FIX] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏–Ω–∞ –¥–ª—è divine_recalculation ===
        if (!state._roundSpinResults) state._roundSpinResults = [];
        let lastWin = false;
        if (typeof state.lastWinningLines !== 'undefined') {
            lastWin = Array.isArray(state.lastWinningLines) && state.lastWinningLines.length > 0;
        }
        state._roundSpinResults.push(lastWin);

        setTimeout(() => {
            state.tempLuck = 0;
            state.isSpinning = false;
            ui.lever.classList.remove('pulled');
            
            // [NEW] –õ–æ–≥–∏–∫–∞ –¥–ª—è breakable –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±–µ–∑ luck_chance
            let itemsToRemove = [];
            state.inventory.forEach((item, idx) => {
                if (item.effect?.breakable && !item.effect?.luck_chance) {
                    if (item.uses === undefined) item.uses = (item.effect.max_uses || 10) + getBreakableUsesBoost();
                    item.uses--;
                    if (item.uses <= 0) {
                        addLog(`${item.name} —Å–ª–æ–º–∞–ª—Å—è!`, 'loss');
                        // --- [NEW] –ü–∞—Å—Å–∏–≤–∫–∞ –§–µ–Ω–∏–∫—Å ---
                        if (hasPassive('phoenix_passive')) {
                            state.luck += 5;
                            const bonus = 10 * (state.run || 1);
                            state.coins += bonus;
                            addLog('üî• –§–µ–Ω–∏–∫—Å: +5 –∫ —É–¥–∞—á–µ –∏ +' + bonus + 'üí≤ –∑–∞ –ø–æ–ª–æ–º–∫—É –ø—Ä–µ–¥–º–µ—Ç–∞!', 'win');
                        }
                        itemsToRemove.push(idx);
                    }
                }
            });
            
            // –£–¥–∞–ª—è–µ–º —Å–ª–æ–º–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            for (let i = itemsToRemove.length - 1; i >= 0; i--) {
                const removed = state.inventory[itemsToRemove[i]];
                if (removed && removed.modifier && removed.modifier.divine && typeof window.releaseDivineModifier === 'function') {
                    window.releaseDivineModifier(removed.modifier.id);
                }
                state.inventory.splice(itemsToRemove[i], 1);
            }
            
            updateUI(); // –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–¥–µ—Å—å, –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π.
        }, 900); // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª–∏—Ç—Å—è 800ms, –±–µ—Ä–µ–º —Å –∑–∞–ø–∞—Å–æ–º.
    }

    function updateSpinCosts() {
        const run = state.run;
        const bank = state.bankBalance;
        const debt = state.targetDebt;

        // 1. –©–∞–¥—è—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç —Ü–∏–∫–ª–∞
        const cycleMultiplier = run === 1 ? 1 : Math.pow(1.4, run - 1);

        // 2. –ü–†–û–ì–†–ï–°–°–ò–í–ù–´–ô "–ù–∞–ª–æ–≥ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ"
        let wealthTax = 0;
        if (run > 1) {
            if (bank > 100000) {
                wealthTax = Math.floor(bank / 80);
            } else if (bank > 20000) {
                wealthTax = Math.floor(bank / 120);
            } else if (bank > 5000) {
                wealthTax = Math.floor(bank / 180);
            } else if (bank > 1000) {
                wealthTax = Math.floor(bank / 250);
            }
        }
        // –ù–æ–≤—ã–π –Ω–∞–ª–æ–≥ –æ—Ç –¥–æ–ª–≥–∞ (—â–∞–¥—è—â–∏–π)
        const debtTax = run === 1 ? 0 : Math.floor(debt / 10);

        // --- –†–ê–°–ß–ï–¢ –ò–¢–û–ì–û–í–û–ô –°–¢–û–ò–ú–û–°–¢–ò ---
        // –ü–∞–∫–µ—Ç 1 (7 –ø—Ä–æ–∫—Ä—É—Ç–æ–≤)
        let baseCost1 = Math.floor(CONFIG.SPIN_PACKAGE_1.base_cost * cycleMultiplier);
        let finalCost1 = baseCost1 + wealthTax + debtTax;
        if (hasPassive('bulk_buyer')) {
            baseCost1 = Math.max(1, baseCost1 - 2);
            finalCost1 = baseCost1 + wealthTax + debtTax;
        }
        CONFIG.SPIN_PACKAGE_1.cost = finalCost1;

        // –ü–∞–∫–µ—Ç 2 (3 –ø—Ä–æ–∫—Ä—É—Ç–∞)
        let baseCost2 = Math.floor(CONFIG.SPIN_PACKAGE_2.base_cost * cycleMultiplier);
        let finalCost2 = baseCost2 + wealthTax + debtTax;
        if (hasPassive('bulk_buyer')) {
            baseCost2 = Math.max(1, baseCost2 - 2);
            finalCost2 = baseCost2 + wealthTax + debtTax;
        }
        CONFIG.SPIN_PACKAGE_2.cost = finalCost2;

        // –û–±–Ω–æ–≤–ª—è–µ–º UI –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        if (!ui.spinPurchaseModal.classList.contains('hidden')) {
            ui.purchaseModalCoins.textContent = `${formatNumberWithComma(state.coins)}üí≤`;
            ui.btnBuySpins7.textContent = `7 –ø—Ä–æ–∫—Ä—É—Ç–æ–≤ + 1üéüÔ∏è (${formatNumberWithComma(CONFIG.SPIN_PACKAGE_1.cost)}üí≤)`;
            ui.btnBuySpins3.textContent = `3 –ø—Ä–æ–∫—Ä—É—Ç–∞ + 2üéüÔ∏è (${formatNumberWithComma(CONFIG.SPIN_PACKAGE_2.cost)}üí≤)`;
            ui.btnBuySpins7.disabled = state.coins < CONFIG.SPIN_PACKAGE_1.cost;
            ui.btnBuySpins3.disabled = state.coins < CONFIG.SPIN_PACKAGE_2.cost;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ü–û–õ–ù–û–ì–û –°–ë–†–û–°–ê –∏ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã —Å 1-–≥–æ —Ü–∏–∫–ª–∞
    function initGame() {
        window.SYMBOLS = JSON.parse(JSON.stringify(ORIGINAL_SYMBOLS)); // –°–±—Ä–æ—Å —à–∞–Ω—Å–æ–≤
        state = {
            run: 1,
            targetDebt: 66,
            turn: 1,
            coins: 20,
            bankBalance: 0,
            tickets: 5,
            spinsLeft: 0,
            baseInterestRate: 0.30,
            inventory: [],
            shop: [],
            gameover: false,
            isSpinning: false,
            piggyBank: 0,
            tempLuck: 0,
            firstSpinUsed: false,
            activePassives: [],
            cherryLuckBonus: 0,
            permanentLuckBonus: 0, 
            flags: {
                sawPirateWarning: false,
                consecutiveLosses: 0,
                firstDepositThisRound: true,
                firstPurchaseThisRound: true,
                firstRerollUsed: false,
                isFirstSpinOfRound: true,
            }, 
            pirateCount: 0,
            pirateFlagCooldown: 0,
            consecutiveJackpots: 0,
            pirateFlagSuperChance: false,
            winStreak: 0,
            roundSpinsMade: 0,
            totalSpinsMade: 0,
            activatedItemsThisSpin: new Set(),
            echoStoneMultiplier: 1,
            purchasesThisRound: 0,
            dev100LoseMode: false,
            symbioticParasiteLuck: 0, // [NEW] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–º–±–∏–æ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä–∞–∑–∏—Ç–∞
        };
        window.state = state;
        lastKnownTickets = state.tickets;
        lastKnownCoins = state.coins;
        
        ui.startScreen.classList.add('hidden');
        ui.gameOverScreen.classList.add('hidden');
        ui.logPanel.innerHTML = '';
        
        addLog(`–ù–∞—á–∞–ª—Å—è –¶–∏–∫–ª –î–æ–ª–≥–∞ #${state.run}. –¶–µ–ª—å: ${state.targetDebt}üí≤ –∑–∞ 3 –¥–Ω—è.`);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–æ–≤—ã–µ –ø–∞—Å—Å–∏–≤–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        if (state.activePassives && state.activePassives.length > 0) {
            state.activePassives.forEach(passive => {
                if (passive.type === 'one_time' && typeof passive.effect === 'function') {
                    passive.effect(state);
                    addLog(`–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ä–∞–∑–æ–≤–∞—è –ø–∞—Å—Å–∏–≤–∫–∞: ${passive.name}.`, 'win');
                }
            });
        }
        
        state.grid = generateGrid();

        updateInterestRate();
        populateShop();
        renderGrid(true); 
        startTurn();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        updateWeightedSymbols();
        
        // [NEW] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è dropdown –∫–Ω–æ–ø–æ–∫
        setupDepositDropdownHandlers();
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –°–õ–ï–î–£–Æ–©–ò–ô –¶–ò–ö–õ
    function startNewCycle(bonusCoins = 0, bonusTickets = 0, paidToBank = 0) {
        // [NEW] –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ 'magnifying_glass' –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞
        if(hasItem('magnifying_glass')) {
            const effect = ALL_ITEMS.find(i => i.id === 'magnifying_glass').effect.base_value_increase;
            addLog(`–õ—É–ø–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å ${effect.symbols.join(' –∏ ')} –Ω–∞ ${effect.amount}.`, 'win');
            animateInventoryItem('magnifying_glass');
        }

        const lastPassiveIds = state.activePassives.map(p => p.id);
        
        state.run++;
        state.turn = 1;
        
        // --- –ü–ê–°–°–ò–í–ö–ê: –ü—Ä–æ—â–µ–Ω–∏–µ –¥–æ–ª–≥–∞ ---
        if (state.flags.nextDebtReduced) {
            const oldDebt = state.targetDebt;
            state.targetDebt = Math.floor(state.targetDebt * 0.9);
            addLog(`–ü—Ä–æ—â–µ–Ω–∏–µ –¥–æ–ª–≥–∞: –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–ª–≥ —Å–Ω–∏–∂–µ–Ω —Å ${formatNumberWithComma(oldDebt)} –¥–æ ${formatNumberWithComma(state.targetDebt)}!`, 'win');
            state.flags.nextDebtReduced = false; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥
        }
        
        // –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ –¥–æ–ª–≥–∞
        if (state.run === 2) state.targetDebt = 111;
        else if (state.run === 3) state.targetDebt = 450;
        else if (state.run === 4) state.targetDebt = 1999;
        else if (state.run === 5) state.targetDebt = 3333;
        else if (state.run === 6) state.targetDebt = 8888;
        else state.targetDebt = Math.min(Math.floor(state.targetDebt * 2.5 + 10000), 88888888);

        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç —Ä–∞–≤–Ω—ã–º —Å—É–º–º–µ, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–π –Ω–∞ –ø–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞
        // (–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É, –∞ –∑–∞–º–µ–Ω—è–µ–º)
        if (paidToBank) {
            state.bankBalance = paidToBank;
            console.log(`[DEBUG][startNewCycle] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º bankBalance=${paidToBank} –∏–∑ paidToBank`);
        } else {
            state.bankBalance = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç –≤ –Ω–æ–≤–æ–º —Ü–∏–∫–ª–µ
            console.log(`[DEBUG][startNewCycle] –°–±—Ä–∞—Å—ã–≤–∞–µ–º bankBalance=0 (paidToBank=${paidToBank})`);
        }

        

        state.tickets += (5 + state.run - 1) + bonusTickets;
        state.spinsLeft = 0;
        state.piggyBank = 0;
        state.firstSpinUsed = false;
        state.tempLuck = 0;
        state.cherryLuckBonus = 0;
        
        // [FIX] –û–±–Ω–æ–≤–ª—è–µ–º lastKnownCoins –∏ lastKnownTickets –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∞–Ω–∏–º–∞—Ü–∏–∏
        lastKnownCoins = state.coins;
        lastKnownTickets = state.tickets;
        
        // --- –ü–ê–°–°–ò–í–ö–ê: –û–ø—ã—Ç–Ω—ã–π –≤–µ—Ç–µ—Ä–∞–Ω ---
        if (hasPassive('seasoned_veteran') && state.run >= 2) {
            const commonItems = ALL_ITEMS.filter(i => i.rarity === 'common' && !hasItem(i.id));
            if (commonItems.length > 0) {
                const randomItem = commonItems[Math.floor(Math.random() * commonItems.length)];
                state.inventory.push(randomItem);
                addLog(`–û–ø—ã—Ç–Ω—ã–π –≤–µ—Ç–µ—Ä–∞–Ω: –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π –∞–º—É–ª–µ—Ç "${randomItem.name}"!`, 'win');
            }
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–æ–≤—ã–µ –ø–∞—Å—Å–∏–≤–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        if (state.activePassives && state.activePassives.length > 0) {
            state.activePassives.forEach(passive => {
                if (passive.type === 'one_time' && typeof passive.effect === 'function') {
                    passive.effect(state);
                    addLog(`–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ä–∞–∑–æ–≤–∞—è –ø–∞—Å—Å–∏–≤–∫–∞: ${passive.name}.`, 'win');
                }
            });
        }
        
        state.pirateCount = 0; // –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –ø–∏—Ä–∞—Ç—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        state.winStreak = 0;
        state.roundSpinsMade = 0;
        state.flags.firstDepositThisRound = true;
        state.purchasesThisRound = 0; // <-- –°–ë–†–û–° –°–í–û–ô–°–¢–í–ê
        state.symbioticParasiteLuck = 0; // [NEW] –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–º–±–∏–æ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä–∞–∑–∏—Ç–∞

        updateInterestRate();
        addLog(`–ù–∞—á–∞–ª—Å—è –¶–∏–∫–ª –î–æ–ª–≥–∞ #${state.run}. –¶–µ–ª—å: ${formatNumberWithComma(state.targetDebt)}üí≤.`);
        if(bonusCoins > 0 || bonusTickets > 0) addLog(`–ë–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä–æ—Ç—É: +${formatNumberWithComma(bonusCoins)}üí≤ –∏ +${formatNumberWithComma(bonusTickets)}üéüÔ∏è`, 'win');
        populateShop();
        
        if (state.run >= 2) {
            showPassiveChoiceModal(lastPassiveIds);
        } else {
            startTurn();
        }
        state.pirateFlagCooldown = 0;
        state.consecutiveJackpots = 0;
        state.pirateFlagSuperChance = false;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–∏—Ä–∞—Ç—Å–∫–æ–º —Å–∏–º–≤–æ–ª–µ –≤ –Ω–∞—á–∞–ª–µ 3-–≥–æ —Ü–∏–∫–ª–∞
        if (state.run === 3 && !state.flags.sawPirateWarning) {
            setTimeout(showPirateWarning, 1000);
            state.flags.sawPirateWarning = true;
        }
        console.log(`[DEBUG][startNewCycle] –ü–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞: bankBalance=${state.bankBalance}, coins=${state.coins}, tickets=${state.tickets}`);
        
        // [NEW] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è dropdown –∫–Ω–æ–ø–æ–∫
        setupDepositDropdownHandlers();

        // --- [NEW] Divine Recalculation Effect: –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤ ---
        if (state._pendingBonusSpins && state._pendingBonusSpins > 0) {
            state.spinsLeft += state._pendingBonusSpins;
            addLog(`–ü–µ—Ä–µ—Ä–∞—Å—á—ë—Ç: +${state._pendingBonusSpins} –±–æ–Ω—É—Å–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–≤ –∑–∞ –ø—Ä–æ—à–ª—ã–π —Ä–∞—É–Ω–¥!`, 'win');
            state._pendingBonusSpins = 0;
        }
    }


    function startTurn() {
        if (typeof console !== 'undefined') {
            console.log('[DEBUG][startTurn] –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä–µ–¥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –±–æ–Ω—É—Å–æ–≤:', state.inventory.map(i=>({id:i.id,name:i.name,effect:i.effect})));
        }
        repairDwarfsWorkshop(); // –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –≥–Ω–æ–º–∞ —Ç–µ–ø–µ—Ä—å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞
        updateSpinCosts(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        state.spinsLeft = 0;
        state.tempLuck = 0;
        state.firstSpinUsed = false;
        state.roundSpinsMade = 0;
        state.purchasesThisRound = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫ –≤ –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞
        state.symbioticParasiteLuck = 0; // [NEW] –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–º–±–∏–æ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä–∞–∑–∏—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞
        
        // --- –°–ë–†–û–° –§–õ–ê–ì–û–í –î–õ–Ø –ü–ê–°–°–ò–í–û–ö –ù–ê 1 –†–ê–£–ù–î ---
        if (state.activePassives.length > 0) {
            if (hasPassive('bankers_friend')) state.flags.firstDepositThisRound = true;
            if (hasPassive('shopaholic')) state.flags.firstPurchaseThisRound = true;
            if (hasPassive('reroll_master')) state.flags.firstRerollUsed = false;
            if (hasPassive('beginners_luck_passive')) state.flags.isFirstSpinOfRound = true;
            if (hasPassive('lucky_start')) {
                state.tempLuck += 3;
                addLog(`–£–¥–∞—á–Ω—ã–π —Å—Ç–∞—Ä—Ç: +3 –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —É–¥–∞—á–µ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥.`, 'win');
            }
        }
        
        // --- –ú–ò–ú–ò–ö: —Å–º–µ–Ω–∞ —Ü–µ–ª–∏ —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞ ---
        if (!state.mimicLastRound || state.mimicLastRound !== state.turn) {
            updateMimicTarget();
            state.mimicLastRound = state.turn;
        }
        
        // --- –ü–ê–°–°–ò–í–ö–ê: –õ–∏–∫–≤–∏–¥–∞—Ç–æ—Ä —Ç–∞–ª–æ–Ω–æ–≤ ---
        if (hasPassive('ticket_liquidator') && state.tickets > 0) {
            const amountToConvert = parseInt(prompt(`–õ–∏–∫–≤–∏–¥–∞—Ç–æ—Ä —Ç–∞–ª–æ–Ω–æ–≤: —Å–∫–æ–ª—å–∫–æ —Ç–∞–ª–æ–Ω–æ–≤ (–¥–æ 5) –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –º–æ–Ω–µ—Ç—ã (1–∫1)? –£ –≤–∞—Å ${state.tickets}üéüÔ∏è.`, "0"), 10);
            if (!isNaN(amountToConvert) && amountToConvert > 0) {
                const finalAmount = Math.min(amountToConvert, 5, state.tickets);
                if (finalAmount > 0) {
                    state.tickets -= finalAmount;
                    state.coins += finalAmount;
                    addLog(`–õ–∏–∫–≤–∏–¥–∞—Ç–æ—Ä —Ç–∞–ª–æ–Ω–æ–≤: –æ–±–º–µ–Ω—è–Ω–æ ${finalAmount}üéüÔ∏è –Ω–∞ ${finalAmount}üí≤.`, 'win');
                }
            }
        }

        // --- –ü–ê–°–°–ò–í–ö–ê: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ ---
        if (hasPassive('maintenance')) {
            let repairedCount = 0;
            state.inventory.forEach(item => {
                if (item.effect?.luck_chance?.breakable && item.uses < item.effect.luck_chance.max_uses) {
                    if (Math.random() < 0.25) {
                        item.uses++;
                        repairedCount++;
                        addLog(`–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: –∞–º—É–ª–µ—Ç "${item.name}" –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 1 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.`, 'win');
                    }
                }
            });
        }


        if (hasItem('morning_coffee')) {
            const bonus = getItemEffectValue('on_round_start_coins', 0);
            if (bonus > 0) {
                state.coins += bonus;
                addLog(`–£—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—Ñ–µ: +${formatNumberWithComma(bonus)}üí≤.`, 'win');
                animateInventoryItem('morning_coffee');
            }
        }
        // --- –ú–µ—à–æ—á–µ–∫ –º–æ–Ω–µ—Ç ---
        if (hasItem('coin_pouch')) {
            const perItemBonus = getItemEffectValue('on_round_start_per_item_coins', 0);
            const itemCount = state.inventory.length;
            const bonus = perItemBonus * itemCount;
            if (bonus > 0) {
                state.coins += bonus;
                addLog(`–ú–µ—à–æ—á–µ–∫ –º–æ–Ω–µ—Ç: +${formatNumberWithComma(bonus)}üí≤ (${itemCount} –∞–º—É–ª–µ—Ç–æ–≤).`, 'win');
                animateInventoryItem('coin_pouch');
            }
        }

        state.freeRerolls = 0;
        if(hasItem('coupon_book')) {
            const rerolls = getItemEffectValue('free_reroll_per_round', 0);
            if (rerolls > 0) {
                state.freeRerolls += rerolls;
                addLog(`–ö–Ω–∏–∂–∫–∞ —Å –∫—É–ø–æ–Ω–∞–º–∏: ${rerolls} –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ—Ä–æ–ª–ª –º–∞–≥–∞–∑–∏–Ω–∞.`, 'win');
                animateInventoryItem('coupon_book');
            }
        }
        
        if(hasItem('timepiece')) {
            let timepieceBonus = getItemEffectValue('on_round_start_spins', 0);
            if (typeof console !== 'undefined') {
                console.log('[DEBUG][startTurn] –ö–∞—Ä–º–∞–Ω–Ω—ã–µ —á–∞—Å—ã: –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è', timepieceBonus, '–ø—Ä–æ–∫—Ä—É—Ç–æ–≤');
            }
            if (hasPassive('watchmaker_precision') && Math.random() < 0.5) {
                timepieceBonus += 1;
                addLog(`–¢–æ—á–Ω–æ—Å—Ç—å —á–∞—Å–æ–≤—â–∏–∫–∞: +1 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–∫—Ä—É—Ç!`, 'win');
            }
            if (timepieceBonus > 0) {
                state.spinsLeft += timepieceBonus;
                addLog(`–ö–∞—Ä–º–∞–Ω–Ω—ã–µ —á–∞—Å—ã: +${timepieceBonus} –ø—Ä–æ–∫—Ä—É—Ç(–æ–≤) –≤ –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞.`, 'win');
                animateInventoryItem('timepiece');
            }
        }

        // --- –û–ë–†–ê–ë–û–¢–ö–ê PERMANENT_SPINS ---
        let permanentSpinsBonus = getItemEffectValue('permanent_spins', 0);
        if (typeof console !== 'undefined') {
            console.log('[DEBUG][startTurn] –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Å–ø–∏–Ω–Ω—ã: –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è', permanentSpinsBonus, '–ø—Ä–æ–∫—Ä—É—Ç–æ–≤');
        }
        if (permanentSpinsBonus > 0) {
            state.spinsLeft += permanentSpinsBonus;
            addLog(`–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Å–ø–∏–Ω–Ω—ã: +${permanentSpinsBonus} –ø—Ä–æ–∫—Ä—É—Ç(–æ–≤) –≤ –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞.`, 'win');
            // –ê–Ω–∏–º–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å permanent_spins
            state.inventory.forEach(item => {
                if (item.effect?.permanent_spins) {
                    animateInventoryItem(item.id);
                }
            });
        }

        if (state.turn > 1 || state.run > 1) {
            const interest = Math.floor(state.bankBalance * state.baseInterestRate);
            if (interest > 0) {
                state.coins += interest;
                addLog(`–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –∫—ç—à–±–µ–∫: +${formatNumberWithComma(interest)}üí≤.`, 'win');
            }
        }
        updateInterestRate();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω –∞–º—É–ª–µ—Ç–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        populateShop();
        
        ui.purchaseModalTitle.textContent = `–†–∞—É–Ω–¥ ${state.turn}. –í—Ä–µ–º—è –∑–∞–∫—É–ø–∞—Ç—å—Å—è.`;
        ui.purchaseModalCoins.textContent = `${formatNumberWithComma(state.coins)}üí≤`;
        if (ui.purchaseModalDebt) ui.purchaseModalDebt.textContent = `${formatNumberWithComma(state.targetDebt)}üí≤`;

        let package1Cost = CONFIG.SPIN_PACKAGE_1.cost;
        if(hasPassive('bulk_buyer')) {
            package1Cost = Math.max(1, package1Cost - 2);
        }
        ui.btnBuySpins7.textContent = `7 –ø—Ä–æ–∫—Ä—É—Ç–æ–≤ + 1üéüÔ∏è (${package1Cost}üí≤)`;
        ui.btnBuySpins3.textContent = `3 –ø—Ä–æ–∫—Ä—É—Ç–∞ + 2üéüÔ∏è (${CONFIG.SPIN_PACKAGE_2.cost}üí≤)`;
        
        let singleSpinCost = 3;
        if (hasPassive('frugal_spinner')) {
            singleSpinCost = 2;
        }
        ui.btnBuySpin1.textContent = `1 –ø—Ä–æ–∫—Ä—É—Ç (${singleSpinCost}üí≤)`;
        ui.btnBuySpin1.disabled = state.coins < singleSpinCost || state.coins >= CONFIG.SPIN_PACKAGE_2.cost;


        ui.btnBuySpins7.disabled = state.coins < CONFIG.SPIN_PACKAGE_1.cost;
        ui.btnBuySpins3.disabled = state.coins < CONFIG.SPIN_PACKAGE_2.cost;
        
        if (state.coins < CONFIG.SPIN_PACKAGE_2.cost) {
            ui.btnBuySpin1.style.display = '';
        } else {
            ui.btnBuySpin1.style.display = 'none';
        }
        ui.spinPurchaseModal.classList.remove('hidden');
        updateUI();

        updateMimicTarget();
        setupSpinCostTooltip(); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç—É–ª—Ç–∏–ø–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        
        // [NEW] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è dropdown –∫–Ω–æ–ø–æ–∫
        setupDepositDropdownHandlers();

        // --- [NEW] Divine Recalculation Effect: –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤ ---
        if (state._pendingBonusSpins && state._pendingBonusSpins > 0) {
            state.spinsLeft += state._pendingBonusSpins;
            addLog(`–ü–µ—Ä–µ—Ä–∞—Å—á—ë—Ç: +${state._pendingBonusSpins} –±–æ–Ω—É—Å–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–≤ –∑–∞ –ø—Ä–æ—à–ª—ã–π —Ä–∞—É–Ω–¥!`, 'win');
            state._pendingBonusSpins = 0;
        }
    }
    
    function buySpins(pkg) {
        if (pkg === 'single') {
            let cost = 3;
            if (hasPassive('frugal_spinner')) {
                cost = 2;
            }
            if (state.coins >= cost) {
                state.coins -= cost;
                state.spinsLeft += 1;
                state.purchasesThisRound++; // –û—Å—Ç–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ö–∞–Ω–∏–∫
                addLog(`–ö—É–ø–ª–µ–Ω 1 –ø—Ä–æ–∫—Ä—É—Ç –∑–∞ ${cost}üí≤ (–±–µ–∑ —Ç–∞–ª–æ–Ω–æ–≤).`, 'win');
            } else {
                addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö.', 'loss');
            }
            ui.spinPurchaseModal.classList.add('hidden');
            updateUI();
            return;
        }
        if (pkg) {
            let finalCost = pkg.cost;
            // –°—Ç–æ–∏–º–æ—Å—Ç—å —É–∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ updateSpinCosts
            if (state.coins >= finalCost) {
                state.coins -= finalCost;
                state.spinsLeft += pkg.spins;
                state.tickets += pkg.tickets;
                state.purchasesThisRound++; // –û—Å—Ç–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ö–∞–Ω–∏–∫
                addLog(`–ö—É–ø–ª–µ–Ω–æ: ${pkg.spins} –ø—Ä–æ–∫—Ä—É—Ç–æ–≤ –∏ ${pkg.tickets} —Ç–∞–ª–æ–Ω(–∞/–æ–≤).`);
                updateSpinCosts();
                ui.btnBuySpins7.textContent = `7 –ø—Ä–æ–∫—Ä—É—Ç–æ–≤ + 1üéüÔ∏è (${CONFIG.SPIN_PACKAGE_1.cost}üí≤)`;
                ui.btnBuySpins3.textContent = `3 –ø—Ä–æ–∫—Ä—É—Ç–∞ + 2üéüÔ∏è (${CONFIG.SPIN_PACKAGE_2.cost}üí≤)`;
                ui.btnBuySpins7.disabled = state.coins < CONFIG.SPIN_PACKAGE_1.cost;
                ui.btnBuySpins3.disabled = state.coins < CONFIG.SPIN_PACKAGE_2.cost;
                setupSpinCostTooltip();
            } else { addLog(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö.`, 'loss'); }
        }
        ui.spinPurchaseModal.classList.add('hidden');
        updateUI();
    }

    function endTurn() {
        if (state.isSpinning) return;
        // --- –ö—Ä–∏—Ç–∏—á–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
        if (!endTurn._confirmed && state.spinsLeft > 0) {
            if (document.getElementById('end-turn-confirm-modal')) return;
            const modal = document.createElement('div');
            modal.id = 'end-turn-confirm-modal';
            modal.className = 'modal-overlay';
            modal.style.zIndex = 9999;
            modal.innerHTML = `
                <div class=\"modal-content warning-modal\" style=\"max-width: 400px; text-align: center;\">
                    <h3>–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—É–Ω–¥ —Å–µ–π—á–∞—Å?</h3>
                    <p>–£ –≤–∞—Å –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å <b>${state.spinsLeft}</b> –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–≤.<br>–ï—Å–ª–∏ –≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–∞—É–Ω–¥ —Å–µ–π—á–∞—Å, <span style='color:var(--danger-color);font-weight:bold;'>–≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–∫—Ä—É—Ç—ã —Å–≥–æ—Ä—è—Ç</span> –∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞ –Ω–∏—Ö –±–æ–Ω—É—Å—ã.<br><br>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—É–Ω–¥?</p>
                    <div style=\"margin-top: 18px; display: flex; gap: 12px; justify-content: center;\">
                        <button id=\"btn-end-turn-confirm\" style=\"background: #ff6b35; color: #fff; border: none; border-radius: 6px; padding: 10px 22px; font-size: 1em; font-weight: bold; cursor: pointer;\">–î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å</button>
                        <button id=\"btn-end-turn-cancel\" style=\"background: #444; color: #fff; border: none; border-radius: 6px; padding: 10px 22px; font-size: 1em; font-weight: bold; cursor: pointer;\">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            document.getElementById('btn-end-turn-cancel').onclick = () => {
                modal.remove();
            };
            document.getElementById('btn-end-turn-confirm').onclick = () => {
                modal.remove();
                endTurn._confirmed = true;
                endTurn();
            };
            return;
        }
        if (endTurn._confirmed) {
            delete endTurn._confirmed;
        }
        ui.eorTitle.textContent = `–ö–æ–Ω–µ—Ü –†–∞—É–Ω–¥–∞ ${state.turn}`;
        ui.eorCoins.textContent = `${formatNumberWithComma(state.coins)}üí≤`;
        ui.eorBank.textContent = `${formatNumberWithComma(state.bankBalance)}üí≤`;
        
        // [NEW] –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è 3-–≥–æ —Ä–∞—É–Ω–¥–∞
        const eorDescription = document.querySelector('#end-of-round-modal p');
        if (state.turn === 3) {
            eorDescription.innerHTML = `
                <span style="color: #ff6666; font-weight: bold;">üíÄ –ü–û–°–õ–ï–î–ù–ò–ô –®–ê–ù–° üíÄ</span><br>
                <span style="color: #ff8888;">–î–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É, –∏ —ç—Ç–æ –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –≤–Ω–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å.</span><br>
                <span style="color: #ffaa88; font-style: italic;">–ü–æ—Å–º–æ—Ç—Ä–∏–º, —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å –ª–∏ –≤—ã —Å —ç—Ç–æ–π –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–µ–π! üòà</span>
            `;
        } else {
            eorDescription.textContent = '–î–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É. –í–Ω–µ—Å–∏—Ç–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –≤ –±–∞–Ω–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ.';
        }
        
        ui.endOfRoundModal.classList.remove('hidden');
        
        // [NEW] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è dropdown –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        setupDepositDropdownHandlers();
    }

    // [NEW] –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π dropdown –∫–Ω–æ–ø–æ–∫
    function setupDepositDropdownHandlers() {
        const depositBtn = document.getElementById('btn-deposit');
        const depositDropdown = document.getElementById('deposit-dropdown');
        const eorDepositBtn = document.getElementById('btn-eor-deposit');
        const eorDepositDropdown = document.getElementById('eor-deposit-dropdown');

        function handleDepositDropdownClick(type, isFromEOR) {
            let amount = 0;
            if (type === 'all') amount = state.coins;
            else if (type === 'except-7') amount = getDepositAmountExcept7();
            else if (type === 'except-3') amount = getDepositAmountExcept3();
            else if (type === 'half') amount = getDepositAmountHalf();
            deposit(amount, isFromEOR);
            if (depositDropdown) depositDropdown.classList.add('hidden');
            if (eorDepositDropdown) eorDepositDropdown.classList.add('hidden');
        }

        if (depositBtn && depositDropdown) {
            depositBtn.onclick = (e) => {
                e.stopPropagation();
                depositDropdown.classList.toggle('hidden');
            };
            depositDropdown.querySelectorAll('.deposit-option').forEach(opt => {
                opt.onclick = (e) => {
                    handleDepositDropdownClick(opt.dataset.type, false);
                };
            });
        }
        if (eorDepositBtn && eorDepositDropdown) {
            eorDepositBtn.onclick = (e) => {
                e.stopPropagation();
                eorDepositDropdown.classList.toggle('hidden');
            };
            eorDepositDropdown.querySelectorAll('.deposit-option').forEach(opt => {
                opt.onclick = (e) => {
                    handleDepositDropdownClick(opt.dataset.type, true);
                };
            });
        }
    }

    function confirmEndTurn() {
        // [NEW] –õ–æ–≥–∏–∫–∞ 'frugal_mindset'
        if (hasItem('frugal_mindset') && state.spinsLeft > 0) {
            const bonus = state.spinsLeft * ALL_ITEMS.find(i => i.id === 'frugal_mindset').effect.on_round_end_bonus.per_spin_left;
            const finalBonus = applyCoinDoubler(bonus);
            state.coins += finalBonus;
            addLog(`–≠–∫–æ–Ω–æ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ: +${finalBonus}üí≤ –∑–∞ ${state.spinsLeft} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–∫—Ä—É—Ç–æ–≤.`, 'win');
            animateInventoryItem('frugal_mindset');
        }

        // --- –ü–ê–°–°–ò–í–ö–ê: –ü—Ä–æ—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∏—Å–∫ ---
        if (hasPassive('calculated_risk') && state.spinsLeft === 0) {
            const bonus = 5 * (state.cycle || 1);
            state.coins += bonus;
            addLog(`–ü—Ä–æ—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∏—Å–∫: +${bonus}üí≤ –∑–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ —Å 0 –ø—Ä–æ–∫—Ä—É—Ç–æ–≤.`, 'win');
        }
        if (hasItem('scrap_metal') && state.piggyBank > 0) {
            const piggyBankBonus = applyCoinDoubler(state.piggyBank);
            addLog(`üí• –ö–æ–ø–∏–ª–∫–∞ —Ä–∞–∑–±–∏—Ç–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ +${formatNumberWithComma(piggyBankBonus)}üí≤.`, 'win');
            state.coins += piggyBankBonus;
            state.piggyBank = 0;
            animateInventoryItem('scrap_metal');
        }
        if (hasItem('piggy_bank')) {
            const piggyBankItem = ALL_ITEMS.find(i => i.id === 'piggy_bank');
            const effect = piggyBankItem.effect.end_round_savings_bonus;
            const savings = Math.floor(state.coins / effect.per) * effect.coins;
            if (savings > 0) {
                state.coins += savings;
                addLog(`–°–≤–∏–Ω–∫–∞-–∫–æ–ø–∏–ª–∫–∞: +${savings}üí≤ –∑–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è (${Math.floor(state.coins / effect.per) * effect.per}üí≤).`, 'win');
                animateInventoryItem('piggy_bank');
            }
        }

        // --- –ü–ê–°–°–ò–í–ö–ê: –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –≥–Ω–æ–º–∞ ---
        repairDwarfsWorkshop();

        // --- [NEW] Divine Recalculation Effect ---
        // –ü–æ–¥—Å—á—ë—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö –∏ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–≤ –∑–∞ —Ä–∞—É–Ω–¥
        const recalcItem = state.inventory.find(item => item.effect && item.effect.on_round_end_recalculation);
        if (recalcItem) {
            const spinResults = state._roundSpinResults || [];
            const winCount = spinResults.filter(Boolean).length;
            const lossCount = spinResults.length - winCount;
            const { loss_threshold, spins_bonus } = recalcItem.effect.on_round_end_recalculation;
            console.log('[DivineRecalculation]', {
                spinResults,
                winCount,
                lossCount,
                loss_threshold,
                spins_bonus,
                item: recalcItem
            });
            if (lossCount > winCount) {
                const extraLosses = lossCount - winCount;
                const bonusSpins = Math.floor(extraLosses / loss_threshold) * spins_bonus;
                if (bonusSpins > 0) {
                    state._pendingBonusSpins = (state._pendingBonusSpins || 0) + bonusSpins;
                    addLog(`${recalcItem.name}: +${bonusSpins} –ø—Ä–æ–∫—Ä—É—Ç(–æ–≤) –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –≤ –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞!`, 'win');
                    animateInventoryItem(recalcItem.id);
                }
            }
            state._roundSpinResults = [];
        }

        ui.endOfRoundModal.classList.add('hidden');
        addLog(`--- –†–∞—É–Ω–¥ ${state.turn} –æ–∫–æ–Ω—á–µ–Ω ---`);
        state.turn++;
        
        // [NEW] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–Ω–µ–≥ –≤ –∫–æ–Ω—Ü–µ 3-–≥–æ —Ä–∞—É–Ω–¥–∞
        if (state.turn === 4) { // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 3-–≥–æ —Ä–∞—É–Ω–¥–∞
            checkMoneyForRound3();
            return; // –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ, –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–µ–Ω—å–≥–∏
        }
        
        // [FIX] –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è –∫–æ–ø–∏–ª–∫–∏ (–∏ –¥—Ä—É–≥–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞) —É—Å–ø–µ–ª–∞ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å—Å—è
        // –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ startTurn() –≤—ã–∑–æ–≤–µ—Ç updateUI() –∏ –ø–µ—Ä–µ—Ä–∏—Å—É–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.
        setTimeout(() => {
            if (state.turn > 3) {
                judgementDay();
            } else {
                startTurn();
            }
        }, 900); // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª–∏—Ç—Å—è 800ms
    }

    // [NEW] –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–Ω–µ–≥ –≤ –∫–æ–Ω—Ü–µ 3-–≥–æ —Ä–∞—É–Ω–¥–∞
    function checkMoneyForRound3() {
        const totalMoney = state.coins + state.bankBalance;
        const requiredAmount = state.targetDebt;
        
        if (totalMoney < requiredAmount) {
            // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–≥–∏—á–Ω—ã–π –ø–æ–ø-–∞–ø
            showInsufficientMoneyPopup(totalMoney, requiredAmount);
        } else {
            // –ï—Å—Ç—å –¥–µ–Ω—å–≥–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø-–∞–ø —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –≤–Ω–µ—Å—Ç–∏ –Ω—É–∂–Ω—É—é —Å—É–º–º—É
            showSufficientMoneyPopup(totalMoney, requiredAmount);
        }
    }

    // [NEW] –ü–æ–ø-–∞–ø –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–µ–Ω–µ–≥
    function showInsufficientMoneyPopup(currentMoney, requiredAmount) {
        const popup = document.createElement('div');
        popup.className = 'insufficient-money-popup';
        popup.innerHTML = `
            <div class="insufficient-money-content">
                <h2 style="color: #ff4444; text-align: center; margin-bottom: 20px; font-size: 1.5em;"> –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –î–ï–ù–ï–ì! üíÄ</h2>
                <p style="text-align: center; font-size: 1.2em; margin-bottom: 15px; color: #ff6666;">
                    –•–∞-—Ö–∞-—Ö–∞! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —ç—Ç–æ–≥–æ –±–µ–¥–Ω—è–≥—É! 
                </p>
                <p style="text-align: center; font-size: 1.1em; margin-bottom: 10px;">
                    –£ –≤–∞—Å –≤—Å–µ–≥–æ: <span style="color: #ff4444; font-weight: bold;">${formatNumberWithComma(currentMoney)}üí≤</span>
                </p>
                <p style="text-align: center; font-size: 1.1em; margin-bottom: 20px;">
                    –ê –Ω—É–∂–Ω–æ: <span style="color: #ff4444; font-weight: bold;">${formatNumberWithComma(requiredAmount)}üí≤</span>
                </p>
                <p style="text-align: center; font-size: 1.1em; color: #ff8888; font-style: italic;">
                    –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–º–µ—Ä—Ç–∏, –Ω–µ—É–¥–∞—á–Ω–∏–∫! üòà
                </p>
            </div>
        `;
        
        document.body.appendChild(popup);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø-–∞–ø
        setTimeout(() => popup.classList.add('show'), 100);
        
        // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–±–∏–π—Å—Ç–≤–æ
        setTimeout(() => {
            popup.classList.remove('show');
            popup.classList.add('fade-out');
            setTimeout(() => {
                popup.remove();
                gameOver();
            }, 1000);
        }, 5000);
    }

    // [NEW] –ü–æ–ø-–∞–ø –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–∫–µ –¥–µ–Ω–µ–≥
    function showSufficientMoneyPopup(currentMoney, requiredAmount) {
        const popup = document.createElement('div');
        popup.className = 'sufficient-money-popup';
        popup.innerHTML = `
            <div class="sufficient-money-content">
                <h2 style="color: #44ff44; text-align: center; margin-bottom: 20px; font-size: 1.5em;"> –Ø –í–ò–ñ–£, –ß–¢–û –£ –í–ê–° –î–û–°–¢–ê–¢–û–ß–ù–û –î–ï–ù–ï–ì! üí≤</h2>
                <p style="text-align: center; font-size: 1.2em; margin-bottom: 15px; color: #44ff44;">
                    –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–Ω–µ—Å–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!
                </p>
                <p style="text-align: center; font-size: 1.1em; margin-bottom: 10px;">
                    –£ –≤–∞—Å: <span style="color: #44ff44; font-weight: bold;">${formatNumberWithComma(currentMoney)}üí≤</span>
                </p>
                <p style="text-align: center; font-size: 1.1em; margin-bottom: 20px;">
                    –ù—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏: <span style="color: #44ff44; font-weight: bold;">${formatNumberWithComma(requiredAmount)}üí≤</span>
                </p>
                <div style="text-align: center;">
                    <button id="btn-continue-to-judgement" style="background: #44ff44; color: #000; border: none; padding: 10px 20px; border-radius: 5px; font-weight: bold; cursor: pointer; margin: 10px;">
                        –í–Ω–µ—Å—Ç–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(popup);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø-–∞–ø
        setTimeout(() => popup.classList.add('show'), 100);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
        document.getElementById('btn-continue-to-judgement').onclick = () => {
            popup.classList.remove('show');
            popup.classList.add('fade-out');
            setTimeout(() => {
                popup.remove();
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ —Å—É–¥–Ω–æ–º—É –¥–Ω—é
                setTimeout(() => {
                    judgementDay();
                }, 900);
            }, 1000);
        };
    }

    function advanceToNextCycle(bonusCoins = 0, bonusTickets = 0, paidToBank = 0) {
        ui.judgementModal.classList.remove('hidden');
        ui.judgementTitle.textContent = "–î–û–õ–ì –í–´–ü–õ–ê–ß–ï–ù";
        ui.judgementTitle.classList.remove('failure');

        const totalMoney = state.coins + state.bankBalance;
        const standardTickets = 5 + state.run;
        let bonusText = '';
        if(bonusCoins > 0 || bonusTickets > 0) {
            bonusText = `–ë–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä–æ—Ç—É: <span style="color:var(--money-color)">+${formatNumberWithComma(bonusCoins)}üí≤</span> –∏ <span style="color:var(--ticket-color)">+${formatNumberWithComma(bonusTickets)}üéüÔ∏è</span>.<br>`;
        }
        ui.judgementText.innerHTML = `–í—ã –≤—ã–∂–∏–ª–∏. –ù–∞–ª–∏—á–Ω—ã–µ: <span style="color:var(--money-color)">${formatNumberWithComma(totalMoney)}üí≤</span>.<br>
                                     –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: <span style="color:var(--ticket-color)">${formatNumberWithComma(standardTickets)}üéüÔ∏è</span>.<br>
                                     ${bonusText}`;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞
        if (window.leaderboardsManager) {
            window.leaderboardsManager.onGameOver(state);
        }

        ui.judgementContinue.onclick = () => {
            const now = Date.now();
            const adCooldown = 120000; // 2 –º–∏–Ω—É—Ç—ã
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è –∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
            if (!firstSession && window.adsManager && window.adsManager.isReady() && (now - lastAdShownTime > adCooldown)) {
                lastAdShownTime = now;
                window.adsManager.showAdOnEvent('level_complete');
            }
            ui.judgementModal.classList.add('hidden');
            startNewCycle(bonusCoins, bonusTickets, paidToBank);
            firstSession = false; // –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–≤–∞—è
        };
    }

    function judgementDay() {
        const totalMoney = state.coins + state.bankBalance;
        addLog(`–°–£–î–ù–´–ô –î–ï–ù–¨. –í–∞—à–∞ —Å—É–º–º–∞: ${formatNumberWithComma(totalMoney)}üí≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${formatNumberWithComma(state.targetDebt)}üí≤.`);
        
        if (totalMoney >= state.targetDebt) {
            // –ü—Ä–∏ –æ–±—ã—á–Ω–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç
            advanceToNextCycle(0, 0, state.bankBalance);
        } else {
            gameOver();
        }
    }

    function payDebtEarly() {
        if (state.turn >= 3) return;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—É–º–º—É (–Ω–∞–ª–∏—á–Ω—ã–µ + –±–∞–Ω–∫) –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è
        const totalMoney = state.coins + state.bankBalance;
        if (totalMoney < state.targetDebt) return;

        // --- –ù–æ–≤—ã–π –∫–æ–¥: –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–∫—Ä—É—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º ---
        if (state.spinsLeft > 0) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –ø–æ–ø–∞–ø–∞
            if (document.getElementById('early-payoff-confirm-modal')) return;
            const modal = document.createElement('div');
            modal.id = 'early-payoff-confirm-modal';
            modal.className = 'modal-overlay';
            modal.style.zIndex = 9999;
            modal.innerHTML = `
                <div class="modal-content warning-modal" style="max-width: 400px; text-align: center;">
                    <h3>–î–æ—Å—Ä–æ—á–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞</h3>
                    <p>–£ –≤–∞—Å –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å <b>${state.spinsLeft}</b> –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–≤.<br>–ï—Å–ª–∏ –≤—ã –≤—ã–ø–ª–∞—Ç–∏—Ç–µ –¥–æ–ª–≥ —Å–µ–π—á–∞—Å, <span style='color:var(--danger-color);font-weight:bold;'>–≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–∫—Ä—É—Ç—ã —Å–≥–æ—Ä—è—Ç</span> –∏ —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –¥–æ—Å—Ä–æ—á–Ω–æ.<br><br>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</p>
                    <div style="margin-top: 18px; display: flex; gap: 12px; justify-content: center;">
                        <button id="btn-early-payoff-confirm" style="background: #ff6b35; color: #fff; border: none; border-radius: 6px; padding: 10px 22px; font-size: 1em; font-weight: bold; cursor: pointer;">–î–∞, –≤—ã–ø–ª–∞—Ç–∏—Ç—å</button>
                        <button id="btn-early-payoff-cancel" style="background: #444; color: #fff; border: none; border-radius: 6px; padding: 10px 22px; font-size: 1em; font-weight: bold; cursor: pointer;">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            document.getElementById('btn-early-payoff-cancel').onclick = () => {
                modal.remove();
            };
            document.getElementById('btn-early-payoff-confirm').onclick = () => {
                modal.remove();
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –≤—ã–ø–ª–∞—Ç—É –¥–æ–ª–≥–∞
                payDebtEarly._confirmed = true;
                payDebtEarly();
            };
            return;
        }
        // –ï—Å–ª–∏ –±—ã–ª –≤—ã–∑–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        if (payDebtEarly._confirmed) {
            delete payDebtEarly._confirmed;
        }

        let bonusCoins = 0;
        let bonusTickets = 0;

        // --- –ù–æ–≤—ã–π —Å–∫–µ–π–ª–∏–Ω–≥ –±–æ–Ω—É—Å–∞ ---
        if (state.turn === 1) {
            bonusCoins = Math.floor(state.targetDebt * 0.40);
            bonusTickets = 7 + state.run;
            addLog('–î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –≤ 1-–π —Ä–∞—É–Ω–¥!', 'win');
        } else if (state.turn === 2) {
            bonusCoins = Math.floor(state.targetDebt * 0.20);
            bonusTickets = 4 + state.run;
            addLog('–î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –≤–æ 2-–π —Ä–∞—É–Ω–¥!', 'win');
        }
        if (hasPassive('early_bird')) {
            const oldCoins = bonusCoins;
            const oldTickets = bonusTickets;
            bonusCoins = Math.floor(bonusCoins * 1.5);
            bonusTickets = Math.floor(bonusTickets * 1.5);
            addLog(`–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞: –±–æ–Ω—É—Å—ã —É–≤–µ–ª–∏—á–µ–Ω—ã! (+${formatNumberWithComma(bonusCoins - oldCoins)}üí≤, +${formatNumberWithComma(bonusTickets - oldTickets)}üéüÔ∏è)`, 'win');
        }
        
        // --- –°–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–≥–∞ –∏–∑ –Ω–∞–ª–∏—á–Ω—ã—Ö, –∑–∞—Ç–µ–º –∏–∑ –±–∞–Ω–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ---
        let remainingDebt = state.targetDebt;
        let paidFromCoins = 0;
        
        // –°–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å—ã–≤–∞–µ–º –∏–∑ –Ω–∞–ª–∏—á–Ω—ã—Ö
        if (state.coins > 0) {
            paidFromCoins = Math.min(state.coins, remainingDebt);
            state.coins -= paidFromCoins;
            remainingDebt -= paidFromCoins;
            addLog(`–°–ø–∏—Å–∞–Ω–æ ${formatNumberWithComma(paidFromCoins)}üí≤ –∏–∑ –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞.`);
        }
        
        // –ï—Å–ª–∏ –¥–æ–ª–≥ –Ω–µ –ø–æ–≥–∞—à–µ–Ω, —Å–ø–∏—Å—ã–≤–∞–µ–º –∏–∑ –±–∞–Ω–∫–∞
        if (remainingDebt > 0) {
            state.bankBalance -= remainingDebt;
            addLog(`–°–ø–∏—Å–∞–Ω–æ ${formatNumberWithComma(remainingDebt)}üí≤ –∏–∑ –±–∞–Ω–∫–∞ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞.`);
        }

        // –ü—Ä–∏–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã
        state.coins += bonusCoins;
        state.tickets += bonusTickets;
        addLog(`–ü–æ–ª—É—á–µ–Ω –±–æ–Ω—É—Å: +${formatNumberWithComma(bonusCoins)}üí≤ –∏ +${formatNumberWithComma(bonusTickets)}üéüÔ∏è!`, 'win');

        // –í –±–∞–Ω–∫ —É—Ö–æ–¥–∏—Ç –≤—Å—è —Å—É–º–º–∞ –¥–æ–ª–≥–∞ (–∏–∑ –Ω–∞–ª–∏—á–Ω—ã—Ö + –∏–∑ –±–∞–Ω–∫–∞)
        const totalPaidToBank = paidFromCoins + (remainingDebt > 0 ? remainingDebt : 0);
        console.log(`[DEBUG][payDebtEarly] –ü–µ—Ä–µ–¥–∞–µ–º –≤ advanceToNextCycle: totalPaidToBank=${totalPaidToBank} (paidFromCoins=${paidFromCoins} + remainingDebt=${remainingDebt})`);
        advanceToNextCycle(bonusCoins, bonusTickets, totalPaidToBank);
    }
    
    function gameOver() {
        state.gameover = true;
        // --- –°–ë–†–û–° –ü–ê–°–°–ò–í–û–ö ---
        state.activePassives = [];
        ui.gameOverScreen.classList.remove('hidden');
        ui.finalRun.textContent = state.run;
        addLog("–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê.", 'loss');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
        if (window.leaderboardsManager) {
            window.leaderboardsManager.onGameOver(state);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è –∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        const now = Date.now();
        const adCooldown = 120000; // 2 –º–∏–Ω—É—Ç—ã
        if (!firstSession && window.adsManager && window.adsManager.isReady() && (now - lastAdShownTime > adCooldown)) {
            setTimeout(() => {
                lastAdShownTime = Date.now();
                window.adsManager.showAdOnEvent('game_over');
            }, 1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Ä–µ–∫–ª–∞–º—ã
        }
        firstSession = false; // –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ gameOver —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–≤–∞—è

        // --- –ê–ù–ò–ú–ê–¶–ò–Ø –ü–ê–î–ï–ù–ò–Ø ---
        const modal = ui.gameOverScreen.querySelector('.modal-content');
        if (modal && !modal.querySelector('#fall-anim-circle')) {
            const h2 = modal.querySelector('h2');
            const anim = document.createElement('img');
            anim.src = 'img/anim_circle.gif';
            anim.alt = '–ü–∞–¥–µ–Ω–∏–µ –≤ —è–º—É';
            anim.id = 'fall-anim-circle';
            anim.style.cssText = 'display:block;margin:0 auto 18px auto;max-width:180px;width:60vw;animation:popup-in 0.7s cubic-bezier(.5,1.8,.7,1)';
            if (h2 && h2.nextSibling) {
                modal.insertBefore(anim, h2.nextSibling);
            } else {
                modal.insertBefore(anim, modal.firstChild);
            }
        }
        // –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ
        ui.btnRestartGame.onclick = function() {
            const anim = ui.gameOverScreen.querySelector('#fall-anim-circle');
            if (anim) anim.remove();
            initGame();
        };
    }
    
    function deposit(amount, isFromEOR = false) {
        if (isNaN(amount) || amount <= 0) return addLog("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.", 'loss');
        if (amount > state.coins) return addLog("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö.", 'loss');
        
        // [NEW] –õ–æ–≥–∏–∫–∞ 'small_investment'
        if(hasItem('small_investment') && state.flags.firstDepositThisRound) {
            const bonus = ALL_ITEMS.find(i => i.id === 'small_investment').effect.on_first_deposit_bonus;
            state.tickets += bonus.tickets;
            addLog(`–ú–∞–ª–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: +${bonus.tickets}üéüÔ∏è –∑–∞ –ø–µ—Ä–≤—ã–π –≤–∫–ª–∞–¥ –≤ —Ä–∞—É–Ω–¥–µ.`, 'win');
            animateInventoryItem('small_investment');
            state.flags.firstDepositThisRound = false;
        }

        let finalAmount = amount;
        let bonusApplied = false;
        if (hasPassive('bankers_friend') && state.flags.firstDepositThisRound) {
            finalAmount = Math.floor(amount * 1.10);
            state.flags.firstDepositThisRound = false; // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–ª–∞–≥
            bonusApplied = true;
        }

        state.coins -= amount;
        state.bankBalance += finalAmount;

        // --- –ü–ê–°–°–ò–í–ö–ê: –ö—Ä—É–ø–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä ---
        if (hasPassive('major_investor') && amount >= 100) {
            state.tickets += 1;
            addLog('–ö—Ä—É–ø–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä: +1üéüÔ∏è –∑–∞ –∫—Ä—É–ø–Ω—ã–π –≤–∫–ª–∞–¥!', 'win');
        }
        
        if (bonusApplied) {
            addLog(`–í–Ω–µ—Å–µ–Ω–æ: ${formatNumberWithComma(amount)}üí≤. –î—Ä—É–≥ –ë–∞–Ω–∫–∏—Ä–∞ –¥–æ–±–∞–≤–∏–ª 10%, –∑–∞—á–∏—Å–ª–µ–Ω–æ: ${formatNumberWithComma(finalAmount)}üí≤.`, 'win');
        } else {
            addLog(`–í–Ω–µ—Å–µ–Ω–æ –≤ –±–∞–Ω–∫: ${formatNumberWithComma(amount)}üí≤.`);
        }

        if (isFromEOR) {
            ui.eorCoins.textContent = `${formatNumberWithComma(state.coins)}üí≤`;
            ui.eorBank.textContent = `${formatNumberWithComma(state.bankBalance)}üí≤`;
        }
        updateUI();
    }

    function rerollShop() {
        let cost = CONFIG.REROLL_COST;
        let bonusApplied = false;
        if (hasPassive('reroll_master') && !state.flags.firstRerollUsed) {
            cost = Math.max(0, cost - 1);
            bonusApplied = true;
        }

        if (state.freeRerolls && state.freeRerolls > 0) {
            state.freeRerolls--;
            populateShop();
            addLog('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ—Ä–æ–ª–ª –º–∞–≥–∞–∑–∏–Ω–∞!', 'win');
            if(hasItem('coupon_book')) animateInventoryItem('coupon_book'); // [NEW] –ê–Ω–∏–º–∞—Ü–∏—è
            if (bonusApplied) state.flags.firstRerollUsed = true;
            if (hasItem('resellers_ticket')) {
                state.tickets += 1;
                addLog('–ë–∏–ª–µ—Ç –ø–µ—Ä–µ–∫—É–ø—â–∏–∫–∞: +1üéüÔ∏è –∑–∞ —Ä–µ—Ä–æ–ª–ª!', 'win');
                animateInventoryItem('resellers_ticket'); // [NEW] –ê–Ω–∏–º–∞—Ü–∏—è
            }
            updateUI();
            return;
        }

        if (state.tickets >= cost) {
            state.tickets -= cost;
            populateShop();
            if (bonusApplied) {
                addLog(`–ú–∞–≥–∞–∑–∏–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —Å–æ —Å–∫–∏–¥–∫–æ–π –∑–∞ ${cost}üéüÔ∏è.`);
                state.flags.firstRerollUsed = true;
            } else {
                addLog(`–ú–∞–≥–∞–∑–∏–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –∑–∞ ${cost}üéüÔ∏è.`);
            }
            if (hasItem('resellers_ticket')) {
                state.tickets += 1;
                addLog('–ë–∏–ª–µ—Ç –ø–µ—Ä–µ–∫—É–ø—â–∏–∫–∞: +1üéüÔ∏è –∑–∞ —Ä–µ—Ä–æ–ª–ª!', 'win');
                animateInventoryItem('resellers_ticket'); // [NEW] –ê–Ω–∏–º–∞—Ü–∏—è
            }
            updateUI();
        } else { addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–ª–æ–Ω–æ–≤.', 'loss'); }
    }

    function buyItem(itemId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º "–ò–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç —Å–ª–æ—Ç–æ–≤"
        const maxSize = getMaxInventorySize();
        const effectiveSlots = getEffectiveEmptySlots();
        const effectiveUsed = maxSize - effectiveSlots;
        const item = state.shop.find(i => i.id === itemId);
        // --- –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —É—Å–∏–ª–∏—Ç–µ–ª—è –≤–∏—à–Ω–∏ ---
    if (item && item.id === 'cherry_value_boost_token') {
        let cost = item.cost;
        let bonusApplied = false;
        let discountLog = [];
        if (hasPassive('shopaholic') && state.flags.firstPurchaseThisRound) {
            cost = Math.max(1, item.cost - 2);
            state.flags.firstPurchaseThisRound = false;
            bonusApplied = true;
            discountLog.push('shopaholic -2');
        }
        if (hasPassive('barterer') && item.cost >= 5) {
            cost = Math.max(1, cost - 1);
            bonusApplied = true;
            discountLog.push('barterer -1');
        }
        if (state.tickets < cost) return addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–ª–æ–Ω–æ–≤.', 'loss');
        state.tickets -= cost;
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
        if (!window.state.cherryBaseValue) window.state.cherryBaseValue = 0;
        window.state.cherryBaseValue += 1;
        if (typeof window.addLog === 'function') {
            window.addLog('üçí –£—Å–∏–ª–∏—Ç–µ–ª—å –í–∏—à–Ω–∏: –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –≤–∏—à–Ω–∏ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 1!', 'win');
        }
        // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
        state.shop = state.shop.filter(i => i.id !== itemId);
        updateUI();
        return;
    }
        // --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –ê–ª—Ç–∞—Ä—è, –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–º—É–ª–µ—Ç–æ–≤ ---
        if (item && item.modifier && item.modifier.id === 'sacrificial_altar') {
            if (!state.inventory || state.inventory.length === 0) {
                addLog('–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –ê–ª—Ç–∞—Ä—ë–º —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥—Ä—É–≥–æ–π –∞–º—É–ª–µ—Ç!', 'loss');
                return;
            }
        }
        // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫—É–ø–∫—É "–Ω–µ–≤–µ—Å–æ–º—ã—Ö" –∞–º—É–ª–µ—Ç–æ–≤ –¥–∞–∂–µ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ ---
        if (
            effectiveUsed >= maxSize &&
            !(item && (item.effect?.ignore_slot_for_empty_bonus || item.modifier?.effect?.ignore_slot_for_empty_bonus))
        ) {
            addLog(`–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –º–∞–∫—Å–∏–º—É–º ${maxSize} –∞–º—É–ª–µ—Ç–æ–≤!`, 'loss');
            return;
        }


        let cost = item.cost;
        let bonusApplied = false;
        let discountLog = [];
        if (hasPassive('shopaholic') && state.flags.firstPurchaseThisRound) {
            cost = Math.max(1, item.cost - 2);
            state.flags.firstPurchaseThisRound = false;
            bonusApplied = true;
            discountLog.push('shopaholic -2');
        }
        // --- –ü–ê–°–°–ò–í–ö–ê: –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –±–∞—Ä—Ç–µ—Ä—É ---
        if (hasPassive('barterer') && item.cost >= 5) {
            cost = Math.max(1, cost - 1);
            bonusApplied = true;
            discountLog.push('barterer -1');
        }

        if (!item || state.tickets < cost) return addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–ª–æ–Ω–æ–≤.', 'loss');
        
        // –°–±—Ä–æ—Å uses –¥–ª—è breakable –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
        if (item.effect && item.effect.luck_chance && item.effect.luck_chance.breakable) {
            item.uses = (item.effect.luck_chance.max_uses || 1) + getBreakableUsesBoost();
        }
        if (item.effect && item.effect.breakable && !item.effect.luck_chance) {
            item.uses = (item.effect.max_uses || 10) + getBreakableUsesBoost();
        }
        // [NEW] –°–±—Ä–æ—Å uses –¥–ª—è wild_clover_next_spin.breakable –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
        if (item.effect && item.effect.wild_clover_next_spin && item.effect.wild_clover_next_spin.breakable) {
            item.uses = (item.effect.wild_clover_next_spin.max_uses || 1) + getBreakableUsesBoost();
        }

        state.tickets -= cost;
        state.inventory.push(item);
        state.shop = state.shop.filter(i => i.id !== itemId);
        
        if (bonusApplied) {
             addLog(`–ö—É–ø–ª–µ–Ω –∞–º—É–ª–µ—Ç: ${item.name} —Å–æ —Å–∫–∏–¥–∫–æ–π –∑–∞ ${cost}üéüÔ∏è!`, 'win');
        } else {
             addLog(`–ö—É–ø–ª–µ–Ω –∞–º—É–ª–µ—Ç: ${item.name}`, 'win');
        }
        if (discountLog.length > 0) {
            console.log(`[DEBUG][buyItem] –°–∫–∏–¥–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã: ${discountLog.join(', ')}. –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: ${cost}`);
        }
        console.log(`[DEBUG][buyItem] –ö—É–ø–ª–µ–Ω ${item.name} –∑–∞ ${cost}üéüÔ∏è. –û—Å—Ç–∞–ª–æ—Å—å tickets: ${state.tickets}`);

        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—É–ø–ª–µ–Ω mimic_chest –∏ —É –Ω–µ–≥–æ –Ω–µ—Ç —Ü–µ–ª–∏, –≤—ã–±–∏—Ä–∞–µ–º —Ü–µ–ª—å
        if (item.id === 'mimic_chest') {
            updateMimicTarget();
        }
        
        // --- [NEW] –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è "–ò–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç —Å–ª–æ—Ç–æ–≤" ---
        if (item.id === 'slot_illusionist') {
            addLog(`üé© –ò–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç —Å–ª–æ—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü—Ä–µ–¥–º–µ—Ç—ã —Å –±–æ–Ω—É—Å–∞–º–∏ –∑–∞ –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –∑–∞–Ω–∏–º–∞—é—Ç –º–µ—Å—Ç–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.`, 'win');
        }
        
        // --- [NEW] –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ "–ù–µ –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ—Å—Ç–æ" ---
        if (item.modifier && item.modifier.id === 'no_slot_usage') {
            addLog(`üì¶ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä "–ù–µ –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ—Å—Ç–æ" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—Å–µ –≤—ã–∏–≥—Ä—ã—à–∏ —É–º–µ–Ω—å—à–µ–Ω—ã –Ω–∞ 10%.`, 'win');
        }
        
        // --- [NEW] –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ä–∞–∑—É ---
        // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–µ—Ä–æ–ª–ª—ã
        let newFreeRerolls = getItemEffectValue('free_reroll_per_round', 0);
        if (newFreeRerolls > 0) {
            state.freeRerolls = newFreeRerolls;
            addLog(`–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ—Ä–æ–ª–ª –º–∞–≥–∞–∑–∏–Ω–∞ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!`, 'win');
            animateInventoryItem(item.id);
        }
        // +–°–ø–∏–Ω—ã –≤ —Ä–∞—É–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∞—Å—ã)
        if (item.effect && item.effect.on_round_start_spins) {
            let newSpins = item.effect.on_round_start_spins;
            state.spinsLeft += newSpins;
            addLog(`+${newSpins} –ø—Ä–æ–∫—Ä—É—Ç(–æ–≤) —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏!`, 'win');
            animateInventoryItem(item.id);
        }
        // +–ú–æ–Ω–µ—Ç—ã –≤ —Ä–∞—É–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ—Ñ–µ)
        let newCoins = getItemEffectValue('on_round_start_coins', 0);
        if (newCoins > 0) {
            state.coins += newCoins;
            addLog(`+${newCoins}üí≤ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏!`, 'win');
            animateInventoryItem(item.id);
        }
        // +–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Å–ø–∏–Ω–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Å–ø–∏–Ω–Ω—ã)
        if (item && item.effect && item.effect.permanent_spins) {
            state.spinsLeft += item.effect.permanent_spins;
            addLog(`+${item.effect.permanent_spins} –ø—Ä–æ–∫—Ä—É—Ç(–æ–≤) —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏!`, 'win');
            animateInventoryItem(item.id);
        }
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è

        // --- –ú–µ—Ö–∞–Ω–∏–∫–∞ –∂–µ—Ä—Ç–≤—ã –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ê–ª—Ç–∞—Ä—è ---
        if (item.modifier && item.modifier.id === 'sacrificial_altar') {
            const candidates = state.inventory.filter(i => i !== item);
            if (candidates.length > 0) {
                const idx = Math.floor(Math.random() * candidates.length);
                const victim = candidates[idx];
                removeAmulet(victim.id);
                addLog(`–ê–ª—Ç–∞—Ä—å: –∞–º—É–ª–µ—Ç "${victim.name}" –±—ã–ª –ø—Ä–∏–Ω–µ—Å—ë–Ω –≤ –∂–µ—Ä—Ç–≤—É!`, 'loss');
            }
        }

        if (ui.planningModal.classList.contains('hidden')) {
            updateUI();
        } else {
            ui.planningTickets.textContent = state.tickets;
            renderPlanningShop();
            renderPlanningInventory();
            updateUI();
        }
    }
    
    function formatNumberWithComma(num) {
        if (typeof num !== 'number') return num;
        return num.toLocaleString('en-US');
    }
    
    function updateUI() {
        if (!state || Object.keys(state).length === 0) return;
        ui.statRun.textContent = state.run;
        ui.statTurn.textContent = `${state.turn} / 3`;
        ui.statDebt.textContent = `${formatNumberWithComma(state.targetDebt)}üí≤`;
        if (ui.statDebtStart) ui.statDebtStart.textContent = `${formatNumberWithComma(state.targetDebt)}üí≤`;
        
        // [FIX] –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º HTML, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        ui.statCoins.innerHTML = `<span>${formatNumberWithComma(state.coins)}üí≤</span>`;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –º–æ–Ω–µ—Ç
        if (ui.statCoins && typeof lastKnownCoins !== 'undefined' && lastKnownCoins !== state.coins) {
            const change = state.coins - lastKnownCoins;
            console.log(`[DEBUG] –ê–Ω–∏–º–∞—Ü–∏—è –º–æ–Ω–µ—Ç: ${lastKnownCoins} -> ${state.coins}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${change}`);
            showCoinChangePopup(change);
        }
        lastKnownCoins = state.coins;
        
        ui.bankBalance.textContent = `${formatNumberWithComma(state.bankBalance)}üí≤`;
        
        // [FIX] –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º HTML, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        // ui.statTickets.innerHTML = `<span>${formatNumberWithComma(state.tickets)}üéüÔ∏è</span>`;
        const shopTickets = document.querySelector('.shop-tickets-info #stat-tickets');
        if (shopTickets) {
            shopTickets.innerHTML = `<span>${formatNumberWithComma(state.tickets)}üéüÔ∏è</span>`;
        }
        // –ê–Ω–∏–º–∞—Ü–∏—è —Ç–∞–ª–æ–Ω–æ–≤ (—Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞)
        if (shopTickets && typeof lastKnownTickets !== 'undefined' && lastKnownTickets !== state.tickets) {
            const change = state.tickets - lastKnownTickets;
            console.log(`[DEBUG] –ê–Ω–∏–º–∞—Ü–∏—è —Ç–∞–ª–æ–Ω–æ–≤: ${lastKnownTickets} -> ${state.tickets}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${change}`);
            showTicketChangePopup(change);
        }
        lastKnownTickets = state.tickets;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–æ–≤, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏–¥–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—è
        if (!ui.spinsLeft.querySelector('.spins-counter')) {
            ui.spinsLeft.textContent = state.spinsLeft;
        }
        
        const baseLuck = getItemEffectValue('luck', 0) + (state.permanentLuckBonus || 0);
        const debtLuck = getItemEffectValue('per_run_bonus.luck', 0, 'sum') * state.run;

        // [NEW] –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –æ—Ç "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–∞ —Ç–∞–ª–æ–Ω–æ–≤"
        let ticketLuck = 0;
        if (hasItem('ticket_hoarder')) {
            const effect = ALL_ITEMS.find(i => i.id === 'ticket_hoarder').effect.per_ticket_luck;
            ticketLuck = Math.floor(state.tickets / effect.per) * effect.luck;
        }

        // [FIX] –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –æ—Ç "–ì–æ—Ä–¥–æ—Å—Ç—å –±–∞—Ä–∞—Ö–æ–ª—å—â–∏–∫–∞"
        let hoarderLuck = getHoarderPrideBonus();

        // --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —É–¥–∞—á–∏ –æ—Ç –≤—Å–µ—Ö temporary_luck_on_spin ---
        let tempLuckFromItems = 0;
        let tempLuckDetails = [];
        if (Array.isArray(state.grid)) {
            state.inventory.forEach(item => {
                if (item.effect?.temporary_luck_on_spin) {
                    const symbolId = item.effect.temporary_luck_on_spin;
                    const count = state.grid.filter(s => s && s.id === symbolId).length;
                    if (count > 0) {
                        tempLuckFromItems += count;
                        tempLuckDetails.push({ name: item.name, count });
                    }
                }
                // [NEW] conditional_luck: –µ—Å–ª–∏ –Ω–∞ –ø–æ–ª–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª, –¥–∞—ë–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å
                if (item.effect?.conditional_luck) {
                    const { symbol, bonus } = item.effect.conditional_luck;
                    const found = state.grid.some(s => s && s.id === symbol);
                    if (found) {
                        tempLuckFromItems += bonus;
                        addLog(`${item.name}: +${bonus} –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —É–¥–∞—á–µ (—É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ).`, 'win');
                        animateInventoryItem(item.id);
                    }
                }
            });
        }
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
        let luckText = `${baseLuck}`;
        if (debtLuck > 0) luckText += ` (+${formatNumberWithComma(debtLuck)} –æ—Ç –¥–æ–ª–≥–∞)`;
        if (ticketLuck > 0) luckText += ` (+${ticketLuck} –æ—Ç —Ç–∞–ª–æ–Ω–æ–≤)`;
        if (state.tempLuck > 0) luckText += ` (+${formatNumberWithComma(state.tempLuck)})`;
        if (state.cherryLuckBonus > 0) luckText += ` (+${state.cherryLuckBonus} –í–∏—à–Ω—ë–≤–∞—è —É–¥–∞—á–∞)`;
        if (hoarderLuck > 0) luckText += ` (+${hoarderLuck} –∑–∞ —Å–ª–æ—Ç—ã)`;
        if (hasItem('luck_battery')) {
            state.luckBatteryCharge = state.luckBatteryCharge || 0;
            if (state.luckBatteryCharge > 0) {
                luckText += ` (+${state.luckBatteryCharge} –±–∞—Ç–∞—Ä–µ—è —É–¥–∞—á–∏)`;
            }
        }
        // --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —É–¥–∞—á–∏ –æ—Ç –≤—Å–µ—Ö temporary_luck_on_spin ---
        if (tempLuckFromItems > 0) {
            luckText += ` (+${tempLuckFromItems} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤)`;
        }
        // [NEW] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–Ω—É—Å –æ—Ç –®–ª—è–ø—ã —É–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω —Å—Ä–∞–±–æ—Ç–∞–ª
        if (hasItem('lucky_hat')) {
            const effect = ALL_ITEMS.find(i => i.id === 'lucky_hat').effect.every_n_spin_luck;
            if ((state.roundSpinsMade + 1) % effect.n === 0) {
                luckText += ` (+${effect.luck} –®–ª—è–ø–∞ —É–¥–∞—á–∏)`;
            }
        }
        ui.statLuck.textContent = luckText;
        
        let cherryLuckInfo = document.getElementById('cherry-luck-info');
        if (cherryLuckInfo) cherryLuckInfo.remove();
        ui.atmInterestRate.textContent = (state.baseInterestRate * 100).toFixed(0);
        
        let bonus = state.inventory.reduce((acc, item) => acc + (item.effect?.interest_rate_bonus || 0), 0);
        let bonusText = '';
        if (bonus > 0) bonusText = ` <span style="color:var(--highlight-color); font-size:12px;">(+${(bonus*100).toFixed(0)}% –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤)</span>`;
        let percent = state.baseInterestRate;
        let bank = state.bankBalance;
        let profit = Math.floor(bank * percent);
        let profitText = `<div style='font-size:13px; margin-top:4px;'>–°–ª–µ–¥. –ø—Ä–æ—Ü–µ–Ω—Ç: <b style='color:var(--money-color)'>+${formatNumberWithComma(profit)}üí≤</b> (${(percent*100).toFixed(0)}%${bonusText})</div>`;
        let infoBlock = document.getElementById('interest-info-block');
        if (!infoBlock) {
            infoBlock = document.createElement('div');
            infoBlock.id = 'interest-info-block';
            ui.atmInterestRate.parentElement.parentElement.appendChild(infoBlock);
        }
        infoBlock.innerHTML = profitText;
        
        if (state.turn >= 3) {
            ui.earlyPayoffSection.style.display = 'none';
        } else {
            ui.earlyPayoffSection.style.display = 'block';
            const totalMoney = state.coins + state.bankBalance;
            const canAfford = totalMoney >= state.targetDebt;
            ui.btnPayDebtEarly.disabled = !canAfford;

            let bonusInfo = '';
            if (state.turn === 1) {
                const bCoins = Math.floor(state.targetDebt * 0.40);
                const bTickets = 7 + state.run;
                bonusInfo = `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–∞—É–Ω–¥ 1: <b style="color:var(--money-color)">+${formatNumberWithComma(bCoins)}üí≤</b> –∏ <b style="color:var(--ticket-color)">+${formatNumberWithComma(bTickets)}üéüÔ∏è</b>`;
            } else if (state.turn === 2) {
                const bCoins = Math.floor(state.targetDebt * 0.20);
                const bTickets = 4 + state.run;
                bonusInfo = `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–∞—É–Ω–¥ 2: <b style="color:var(--money-color)">+${formatNumberWithComma(bCoins)}üí≤</b> –∏ <b style="color:var(--ticket-color)">+${formatNumberWithComma(bTickets)}üéüÔ∏è</b>`;
            }
            ui.earlyPayoffBonusInfo.innerHTML = bonusInfo;
        }

        //ui.btnEndTurn.disabled = state.isSpinning || state.spinsLeft > 0;

        let rerollCost = CONFIG.REROLL_COST;
        if (hasPassive('reroll_master') && !state.flags.firstRerollUsed) {
            rerollCost = Math.max(0, rerollCost - 1);
        }
        // [FIX] –ö–û–†–†–ï–ö–¢–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ë–ï–°–ü–õ–ê–¢–ù–´–• –†–ï–†–û–õ–õ–û–í
        if (state.freeRerolls > 0) {
            ui.btnRerollShop.textContent = `–û–±–Ω–æ–≤–∏—Ç—å –∞–≥–∞–∑–∏–Ω (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: ${state.freeRerolls})`;
        } else {
            ui.btnRerollShop.textContent = `–û–±–Ω–æ–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω (${rerollCost}üéüÔ∏è)`;
        }
        renderInventory(); 
        renderShop();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        updateWeightedSymbols();

        // --- –ü–û–î–°–í–ï–¢–ö–ê –î–ñ–ï–ö–ü–û–¢-–Ø–ß–ï–ô–ö–ò (–°–ï–†–î–¶–ï –ê–í–¢–û–ú–ê–¢–ê) ---
        const cells = ui.slotMachine.querySelectorAll('.slot-cell');
        cells.forEach(cell => cell.classList.remove('jackpot-cell-heart'));
        if (hasItem('slot_machine_heart') && typeof state.jackpotCellIndex === 'number') {
            const jackpotCell = cells[state.jackpotCellIndex];
            if (jackpotCell) jackpotCell.classList.add('jackpot-cell-heart');
        }
    }
    
    function renderGrid(isInitialSetup = false) {
        if (!isInitialSetup) return;

        ui.slotMachine.innerHTML = '';
        for (let i = 0; i < CONFIG.ROWS * CONFIG.COLS; i++) {
            const cell = document.createElement('div');
            cell.className = 'slot-cell';
            
            const reel = document.createElement('div');
            reel.className = 'reel';
            cell.appendChild(reel);
            
            ui.slotMachine.appendChild(cell);
        }
        updateReels(true);
    }

    function updateReels(isInitial = false) {
        const reels = ui.slotMachine.querySelectorAll('.reel');
        const finalGrid = state.grid;

        reels.forEach((reel, i) => {
            reel.innerHTML = '';
            
            const reelSymbols = [];
            for (let j = 0; j < 19; j++) {
                reelSymbols.push(weightedSymbols[Math.floor(Math.random() * weightedSymbols.length)]);
            }
            reelSymbols.push(finalGrid[i]);

            reelSymbols.forEach(symbol => {
                if (!symbol) { 
                    console.error("Attempted to render an undefined symbol. Grid:", finalGrid, "Weighted Symbols:", weightedSymbols);
                    return; 
                }
                const symbolDiv = document.createElement('div');
                symbolDiv.className = 'symbol';
                symbolDiv.textContent = symbol.graphic;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–ª–æ—Ç–æ–π –∫–ª–∞—Å—Å –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –∑–æ–ª–æ—Ç–æ–π
                if (symbol.isGolden) {
                    symbolDiv.classList.add('golden');
                }
                
                reel.appendChild(symbolDiv); 
            });

            if (isInitial) {
                reel.style.transition = 'none';
                reel.style.transform = `translateY(-95%)`;
            }
        });
    }
    
    async function runSpinAnimation() {
        updateReels(false);

        const reels = ui.slotMachine.querySelectorAll('.reel');
        const promises = [];
        
        reels.forEach((reel, i) => {
            reel.style.transition = 'none';
            reel.style.transform = 'translateY(0)';
            reel.offsetHeight;

            const delay = (i % CONFIG.COLS) * 100;
            promises.push(new Promise(resolve => {
                setTimeout(() => {
                    reel.style.transition = `transform ${CONFIG.SPIN_ANIMATION_TIME / 1000}s cubic-bezier(0.25, 0.1, 0.25, 1)`;
                    reel.style.transform = `translateY(-95%)`;
                    reel.addEventListener('transitionend', resolve, { once: true });
                }, delay);
            }));
        });
        
        await Promise.all(promises);
        await new Promise(res => setTimeout(res, 200));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–æ–ª–æ—Ç—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        updateGoldenSymbolsDisplay();
    }

    function createItemElement(item, purchaseCallback) {
        const itemDiv = document.createElement('div');
        itemDiv.className = `item rarity-${item.rarity}`;
        
        const activatableEffects = [
            'on_spin_bonus', 'on_round_start_coins', 'on_round_start_spins', 'on_loss_bonus',
            'on_reroll_bonus', 'on_spin_luck_bonus', 'temporary_luck_on_spin',
            'symbol_win_bonus', 'on_win_streak_bonus', 'on_first_deposit_bonus',
            'on_spin_count_bonus', 'luck_chance', 'on_spin_sacrifice', 'guarantee_symbol', 
            'sync_cells', 'on_last_spin_bonus', 'on_round_end_bonus', 'per_empty_slot_bonus',
            'winMultiplier', 'odd_round_multiplier'
        ];
        let isActivatable = typeof item.on_spin_bonus === 'function';
        if (!isActivatable && item.effect) {
            isActivatable = activatableEffects.some(key => item.effect.hasOwnProperty(key));
        }
        if (isActivatable) {
            itemDiv.classList.add('animated-item');
        }

        let currentCost = item.cost;
        let oldCost = null;
        // –°–∫–∏–¥–∫–∞ –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º shop_discount
        let shopDiscount = 0;
        state.inventory.forEach(invItem => {
            if (invItem.effect?.shop_discount) {
                shopDiscount += invItem.effect.shop_discount;
            }
        });
        if (shopDiscount > 0) {
            currentCost = Math.max(1, currentCost - shopDiscount);
        }
        // –°–∫–∏–¥–∫–∞ –æ—Ç –ø–∞—Å—Å–∏–≤–∫–∏ "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –±–∞—Ä—Ç–µ—Ä—É"
        if (purchaseCallback && hasPassive('barterer') && item.cost >= 5) {
            currentCost = Math.max(1, currentCost - 1);
        }
        // –°–∫–∏–¥–∫–∞ –æ—Ç –ø–∞—Å—Å–∏–≤–∫–∏ "–®–æ–ø–æ–≥–æ–ª–∏–∫" (—Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É –≤ —Ä–∞—É–Ω–¥–µ)
        if (purchaseCallback && hasPassive('shopaholic') && state.flags.firstPurchaseThisRound) {
            currentCost = Math.max(1, currentCost - 2);
        }
        // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –∑–∞–ø–æ–º–Ω–∏–º —Å—Ç–∞—Ä—É—é –¥–ª—è –∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
        if (currentCost < item.cost) {
            oldCost = item.cost;
        }

        if (purchaseCallback) {
            itemDiv.onclick = () => purchaseCallback(item.id);
            // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫—É–ø–∫—É "–Ω–µ–≤–µ—Å–æ–º—ã—Ö" –∞–º—É–ª–µ—Ç–æ–≤ –¥–∞–∂–µ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ ---
            const maxSize = getMaxInventorySize();
            const effectiveSlots = getEffectiveEmptySlots();
            const effectiveUsed = maxSize - effectiveSlots;
            const isNoSlot = item.effect?.ignore_slot_for_empty_bonus || item.modifier?.effect?.ignore_slot_for_empty_bonus;
            if (state.tickets < currentCost || (effectiveUsed >= maxSize && !isNoSlot)) {
                itemDiv.style.opacity = '0.5';
                itemDiv.style.cursor = 'not-allowed';
            }
        } else {
            itemDiv.style.cursor = 'pointer';
            itemDiv.onclick = () => showAmuletPopup(item);
        }

        // --- [NEW] –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ ---
        if (purchaseCallback) {
            let tooltip = null;
            let tooltipTimeout = null;
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è tooltip
            const hideTooltip = () => {
                if (tooltipTimeout) {
                    clearTimeout(tooltipTimeout);
                    tooltipTimeout = null;
                }
                if (tooltip) {
                    tooltip.classList.remove('show');
                    setTimeout(() => {
                        if (tooltip && tooltip.parentNode) {
                            tooltip.parentNode.removeChild(tooltip);
                        }
                        tooltip = null;
                    }, 200);
                }
            };
            
            itemDiv.addEventListener('mouseenter', (e) => {
                // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—É–ª—Ç–∏–ø—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
                hideAllTooltips();
                
                // –°–æ–∑–¥–∞–µ–º tooltip —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                if (!tooltip) {
                    try {
                        tooltip = createItemTooltip(item, currentCost, oldCost);
                        if (tooltip) {
                            document.body.appendChild(tooltip);
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–ª—Ç–∏–ø–∞:', error);
                        tooltip = null;
                        return;
                    }
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º tooltip —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                tooltipTimeout = setTimeout(() => {
                    if (tooltip && tooltip.parentNode) {
                        tooltip.classList.add('show');
                    }
                }, 300);
                
                // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º tooltip
                if (tooltip) {
                    positionTooltip(tooltip, e);
                }
            });
            
            itemDiv.addEventListener('mouseleave', hideTooltip);
            
            // –°–∫—Ä—ã–≤–∞–µ–º tooltip –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç
            const originalOnClick = itemDiv.onclick;
            itemDiv.onclick = (e) => {
                hideTooltip();
                if (originalOnClick) {
                    originalOnClick.call(itemDiv, e);
                }
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ç—É–ª—Ç–∏–ø–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
            const hideOnScrollOrResize = () => {
                if (tooltip && tooltip.parentNode) {
                    hideTooltip();
                }
            };
            
            window.addEventListener('scroll', hideOnScrollOrResize, { passive: true });
            window.addEventListener('resize', hideOnScrollOrResize, { passive: true });
            
            // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
            const observer = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                    if (mutation.type === 'childList' && !document.contains(itemDiv)) {
                        hideTooltip();
                        window.removeEventListener('scroll', hideOnScrollOrResize);
                        window.removeEventListener('resize', hideOnScrollOrResize);
                        observer.disconnect();
                    }
                });
            });
            
            observer.observe(document.body, { childList: true, subtree: true });
        }

        const thumbnailDiv = document.createElement('div');
        thumbnailDiv.className = 'item-thumbnail';
        const thumbnailValue = item.thumbnail || '?';
        if (thumbnailValue.endsWith('.png') || thumbnailValue.endsWith('.jpg') || thumbnailValue.endsWith('.gif')) {
            thumbnailDiv.innerHTML = `<img src="img/${thumbnailValue}" alt="${item.name}" style="width:100%; height:100%; object-fit:cover;">`;
        } else {
            thumbnailDiv.textContent = thumbnailValue;
            // –ï—Å–ª–∏ –≤ —ç–º–æ–¥–∑–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (countEmojis(thumbnailValue.trim()) > 1) {
                thumbnailDiv.classList.add('multiple-emoji');
            }
        }
        
        

        const infoDiv = document.createElement('div');
        infoDiv.className = 'item-info';
        
        const headerDiv = document.createElement('div');
        headerDiv.className = 'item-header';
        
        const nameSpan = document.createElement('span');
        nameSpan.className = 'item-name';
        nameSpan.textContent = item.name;
        
        const descP = document.createElement('p');
        descP.className = 'item-desc';
        descP.innerHTML = item.desc;
        
        // –¢–µ–ø–µ—Ä—å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã!
        if (item.modifier) {
            if (item.modifier.divine) {
                thumbnailDiv.classList.add('divine-modifier');
                nameSpan.classList.add('divine-modifier');
                
            } else {
                thumbnailDiv.classList.add('modified');
                nameSpan.classList.add('modified');
                if (item.isPenalty) {
                    thumbnailDiv.classList.add('modifier-bad');
                    nameSpan.classList.add('modifier-bad');
                }
            }
        }
        
        headerDiv.appendChild(nameSpan);

        if (purchaseCallback && item.cost) {
            const costSpan = document.createElement('span');
            costSpan.className = 'item-cost';
            costSpan.textContent = `${currentCost}üéüÔ∏è`;
            if (oldCost && currentCost < oldCost) {
                costSpan.innerHTML += ` <s style="opacity:0.6">${oldCost}üéüÔ∏è`;
            }
            headerDiv.appendChild(costSpan);
        }
        
        infoDiv.appendChild(headerDiv);
        infoDiv.appendChild(descP);

        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –±–æ–Ω—É—Å–æ–≤ per_run_bonus
        if (item.effect?.per_run_bonus) {
            const run = window.state?.run || 1;
            const bonusLines = [];
            for (const [key, value] of Object.entries(item.effect.per_run_bonus)) {
                if (typeof value === 'number') {
                    bonusLines.push(`<span style='color:#2196f3;'>–°–µ–π—á–∞—Å: +${value * run}</span>`);
                } else if (typeof value === 'object' && value !== null) {
                    if (typeof value.bonus === 'number') {
                        bonusLines.push(`<span style='color:#2196f3;'>–°–µ–π—á–∞—Å: +${value.bonus * run}</span>`);
                    } else {
                        bonusLines.push(`<span style='color:#aaa;'>${JSON.stringify(value)}</span>`);
                    }
                }
            }
            if (bonusLines.length > 0) {
                const bonusDiv = document.createElement('div');
                bonusDiv.className = 'item-bonus-inline';
                bonusDiv.style.cssText = 'font-size:12px; margin-top:2px;';
                bonusDiv.innerHTML = bonusLines.join('<br>');
                infoDiv.appendChild(bonusDiv);
            }
        }

        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ uses/max_uses –¥–ª—è –≤—Å–µ—Ö breakable –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        let showUses = false;
        let uses = null;
        let maxUses = null;
        if (typeof item.uses !== 'undefined' && (item.effect?.max_uses || item.effect?.luck_chance?.max_uses)) {
            showUses = true;
            uses = item.uses;
            maxUses = item.effect.max_uses || item.effect.luck_chance?.max_uses;
        } else if (item.effect?.luck_chance?.breakable) {
            showUses = true;
            uses = item.uses !== undefined ? item.uses : (item.effect.luck_chance.max_uses || 10);
            maxUses = item.effect.luck_chance.max_uses || 10;
        } else if (item.effect?.breakable && item.effect?.max_uses) {
            showUses = true;
            uses = item.uses !== undefined ? item.uses : item.effect.max_uses;
            maxUses = item.effect.max_uses;
        }
        if (showUses && maxUses) {
            const usesSpan = document.createElement('span');
            usesSpan.style.cssText = 'color:#ffab40; font-size:11px; margin-top: auto;';
            usesSpan.textContent = `(–ò—Å–ø: ${uses}/${maxUses})`;
            infoDiv.appendChild(usesSpan);
        }

        if(item.id === 'mimic_chest') {
            let mimicInfoText = '';
            if(item.effect?.mimic?.target) {
                const target = ALL_ITEMS.find(i => i.id === item.effect.mimic.target);
                mimicInfoText = target ? `–ö–æ–ø–∏—Ä—É–µ—Ç: <b>${target.name}</b>` : `–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
            } else {
                mimicInfoText = `<i>–ù–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>`;
            }
            const mimicDiv = document.createElement('div');
            mimicDiv.style.cssText = 'color:#b388ff; font-size:11px; margin-top: auto;';
            mimicDiv.innerHTML = mimicInfoText;
            infoDiv.appendChild(mimicDiv);
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        if (item.modifier) {
            const modifierDiv = document.createElement('div');
            if (item.modifier.divine) {
                modifierDiv.style.cssText = 'color:#ffd700; font-size:11px; margin-top: auto; font-weight: bold; border-top: 1px solid #ffd700; padding-top: 4px;';
                modifierDiv.innerHTML = `üî± ${item.modifier.name}`;
            } else {
                modifierDiv.style.cssText = 'color:#4caf50; font-size:11px; margin-top: auto; font-weight: bold; border-top: 1px solid #4caf50; padding-top: 4px;';
                modifierDiv.innerHTML = `‚ú® ${item.modifier.name}`;
            }
            infoDiv.appendChild(modifierDiv);
        }

        if(item.id === 'scrap_metal') {
            const piggyDiv = document.createElement('div');
            piggyDiv.className = 'piggybank-amount';
            piggyDiv.style.cssText = 'color:#ffab40; font-size:13px; margin-top:2px; font-weight:bold;';
            piggyDiv.textContent = `–í—Å–µ–≥–æ: ${formatNumberWithComma(state.piggyBank)}üí≤`;
            infoDiv.appendChild(piggyDiv);
        }

        itemDiv.appendChild(thumbnailDiv);
        itemDiv.appendChild(infoDiv);

        itemDiv.dataset.itemId = item.id;

        return itemDiv;
    }

    function renderShop() {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç—É–ª—Ç–∏–ø—ã –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–∞–≥–∞–∑–∏–Ω–∞
        hideAllTooltips();
        
        ui.shopItems.innerHTML = '';
        if (state.shop.length === 0) {
            ui.shopItems.innerHTML = '<p style="text-align:center; color: #777;">–ü—É—Å—Ç–æ</p>';
        }
        state.shop.forEach(item => {
            const itemDiv = createItemElement(item, buyItem);
            ui.shopItems.appendChild(itemDiv);
        });
    }

    let amuletPopup = null;
    function showAmuletPopup(item) {
        if (amuletPopup) amuletPopup.remove();
        amuletPopup = document.createElement('div');
        amuletPopup.className = 'amulet-popup-overlay';
        
        const thumbnailValue = item.thumbnail || '?';
        let thumbnailHTML = '';
        if (thumbnailValue.endsWith('.png') || thumbnailValue.endsWith('.jpg') || thumbnailValue.endsWith('.gif')) {
            thumbnailHTML = `<img src="img/${thumbnailValue}" alt="${item.name}" style="max-width: 100%; max-height: 100%; object-fit: contain;">`;
        } else {
            thumbnailHTML = thumbnailValue;
        }
        
        let modifierHTML = '';
        if (item.modifier) {
            const isPenalty = item.isPenalty || false;
            const modifierIcon = isPenalty ? 'üíÄ' : (item.modifier.divine ? 'üî±' : '‚ú®');
            const modifierColor = isPenalty ? '#e53935' : '#4caf50';
            const modifierBgColor = isPenalty ? 'rgba(229, 57, 53, 0.1)' : 'rgba(76, 175, 80, 0.1)';
            const modifierBorderColor = isPenalty ? '#e53935' : '#4caf50';
            
            modifierHTML = `<div style="color:${modifierColor}; font-weight: bold; margin-top: 10px; padding: 8px; background: ${modifierBgColor}; border-radius: 4px; border-left: 3px solid ${modifierBorderColor};">
                ${modifierIcon} –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${item.modifier.name}<br>
                <span style="font-weight: normal; font-size: 0.9em;">${item.modifier.desc}</span>
            </div>`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ–ª–∏–≤–∞—é—â–µ–≥–æ—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        const titleClass = item.modifier
            ? (item.modifier.divine
                ? 'amulet-popup-title divine-modifier'
                : `amulet-popup-title modified${item.isPenalty ? ' modifier-bad' : ''}`)
            : 'amulet-popup-title';
        amuletPopup.innerHTML = `
            <div class="amulet-popup-card">
                <div class="amulet-popup-thumbnail">${thumbnailHTML}</div>
                <div class="${titleClass}">${item.name}</div>
                <div class="amulet-popup-desc">${item.desc}</div>
                ${modifierHTML}
                <div style="margin-top: 20px;">
                    <button class="amulet-popup-remove">–í—ã–∫–∏–Ω—É—Ç—å</button>
                    <button class="amulet-popup-close">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        `;
        document.body.appendChild(amuletPopup);
        amuletPopup.querySelector('.amulet-popup-close').onclick = () => amuletPopup.remove();
        amuletPopup.onclick = (e) => { if (e.target === amuletPopup) amuletPopup.remove(); };
        amuletPopup.querySelector('.amulet-popup-remove').onclick = () => {
            removeAmulet(item.id);
            amuletPopup.remove();
        };

        if(item.id === 'scrap_metal') {
            const piggyHTML = `<div style='color:#ffab40; font-size:1.1em; margin:8px 0 0 0; font-weight:bold;'>–í—Å–µ–≥–æ: ${formatNumberWithComma(state.piggyBank)}üí≤</div>`;
            amuletPopup.querySelector('.amulet-popup-card').insertAdjacentHTML('beforeend', piggyHTML);
        }
    }
    function removeAmulet(itemId) {
        const idx = state.inventory.findIndex(i => i.id === itemId);
        if (idx !== -1) {
            const [removed] = state.inventory.splice(idx, 1);
            // --- –í–æ–∑–≤—Ä–∞—Ç divine-–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤ –ø—É–ª ---
            if (removed.modifier && removed.modifier.divine && typeof window.releaseDivineModifier === 'function') {
                window.releaseDivineModifier(removed.modifier.id);
            }
            if (!ALL_ITEMS.some(i => i.id === removed.id)) {
                ALL_ITEMS.push(removed);
            }
            let refund = 0;
            if (removed.rarity === 'rare') refund = 2;
            if (removed.rarity === 'legendary') refund = 3;
            if (refund > 0) {
                state.tickets += refund;
                addLog(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ ${refund} üéüÔ∏è –∑–∞ –≤—ã–∫–∏–Ω—É—Ç—ã–π –∞–º—É–ª–µ—Ç (${removed.rarity === 'rare' ? '—Ä–µ–¥–∫–∏–π' : '–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'}).`, 'win');
            }
            addLog(`–ê–º—É–ª–µ—Ç "${removed.name}" –≤—ã–∫–∏–Ω—É—Ç –∏ —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ.`, 'loss');
            // updateMimicTarget(); // –£–ë–†–ê–ù–û!

            // [FIX] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI —Ä–µ–∂–∏–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
            if (ui.planningModal && !ui.planningModal.classList.contains('hidden')) {
                ui.planningTickets.textContent = state.tickets;
                renderPlanningInventory();
                renderPlanningShop();
            }

            updateUI();
        } else {
            if (typeof console !== 'undefined') {
                console.warn('[DEBUG][removeAmulet] –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç:', itemId, '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:', state.inventory.map(i=>i.id));
            }
        }
    }

    function renderInventory() {
        ui.inventoryItems.innerHTML = '';
        let counter = document.getElementById('inventory-counter');
        if (!counter) {
            counter = document.createElement('div');
            counter.id = 'inventory-counter';
            counter.style.textAlign = 'right';
            counter.style.fontSize = '13px';
            counter.style.marginBottom = '4px';
            ui.inventoryItems.parentElement.insertBefore(counter, ui.inventoryItems);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º "–ò–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç —Å–ª–æ—Ç–æ–≤"
        const maxSize = getMaxInventorySize();
        const effectiveSlots = getEffectiveEmptySlots();
        const effectiveUsed = maxSize - effectiveSlots;
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        const modifiedCount = state.inventory.filter(item => item.modifier && !item.removed).length;
        
        // --- –ù–æ–≤—ã–π –∫–æ–¥ –¥–ª—è —Ç—É–ª—Ç–∏–ø–∞ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ---
        // –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        counter.innerHTML = '';
        let baseText = `–ê–º—É–ª–µ—Ç—ã: ${effectiveUsed} / ${maxSize}`;
        if (modifiedCount > 0) {
            baseText += ' | ';
        }
        counter.appendChild(document.createTextNode(baseText));
        
        if (modifiedCount >= 4) {
            // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º "–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: N ‚ö†Ô∏è" –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π span
            const dangerSpan = document.createElement('span');
            dangerSpan.className = 'danger-tooltip-label';
            dangerSpan.style.cursor = 'pointer';
            dangerSpan.style.marginLeft = '2px';
            dangerSpan.innerHTML = `–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${modifiedCount} <span class="danger-tooltip-icon">‚ö†Ô∏è</span>`;
            counter.appendChild(dangerSpan);
            counter.style.color = 'var(--danger-color)';
            counter.style.fontWeight = 'bold';
            counter.style.textShadow = '0 0 6px var(--danger-color)';

            // –¢—É–ª—Ç–∏–ø –∫–∞–∫ —É –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –Ω–æ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
            dangerSpan.addEventListener('mouseenter', function (e) {
                hideAllTooltips();
                const tooltip = document.createElement('div');
                tooltip.className = 'item-tooltip';
                tooltip.innerHTML = `
                    <div class=\"item-tooltip-title modifier-bad\" style=\"font-size:1.1em;\">‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤</div>
                    <div class=\"item-tooltip-desc\">–ï—Å–ª–∏ —É –≤–∞—Å 4 –∏–ª–∏ –±–æ–ª—å—à–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–º—É–ª–µ—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —à—Ç—Ä–∞—Ñ–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –Ω–æ–≤—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –±—É–¥—É—Ç —á–∞—â–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏, –∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –Ω–∞–±–∏—Ä–∞—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!</div>
                `;
                document.body.appendChild(tooltip);
                positionTooltip(tooltip, e);
                setTimeout(() => tooltip.classList.add('show'), 10);
                dangerSpan._tooltip = tooltip;
            });
            dangerSpan.addEventListener('mousemove', function (e) {
                if (dangerSpan._tooltip) positionTooltip(dangerSpan._tooltip, e);
            });
            dangerSpan.addEventListener('mouseleave', function () {
                hideAllTooltips();
                dangerSpan._tooltip = null;
            });
        } else if (modifiedCount > 0) {
            // –î–ª—è 1-3 –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            const modSpan = document.createElement('span');
            modSpan.textContent = `–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${modifiedCount}`;
            if (modifiedCount >= 3) {
                modSpan.style.color = '#ffaa00';
                modSpan.style.fontWeight = 'bold';
            }
            counter.appendChild(modSpan);
        }
        
        if (effectiveUsed >= maxSize) {
            counter.style.color = 'var(--danger-color)';
            counter.style.fontWeight = 'bold';
            counter.style.textShadow = '0 0 6px var(--danger-color)';
        } else if (modifiedCount < 3) {
            counter.style.color = '';
            counter.style.fontWeight = '';
            counter.style.textShadow = '';
        }
        if (state.inventory.length === 0) {
            ui.inventoryItems.innerHTML = '<p style="text-align:center; color: #777; grid-column: 1 / -1;">–ü—É—Å—Ç–æ</p>';
        }
        state.inventory.forEach(item => {
            const itemDiv = createItemElement(item, null);
            ui.inventoryItems.appendChild(itemDiv);
        });
    }

    function openPlanningMode() {
        ui.spinPurchaseModal.classList.add('hidden');
        ui.planningModal.classList.remove('hidden');
        ui.planningTickets.textContent = state.tickets;
        if (ui.btnPlanningReroll) {
            let rerollCost = CONFIG.REROLL_COST;
            if (hasPassive('reroll_master') && !state.flags.firstRerollUsed) {
                rerollCost = Math.max(0, rerollCost - 1);
            }
            if (state.freeRerolls > 0) {
                ui.btnPlanningReroll.textContent = `Reroll (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: ${state.freeRerolls})`;
            } else {
                ui.btnPlanningReroll.textContent = `Reroll (${rerollCost}üéüÔ∏è)`;
            }
        }
        renderPlanningShop();
        renderPlanningInventory();
    }

    function closePlanningMode() {
        ui.planningModal.classList.add('hidden');
        ui.spinPurchaseModal.classList.remove('hidden');
    }

    function renderPlanningShop() {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç—É–ª—Ç–∏–ø—ã –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
        hideAllTooltips();
        
        ui.planningShopItems.innerHTML = '';
        if (state.shop.length === 0) {
            ui.planningShopItems.innerHTML = '<p style="text-align:center; color: #777;">–ü—É—Å—Ç–æ</p>';
        }
        state.shop.forEach(item => {
            const itemDiv = createItemElement(item, buyItem);
            ui.planningShopItems.appendChild(itemDiv);
        });
    }

    function renderPlanningInventory() {
        ui.planningInventoryItems.innerHTML = '';
        let counter = document.getElementById('planning-inventory-counter');
        if (!counter) {
            counter = document.createElement('div');
            counter.id = 'planning-inventory-counter';
            counter.style.textAlign = 'right';
            counter.style.fontSize = '13px';
            counter.style.marginBottom = '4px';
            ui.planningInventoryItems.parentElement.insertBefore(counter, ui.planningInventoryItems);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º "–ò–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç —Å–ª–æ—Ç–æ–≤"
        const maxSize = getMaxInventorySize();
        const effectiveSlots = getEffectiveEmptySlots();
        const effectiveUsed = maxSize - effectiveSlots;
        
        counter.textContent = `–ê–º—É–ª–µ—Ç—ã: ${effectiveUsed} / ${maxSize}`;
        if (effectiveUsed >= maxSize) {
            counter.style.color = 'var(--danger-color)';
            counter.style.fontWeight = 'bold';
            counter.style.textShadow = '0 0 6px var(--danger-color)';
        } else {
            counter.style.color = '';
            counter.style.fontWeight = '';
            counter.style.textShadow = '';
        }
        if (state.inventory.length === 0) {
            ui.planningInventoryItems.innerHTML = '<p style="text-align:center; color: #777; grid-column: 1 / -1;">–ü—É—Å—Ç–æ</p>';
        }
        state.inventory.forEach(item => {
            const itemDiv = createItemElement(item, null);
            ui.planningInventoryItems.appendChild(itemDiv);
        });
    }

    function rerollPlanningShop() {
        if (state.freeRerolls && state.freeRerolls > 0) {
            state.freeRerolls--;
            populateShop();
            addLog('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ—Ä–æ–ª–ª –º–∞–≥–∞–∑–∏–Ω–∞!', 'win');
            if (hasItem('coupon_book')) animateInventoryItem('coupon_book');
            if (hasItem('resellers_ticket')) {
                state.tickets += 1;
                addLog('–ë–∏–ª–µ—Ç –ø–µ—Ä–µ–∫—É–ø—â–∏–∫–∞: +1üéüÔ∏è –∑–∞ —Ä–µ—Ä–æ–ª–ª!', 'win');
                animateInventoryItem('resellers_ticket');
            }
        } else if (state.tickets >= CONFIG.REROLL_COST) {
            state.tickets -= CONFIG.REROLL_COST;
            populateShop();
            addLog(`–ú–∞–≥–∞–∑–∏–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –∑–∞ ${CONFIG.REROLL_COST}üéüÔ∏è.`);
            if (hasItem('resellers_ticket')) {
                state.tickets += 1;
                addLog('–ë–∏–ª–µ—Ç –ø–µ—Ä–µ–∫—É–ø—â–∏–∫–∞: +1üéüÔ∏è –∑–∞ —Ä–µ—Ä–æ–ª–ª!', 'win');
                animateInventoryItem('resellers_ticket');
            }
        } else {
            addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–ª–æ–Ω–æ–≤.', 'loss');
            return;
        }

        ui.planningTickets.textContent = state.tickets;
        renderPlanningShop();
        updateUI();
    }
    
    function getMinInterestRate() {
        let min = 0.03;
        const bonus = state.inventory.reduce((acc, item) => acc + (item.effect?.interest_rate_bonus || 0), 0);
        const floor = state.inventory.reduce((acc, item) => acc + (item.effect?.min_interest_rate_floor || 0), 0);
        
        let passiveMin = 0;
        if (hasPassive('vault_insurance_passive')) {
             passiveMin = Math.max(passiveMin, 0.10);
        }
        if (hasPassive('financial_literacy')) {
            passiveMin = Math.max(passiveMin, 0.05);
        }

        return min + bonus + floor + passiveMin;
    }

    function updateInterestRate() {
        let base = 0.30 + (state.passiveInterestBonus || 0);
        base -= (state.run - 1) * 0.03;
        base -= (state.turn - 1) * 0.10;
        
        let minRate = getMinInterestRate();
        
        if (base < minRate) base = minRate;
        state.baseInterestRate = base;
    }

    // --- –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–ª—å —Å—É–Ω–¥—É–∫–∞-–º–∏–º–∏–∫–∞ ---
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–ª—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—É–Ω–¥—É–∫–∞-–º–∏–º–∏–∫–∞.
     * –ú–∏–º–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö:
     *  - —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ id/uses (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–¥–º–µ—Ç—ã —Å on_spin_bonus, —Ç—Ä–µ–±—É—é—â–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
     *  - —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ uses (–Ω–∞–ø—Ä–∏–º–µ—Ä, breakable —Å –ø–æ–±–æ—á–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏)
     *  - –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è –º–∏–º–∏–∫–∞–º–∏
     *
     * UI –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ —Ç–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ/—É–¥–∞–ª–µ–Ω–∏–∏).
     */
    function updateMimicTarget() {
        const mimicItem = state.inventory.find(item => item.id === 'mimic_chest');
        if (mimicItem) {
            // –ö–∞–Ω–¥–∏–¥–∞—Ç—ã ‚Äî –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫—Ä–æ–º–µ –¥—Ä—É–≥–∏—Ö –º–∏–º–∏–∫–æ–≤ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞
            const candidates = state.inventory.filter(item => item.id !== 'mimic_chest' && !item.effect?.mimic && item.effect);
            let prevTarget = mimicItem.effect?.mimic?.target;
            if (candidates.length > 0) {
                const target = candidates[Math.floor(Math.random() * candidates.length)];
                // –ö–æ–ø–∏—Ä—É–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ–≤–µ—Ä—Ö –±–∞–∑–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –º–∏–º–∏–∫–∞
                mimicItem.effect = { ...ALL_ITEMS.find(i => i.id === 'mimic_chest').effect, ...target.effect };
                mimicItem.effect.mimic = { target: target.id };
                // –ï—Å–ª–∏ —É —Ü–µ–ª–∏ –µ—Å—Ç—å uses –∏ –æ–Ω–∞ breakable ‚Äî –∫–æ–ø–∏—Ä—É–µ–º uses
                if (target.effect.breakable && typeof target.uses !== 'undefined') {
                    mimicItem.uses = target.uses;
                } else {
                    delete mimicItem.uses;
                }
                if (prevTarget !== target.id) {
                    addLog(`–°—É–Ω–¥—É–∫-–ú–∏–º–∏–∫ —Ç–µ–ø–µ—Ä—å –∫–æ–ø–∏—Ä—É–µ—Ç: ${target.name}`, 'win');
                }
            } else {
                // –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –±–∞–∑–æ–≤–æ–º—É —ç—Ñ—Ñ–µ–∫—Ç—É
                mimicItem.effect = { ...ALL_ITEMS.find(i => i.id === 'mimic_chest').effect };
                mimicItem.effect.mimic = { target: undefined };
                delete mimicItem.uses;
                if (prevTarget !== undefined) {
                    addLog('–°—É–Ω–¥—É–∫-–ú–∏–º–∏–∫ —Å–±—Ä–æ—Å–∏–ª —Ü–µ–ª—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.', 'loss');
                }
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ —Å—Ä–∞–∑—É
            if (typeof renderInventory === 'function') renderInventory();
            if (typeof renderPlanningInventory === 'function') renderPlanningInventory();
        }
    }

    ui.btnStartGame.onclick = initGame;
    ui.btnRestartGame.onclick = initGame;
    ui.lever.onclick = spin;
    ui.btnEndTurn.onclick = endTurn;
    ui.btnConfirmEndTurn.onclick = confirmEndTurn;
    ui.btnBuySpins7.onclick = () => buySpins(CONFIG.SPIN_PACKAGE_1);
    ui.btnBuySpins3.onclick = () => buySpins(CONFIG.SPIN_PACKAGE_2);
    ui.btnBuySpin1.onclick = () => buySpins('single');
    ui.btnBuyNothing.onclick = () => buySpins(null);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–µ–æ—Ä–µ–∫–ª–∞–º—ã —Å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ–º
    const watchAdBtn = document.getElementById('watch-ad-for-spins');
    if (watchAdBtn) {
        watchAdBtn.onclick = async () => {
            if (window.adsManager && window.adsManager.isReady()) {
                watchAdBtn.disabled = true;
                watchAdBtn.textContent = 'üì∫ –°–º–æ—Ç—Ä–∏–º —Ä–µ–∫–ª–∞–º—É...';
                
                try {
                    const wasRewarded = await window.adsManager.showRewardedVideo();
                    if (wasRewarded) {
                        // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã
                        state.spinsLeft += 3;
                        addLog('üì∫ –†–µ–∫–ª–∞–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞! –ü–æ–ª—É—á–µ–Ω–æ 3 –ø—Ä–æ–∫—Ä—É—Ç–∞.', 'win');
                        ui.spinPurchaseModal.classList.add('hidden');
                        updateUI();
                    } else {
                        addLog('üì∫ –†–µ–∫–ª–∞–º–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é.', 'loss');
                    }
                } catch (error) {
                    console.error('[Ads] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–∏–¥–µ–æ—Ä–µ–∫–ª–∞–º—ã:', error);
                    addLog('üì∫ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∫–ª–∞–º—ã.', 'loss');
                } finally {
                    watchAdBtn.disabled = false;
                    watchAdBtn.textContent = 'üì∫ –°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É –∑–∞ 3 –ø—Ä–æ–∫—Ä—É—Ç–∞';
                }
            } else {
                addLog('üì∫ –†–µ–∫–ª–∞–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.', 'loss');
            }
        };
    }
    
    ui.btnRerollShop.onclick = rerollShop;
    ui.btnPlanning.onclick = openPlanningMode;
    ui.btnPlanningReroll.onclick = rerollPlanningShop;
    ui.btnFinishPlanning.onclick = closePlanningMode;
    ui.btnPayDebtEarly.onclick = payDebtEarly;
    ui.btnLeaderboard.onclick = () => {
        if (window.leaderboardsManager) {
            window.leaderboardsManager.showLeaderboardModal();
        }
    };

    ui.startScreen.classList.remove('hidden');

    const devBtn = document.getElementById('dev-menu-btn');
    const devModal = document.getElementById('dev-menu-modal');
    const devAddCoins = document.getElementById('dev-add-coins');
    const devAddTickets = document.getElementById('dev-add-tickets');
    const devSetInterest = document.getElementById('dev-set-interest');
    const devGiveItem = document.getElementById('dev-give-item');
    const devClose = document.getElementById('dev-close-menu');
    const devItemSelect = document.getElementById('dev-item-select');
    const devPassiveSelect = document.getElementById('dev-passive-select');
    const devGivePassive = document.getElementById('dev-give-passive');
    const devPassivesList = document.getElementById('dev-passives-list');
    const devSymbolChances = document.getElementById('dev-symbol-chances');
    const devApplyChances = document.getElementById('dev-apply-chances');
    const devApplyLuck = document.getElementById('dev-apply-luck');
    const devLuckInput = document.getElementById('dev-luck-input');
    const dev100LoseMode = document.getElementById('dev-100-lose-mode');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ dev-menu-btn –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    if (devBtn) {
        devBtn.onclick = () => { 
            devModal.classList.remove('hidden');
            devItemSelect.innerHTML = '';
            ALL_ITEMS.forEach(item => {
                const opt = document.createElement('option');
                opt.value = item.id;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
                let rarityColor = '#aaa'; // common
                if (item.rarity === 'rare') rarityColor = '#536dfe';
                else if (item.rarity === 'legendary') rarityColor = '#ffab40';
                
                // –°–æ–∑–¥–∞–µ–º HTML —Å –∏–∫–æ–Ω–∫–æ–π –∏ —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
                opt.innerHTML = `<span style="color: ${rarityColor};">${item.thumbnail}</span> ${item.name} <span style="color: ${rarityColor}; font-size: 0.9em;">(${item.rarity})</span>`;
                opt.style.color = rarityColor;
                opt.style.fontWeight = 'bold';
                
                devItemSelect.appendChild(opt);
            });
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∏–≤–æ–∫
            devPassiveSelect.innerHTML = '';
            ALL_PASSIVES.forEach(passive => {
                const opt = document.createElement('option');
                opt.value = passive.id;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ç–∏–ø–∞ –ø–∞—Å—Å–∏–≤–∫–∏
                let typeColor = '#aaa'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (passive.type === 'one_time') typeColor = '#ff6b6b';
                else if (passive.type === 'slot_modifier') typeColor = '#4ecdc4';
                else if (passive.type === 'item_mod') typeColor = '#45b7d1';
                
                // –°–æ–∑–¥–∞–µ–º HTML —Å —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
                opt.innerHTML = `<span style="color: ${typeColor};">${passive.emoji}</span> ${passive.name} <span style="color: ${typeColor}; font-size: 0.9em;">(${passive.type})</span>`;
                opt.style.color = typeColor;
                opt.style.fontWeight = 'bold';
                
                devPassiveSelect.appendChild(opt);
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Å—Å–∏–≤–∫–∏
            updateDevPassivesList();
            
            devSymbolChances.innerHTML = '';
            SYMBOLS.forEach((sym, idx) => {
                const row = document.createElement('div');
                row.style.display = 'flex';
                row.style.alignItems = 'center';
                row.style.gap = '8px';
                row.style.marginBottom = '2px';
                row.innerHTML = `<span style='width:30px;'>${sym.graphic}</span><input type='number' min='1' style='width:60px;' id='dev-sym-${idx}' value='${sym.weight}'>`;
                devSymbolChances.appendChild(row);
            });
            devLuckInput.value = state.tempLuck;
            dev100LoseMode.checked = state.dev100LoseMode || false;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
            const devMenuContent = devModal.querySelector('.dev-menu-two-columns');
            if (devMenuContent && !devMenuContent.querySelector('.dev-leaderboard-section')) {
                const lbSection = document.createElement('div');
                lbSection.className = 'dev-section dev-leaderboard-section';
                lbSection.innerHTML = '<h3>–õ–∏–¥–µ—Ä–±–æ—Ä–¥ (–æ—Ç–ª–∞–¥–∫–∞)</h3>';
                const btnShowOnline = document.createElement('button');
                btnShowOnline.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –æ–Ω–ª–∞–π–Ω –ª–∏–¥–µ—Ä–±–æ—Ä–¥';
                btnShowOnline.className = 'dev-button';
                btnShowOnline.onclick = () => {
                    if (window.leaderboardsManager) window.leaderboardsManager.showLeaderboardModal();
                };
                const btnShowLocal = document.createElement('button');
                btnShowLocal.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥';
                btnShowLocal.className = 'dev-button';
                btnShowLocal.onclick = () => {
                    if (window.leaderboardsManager) window.leaderboardsManager.showLocalLeaderboardModal();
                };
                const btnClearLocal = document.createElement('button');
                btnClearLocal.textContent = '–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥';
                btnClearLocal.className = 'dev-button';
                btnClearLocal.onclick = () => {
                    localStorage.removeItem('localLeaderboard');
                    addLog('–õ–æ–∫–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –æ—á–∏—â–µ–Ω.', 'win');
                };
                lbSection.appendChild(btnShowOnline);
                lbSection.appendChild(btnShowLocal);
                lbSection.appendChild(btnClearLocal);
                devMenuContent.appendChild(lbSection);
            }
            
        };
        if (devClose) {
            devClose.onclick = () => { devModal.classList.add('hidden'); };
        }
    }
    
    function updateDevPassivesList() {
        if (!devPassivesList) return;
        
        devPassivesList.innerHTML = '';
        if (!state.activePassives || state.activePassives.length === 0) {
            devPassivesList.innerHTML = '<span style="color: #666; font-style: italic;">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Å—Å–∏–≤–æ–∫</span>';
            return;
        }
        
        state.activePassives.forEach(passive => {
            const passiveEl = document.createElement('div');
            passiveEl.style.marginBottom = '4px';
            passiveEl.style.padding = '4px';
            passiveEl.style.backgroundColor = 'var(--cell-bg)';
            passiveEl.style.borderRadius = '3px';
            passiveEl.style.border = '1px solid var(--border-color)';
            
            let typeColor = '#aaa';
            if (passive.type === 'one_time') typeColor = '#ff6b6b';
            else if (passive.type === 'slot_modifier') typeColor = '#4ecdc4';
            else if (passive.type === 'item_mod') typeColor = '#45b7d1';
            
            passiveEl.innerHTML = `<span style="color: ${typeColor};">${passive.emoji}</span> <strong>${passive.name}</strong> <span style="color: ${typeColor}; font-size: 0.8em;">(${passive.type})</span>`;
            devPassivesList.appendChild(passiveEl);
        });
    }
    
    if (devClose) {
        devClose.onclick = () => { devModal.classList.add('hidden'); };
    }
    devAddCoins.onclick = () => { state.coins += 1000; addLog('Dev: +1000 –º–æ–Ω–µ—Ç', 'win'); updateUI(); };
    devAddTickets.onclick = () => { state.tickets += 100; addLog('Dev: +100 —Ç–∞–ª–æ–Ω–æ–≤', 'win'); updateUI(); };
    devSetInterest.onclick = () => { state.baseInterestRate = 0.5; addLog('Dev: –°—Ç–∞–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ 50%', 'win'); updateUI(); };
    devGiveItem.onclick = () => {
        const id = devItemSelect.value;
        if (!state.inventory.some(i => i.id === id)) {
            const item = ALL_ITEMS.find(i => i.id === id);
            state.inventory.push(item);
            addLog(`Dev: –í—ã–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: ${item.name}`, 'win');
            updateUI();
        } else {
            addLog('Dev: –≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.', 'loss');
        }
    };
    devGivePassive.onclick = () => {
        const id = devPassiveSelect.value;
        if (!state.activePassives.some(p => p.id === id)) {
            const passive = ALL_PASSIVES.find(p => p.id === id);
            applyPassive(passive, state);
            addLog(`Dev: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Å—Å–∏–≤–∫–∞: ${passive.name}`, 'win');
            updateDevPassivesList();
            updateUI();
        } else {
            addLog('Dev: –≠—Ç–∞ –ø–∞—Å—Å–∏–≤–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.', 'loss');
        }
    };
    devApplyChances.onclick = () => {
        SYMBOLS.forEach((sym, idx) => {
            const val = parseInt(document.getElementById(`dev-sym-${idx}`).value, 10);
            if (!isNaN(val) && val > 0) sym.weight = val;
        });
        updateWeightedSymbols(); // <--- –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        addLog('Dev: –®–∞–Ω—Å—ã —Å–∏–º–≤–æ–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.', 'win');
    };
    devApplyLuck.onclick = () => {
        const val = parseInt(devLuckInput.value, 10);
        if (!isNaN(val)) {
            state.tempLuck = val;
            addLog(`Dev: –í—Ä–µ–º–µ–Ω–Ω–∞—è —É–¥–∞—á–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${val}`, 'win');
            const totalLuck = getItemEffectValue('luck', 0) + state.tempLuck + (hasItem('growing_debt') ? getItemEffectValue('per_run_bonus.luck', 0, 'sum') * state.run : 0);
            let weights = SYMBOLS.map(s => `${s.graphic}:${s.weight}`).join(' ');
            addLog(`Dev: –ò—Ç–æ–≥–æ–≤–∞—è —É–¥–∞—á–∞: ${totalLuck}, –≤–µ—Å–∞: ${weights}`);
            devDebugLuck = true;
            updateUI();
        }
    };

    dev100LoseMode.onchange = () => {
        state.dev100LoseMode = dev100LoseMode.checked;
        if (state.dev100LoseMode) {
            addLog('Dev: –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º 100% –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–≤', 'loss');
        } else {
            addLog('Dev: –û—Ç–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º 100% –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–≤', 'win');
        }
    };

    window.showDoubloonPopup = function() {
        const popup = document.createElement('div');
        popup.className = 'doubloon-popup';
        popup.innerHTML = `
            <div class="doubloon-star">
                <svg viewBox="0 0 100 100" width="50" height="50" class="doubloon-svg">
                    <rect x="10" y="10" width="80" height="80" fill="#1a1a1a" stroke="#fffbe6" stroke-width="3"/>
                    <text x="50" y="55" text-anchor="middle" font-size="16" fill="white" font-weight="bold">${item.thumbnail}</text>
                </svg>
                <span class="doubloon-text">–î—É–±–ª–æ–Ω +1</span>
            </div>
        `;
        const controls = document.querySelector('.controls');
        if (controls) {
            const rect = controls.getBoundingClientRect();
            popup.style.position = 'fixed';
            popup.style.top = (rect.top - 10) + 'px';
            popup.style.left = (rect.left - 10) + 'px';
            popup.style.transform = 'scale(0)';
        }
        document.body.appendChild(popup);
        setTimeout(() => {
            popup.classList.add('show');
            setTimeout(() => {
                popup.classList.remove('show');
                popup.classList.add('fade-out');
                setTimeout(() => popup.remove(), 500);
            }, 1800);
        }, 100);
    }

    function updateStartDebt() {
        const el = document.getElementById('start-debt-value');
        if (el && state && state.targetDebt) el.textContent = formatNumberWithComma(state.targetDebt);
    }
    
    const origInitGame = initGame;
    window.initGame = function() {
        origInitGame.apply(this, arguments);
        updateStartDebt();
    }

    function getDepositAmountAll() {
        return state.coins;
    }
    function getDepositAmountExcept7() {
        let cost = CONFIG.SPIN_PACKAGE_1.cost;
        if (hasPassive('bulk_buyer')) {
            cost = Math.max(1, cost - 2);
        }
        return Math.max(0, state.coins - cost);
    }
    function getDepositAmountExcept3() {
        return Math.max(0, state.coins - CONFIG.SPIN_PACKAGE_2.cost);
    }
    function getDepositAmountHalf() {
        return Math.floor(state.coins / 2);
    }

    if (ui.btnDepositAll) ui.btnDepositAll.onclick = () => deposit(getDepositAmountAll(), false);
    if (ui.btnDepositExcept7) ui.btnDepositExcept7.onclick = () => deposit(getDepositAmountExcept7(), false);
    if (ui.btnDepositExcept3) ui.btnDepositExcept3.onclick = () => deposit(getDepositAmountExcept3(), false);
    if (ui.btnDepositHalf) ui.btnDepositHalf.onclick = () => deposit(getDepositAmountHalf(), false);
    if (ui.btnEorDepositAll) ui.btnEorDepositAll.onclick = () => deposit(getDepositAmountAll(), true);
    if (ui.btnEorDepositExcept7) ui.btnEorDepositExcept7.onclick = () => deposit(getDepositAmountExcept7(), true);
    if (ui.btnEorDepositExcept3) ui.btnEorDepositExcept3.onclick = () => deposit(getDepositAmountExcept3(), true);
    if (ui.btnEorDepositHalf) ui.btnEorDepositHalf.onclick = () => deposit(getDepositAmountHalf(), true);

    const depositBtn = document.getElementById('btn-deposit');
    const depositDropdown = document.getElementById('deposit-dropdown');
    const eorDepositBtn = document.getElementById('btn-eor-deposit');
    const eorDepositDropdown = document.getElementById('eor-deposit-dropdown');

    function handleDepositDropdownClick(type, isFromEOR) {
        let amount = 0;
        if (type === 'all') amount = state.coins;
        else if (type === 'except-7') amount = getDepositAmountExcept7();
        else if (type === 'except-3') amount = getDepositAmountExcept3();
        else if (type === 'half') amount = getDepositAmountHalf();
        deposit(amount, isFromEOR);
        if (depositDropdown) depositDropdown.classList.add('hidden');
        if (eorDepositDropdown) eorDepositDropdown.classList.add('hidden');
    }

    if (depositBtn && depositDropdown) {
        depositBtn.onclick = (e) => {
            e.stopPropagation();
            depositDropdown.classList.toggle('hidden');
        };
        depositDropdown.querySelectorAll('.deposit-option').forEach(opt => {
            opt.onclick = (e) => {
                handleDepositDropdownClick(opt.dataset.type, false);
            };
        });
    }
    if (eorDepositBtn && eorDepositDropdown) {
        eorDepositBtn.onclick = (e) => {
            e.stopPropagation();
            eorDepositDropdown.classList.toggle('hidden');
        };
        eorDepositDropdown.querySelectorAll('.deposit-option').forEach(opt => {
            opt.onclick = (e) => {
                handleDepositDropdownClick(opt.dataset.type, true);
            };
        });
    }
    window.addEventListener('click', () => {
        if (depositDropdown) depositDropdown.classList.add('hidden');
        if (eorDepositDropdown) eorDepositDropdown.classList.add('hidden');
    });

    function addLog(message, type = 'normal') {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (typeof message === 'string' && (message.startsWith('[DEBUG]') || message.startsWith('[–ö–≤–∞–Ω—Ç–æ–≤–∞—è –ó–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å]') || message.startsWith('Dev:'))) return;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        if (typeof message === 'string') {
            message = message.replace(/\b(\d+)(?=(\d{3})+(?!\d)\b)/g, (match) => match.replace(/,/g, ''));
            message = message.replace(/\b(\d{1,3})(?=(\d{3})+(?!\d)\b)/g, '$1,');
        }
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ª–æ–≥–∞
        const logEntry = document.createElement('p');
        logEntry.className = `log-entry log-${type}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        const now = new Date();
        const timeString = now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit', second: '2-digit' });
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        let formattedMessage = message;
        let icon = '';
        
        if (type === 'win') {
            icon = 'üéâ';
            logEntry.style.color = 'var(--highlight-color)';
        } else if (type === 'loss') {
            icon = 'üíÄ';
            logEntry.style.color = 'var(--danger-color)';
        } else if (type === 'info') {
            icon = '‚ÑπÔ∏è';
            logEntry.style.color = 'var(--text-color)';
        } else if (type === 'money') {
            icon = 'üí∞';
            logEntry.style.color = 'var(--money-color)';
        } else if (type === 'luck') {
            icon = 'üçÄ';
            logEntry.style.color = 'var(--luck-color)';
        } else if (type === 'spin') {
            icon = 'üé∞';
            logEntry.style.color = 'var(--text-color)';
        } else if (type === 'item') {
            icon = 'üéÅ';
            logEntry.style.color = 'var(--highlight-color)';
        } else if (type === 'passive') {
            icon = '‚ö°';
            logEntry.style.color = 'var(--luck-color)';
        } else {
            icon = '>';
            logEntry.style.color = 'var(--text-color)';
        }
        
        formattedMessage = icon ? `${icon} ${message}` : message;
        
        logEntry.innerHTML = `<span class="log-time">${timeString}</span> ${formattedMessage}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –ø–∞–Ω–µ–ª–∏
        ui.logPanel.insertBefore(logEntry, ui.logPanel.firstChild);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        if (ui.logPanel.children.length > 100) {
            ui.logPanel.removeChild(ui.logPanel.lastChild);
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        ui.logPanel.scrollTop = 0;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
        logEntry.style.opacity = '0';
        logEntry.style.transform = 'translateY(-10px)';
        setTimeout(() => {
            logEntry.style.transition = 'all 0.3s ease';
            logEntry.style.opacity = '1';
            logEntry.style.transform = 'translateY(0)';
        }, 10);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞
    function clearLog() {
        if (ui.logPanel) {
            ui.logPanel.innerHTML = '';
            addLog('–õ–æ–≥ –æ—á–∏—â–µ–Ω', 'info');
        }
    }

    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.clearLog = clearLog;

    /*
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–∞ –≤ —Ñ–∞–π–ª
    function exportLog() {
        if (!ui.logPanel) return;
        
        const logEntries = Array.from(ui.logPanel.children).map(entry => {
            const time = entry.querySelector('.log-time')?.textContent || '';
            const message = entry.textContent.replace(time, '').trim();
            return `[${time}] ${message}`;
        }).reverse(); // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        
        const logText = logEntries.join('\n');
        const blob = new Blob([logText], { type: 'text/plain;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `game-log-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.txt`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        addLog('–õ–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–π–ª', 'info');
    }
    */

    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
    //window.exportLog = exportLog;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ª–æ–≥—É
    function searchLog(query) {
        if (!ui.logPanel || !query) return;
        
        const entries = Array.from(ui.logPanel.children);
        let foundCount = 0;
        
        entries.forEach(entry => {
            const text = entry.textContent.toLowerCase();
            const matches = text.includes(query.toLowerCase());
            
            if (matches) {
                entry.style.backgroundColor = 'rgba(255, 215, 0, 0.2)';
                entry.style.borderLeftColor = 'var(--highlight-color)';
                foundCount++;
            } else {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
                const type = entry.className.match(/log-(\w+)/)?.[1] || 'normal';
                if (type === 'win') {
                    entry.style.backgroundColor = 'rgba(255, 215, 0, 0.1)';
                    entry.style.borderLeftColor = 'var(--highlight-color)';
                } else if (type === 'loss') {
                    entry.style.backgroundColor = 'rgba(220, 53, 69, 0.1)';
                    entry.style.borderLeftColor = 'var(--danger-color)';
                } else if (type === 'money') {
                    entry.style.backgroundColor = 'rgba(40, 167, 69, 0.1)';
                    entry.style.borderLeftColor = 'var(--money-color)';
                } else if (type === 'luck') {
                    entry.style.backgroundColor = 'rgba(102, 16, 242, 0.1)';
                    entry.style.borderLeftColor = 'var(--luck-color)';
                } else if (type === 'info') {
                    entry.style.backgroundColor = 'rgba(255, 255, 255, 0.05)';
                    entry.style.borderLeftColor = 'var(--text-color)';
                } else if (type === 'spin') {
                    entry.style.backgroundColor = 'rgba(255, 255, 255, 0.03)';
                    entry.style.borderLeftColor = 'var(--text-color)';
                } else if (type === 'item') {
                    entry.style.backgroundColor = 'rgba(255, 215, 0, 0.08)';
                    entry.style.borderLeftColor = 'var(--highlight-color)';
                } else if (type === 'passive') {
                    entry.style.backgroundColor = 'rgba(102, 16, 242, 0.08)';
                    entry.style.borderLeftColor = 'var(--luck-color)';
                } else {
                    entry.style.backgroundColor = 'rgba(255, 255, 255, 0.02)';
                    entry.style.borderLeftColor = 'transparent';
                }
            }
        });
        
        if (foundCount > 0) {
            addLog(`–ù–∞–π–¥–µ–Ω–æ ${foundCount} –∑–∞–ø–∏—Å–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}"`, 'info');
        } else {
            addLog(`–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`, 'info');
        }
    }

    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.searchLog = searchLog;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞
    function resetLogSearch() {
        if (!ui.logPanel) return;
        
        const entries = Array.from(ui.logPanel.children);
        
        entries.forEach(entry => {
            const type = entry.className.match(/log-(\w+)/)?.[1] || 'normal';
            if (type === 'win') {
                entry.style.backgroundColor = 'rgba(255, 215, 0, 0.1)';
                entry.style.borderLeftColor = 'var(--highlight-color)';
            } else if (type === 'loss') {
                entry.style.backgroundColor = 'rgba(220, 53, 69, 0.1)';
                entry.style.borderLeftColor = 'var(--danger-color)';
            } else if (type === 'money') {
                entry.style.backgroundColor = 'rgba(40, 167, 69, 0.1)';
                entry.style.borderLeftColor = 'var(--money-color)';
            } else if (type === 'luck') {
                entry.style.backgroundColor = 'rgba(102, 16, 242, 0.1)';
                entry.style.borderLeftColor = 'var(--luck-color)';
            } else if (type === 'info') {
                entry.style.backgroundColor = 'rgba(255, 255, 255, 0.05)';
                entry.style.borderLeftColor = 'var(--text-color)';
            } else if (type === 'spin') {
                entry.style.backgroundColor = 'rgba(255, 255, 255, 0.03)';
                entry.style.borderLeftColor = 'var(--text-color)';
            } else if (type === 'item') {
                entry.style.backgroundColor = 'rgba(255, 215, 0, 0.08)';
                entry.style.borderLeftColor = 'var(--highlight-color)';
            } else if (type === 'passive') {
                entry.style.backgroundColor = 'rgba(102, 16, 242, 0.08)';
                entry.style.borderLeftColor = 'var(--luck-color)';
            } else {
                entry.style.backgroundColor = 'rgba(255, 255, 255, 0.02)';
                entry.style.borderLeftColor = 'transparent';
            }
        });
        
        addLog('–ü–æ–∏—Å–∫ —Å–±—Ä–æ—à–µ–Ω', 'info');
    }

    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.resetLogSearch = resetLogSearch;

    // --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è ---
    function getMaxInventorySize() {
        let base = 9;
        if (hasPassive('inventory_plus_one')) base += 1;
        return base;
    }

    // --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ ---
    function getEffectiveEmptySlots() {
        const maxSize = getMaxInventorySize();
        const currentSize = state.inventory.length;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å "–ò–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç —Å–ª–æ—Ç–æ–≤", –ø—Ä–µ–¥–º–µ—Ç—ã —Å –±–æ–Ω—É—Å–∞–º–∏ –∑–∞ –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã –Ω–µ –∑–∞–Ω–∏–º–∞—é—Ç –º–µ—Å—Ç–æ
        if (hasItem('slot_illusionist')) {
            const itemsWithEmptySlotBonus = state.inventory.filter(item => 
                item.effect?.per_empty_slot_bonus || item.effect?.per_empty_slot_luck || item.effect?.ignore_slot_for_empty_bonus
            );
            // –°–∞–º "–ò–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç —Å–ª–æ—Ç–æ–≤" —Ç–∞–∫–∂–µ –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ—Å—Ç–æ —Å–æ–≥–ª–∞—Å–Ω–æ –æ–ø–∏—Å–∞–Ω–∏—é
            const effectiveUsedSlots = currentSize - itemsWithEmptySlotBonus.length;
            return Math.max(0, maxSize - effectiveUsedSlots);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º ignore_slot_for_empty_bonus
        const itemsWithNoSlotUsage = state.inventory.filter(item => 
            item.effect?.ignore_slot_for_empty_bonus || item.modifier?.effect?.ignore_slot_for_empty_bonus
        );
        const effectiveUsedSlots = currentSize - itemsWithNoSlotUsage.length;
        
        return Math.max(0, maxSize - effectiveUsedSlots);
    }

    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–∞ –æ—Ç "–ì–æ—Ä–¥–æ—Å—Ç—å –±–∞—Ä–∞—Ö–æ–ª—å—â–∏–∫–∞"
    function getHoarderPrideBonus() {
        if (!hasItem('hoarders_pride')) return 0;
        
        const maxSize = getMaxInventorySize();
        const currentSize = state.inventory.length;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å "–ò–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç —Å–ª–æ—Ç–æ–≤", —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã
        // (–Ω–µ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Å–∞–º "–ò–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç")
        if (hasItem('slot_illusionist')) {
            // –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –±–æ–Ω—É—Å–∞–º–∏ –∑–∞ –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ "–ò–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç —Å–ª–æ—Ç–æ–≤"
            const itemsWithEmptySlotBonus = state.inventory.filter(item => 
                (item.effect?.per_empty_slot_bonus || item.effect?.per_empty_slot_luck) && item.id !== 'slot_illusionist'
            );
            const effectiveUsedSlots = currentSize - itemsWithEmptySlotBonus.length;
            return Math.max(0, maxSize - effectiveUsedSlots);
        }
        
        // –ï—Å–ª–∏ "–ò–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç —Å–ª–æ—Ç–æ–≤" –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
        const itemsWithNoSlotUsage = state.inventory.filter(item => 
            item.effect?.ignore_slot_for_empty_bonus || item.modifier?.effect?.ignore_slot_for_empty_bonus
        );
        const effectiveUsedSlots = currentSize - itemsWithNoSlotUsage.length;
        
        return Math.max(0, maxSize - effectiveUsedSlots);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–∞ –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å per_empty_slot_bonus (–∫–∞–∫ "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç")
    function getEmptySlotBonus() {
        const maxSize = getMaxInventorySize();
        const currentSize = state.inventory.length;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å "–ò–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç —Å–ª–æ—Ç–æ–≤", —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã
        if (hasItem('slot_illusionist')) {
            // –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –±–æ–Ω—É—Å–∞–º–∏ –∑–∞ –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ "–ò–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç —Å–ª–æ—Ç–æ–≤"
            const itemsWithEmptySlotBonus = state.inventory.filter(item => 
                (item.effect?.per_empty_slot_bonus || item.effect?.per_empty_slot_luck) && item.id !== 'slot_illusionist'
            );
            const effectiveUsedSlots = currentSize - itemsWithEmptySlotBonus.length;
            return Math.max(0, maxSize - effectiveUsedSlots);
        }
        
        // –ï—Å–ª–∏ "–ò–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç —Å–ª–æ—Ç–æ–≤" –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
        const itemsWithNoSlotUsage = state.inventory.filter(item => 
            item.effect?.ignore_slot_for_empty_bonus || item.modifier?.effect?.ignore_slot_for_empty_bonus
        );
        const effectiveUsedSlots = currentSize - itemsWithNoSlotUsage.length;
        
        return Math.max(0, maxSize - effectiveUsedSlots);
    }

    // === –ë–û–ù–£–°–´ –û–¢ –ù–û–í–´–• –ü–†–ï–î–ú–ï–¢–û–í ===
    function applyFruitSaladBonus(grid) {
      // –§—Ä—É–∫—Ç–æ–≤—ã–π —Å–∞–ª–∞—Ç: +1üí≤ –∑–∞ –∫–∞–∂–¥—É—é –ø–∞—Ä—É —Å–æ—Å–µ–¥–Ω–∏—Ö (–Ω–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏) üçã –∏ üçí
      let bonus = 0;
      const width = 5, height = 3;
      for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
          const idx = y * width + x;
          const symbol = grid[idx]?.id;
          // –í–ø—Ä–∞–≤–æ
          if (x < width - 1) {
            const rightSymbol = grid[idx + 1]?.id;
            if ((symbol === 'lemon' && rightSymbol === 'cherry') || (symbol === 'cherry' && rightSymbol === 'lemon')) {
              bonus += 1;
            }
          }
          // –í–Ω–∏–∑
          if (y < height - 1) {
            const downSymbol = grid[idx + width]?.id;
            if ((symbol === 'lemon' && downSymbol === 'cherry') || (symbol === 'cherry' && downSymbol === 'lemon')) {
              bonus += 1;
            }
          }
        }
      }
      return bonus;
    }

    function applySweetSpinBonus(grid) {
      // –°–ª–∞–¥–∫–∏–π –ø—Ä–æ–∫—Ä—É—Ç: –µ—Å–ª–∏ –Ω–∞ –ø–æ–ª–µ –Ω–µ—Ç –õ–∏–º–æ–Ω–æ–≤ üçã, +3üí≤
      return grid.some(s => s.id === 'lemon') ? 0 : 3;
    }

    function applyCloverFieldBonus(grid) {
      // –ö–ª–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ: –µ—Å–ª–∏ –Ω–∞ –ø–æ–ª–µ 5+ –ö–ª–µ–≤–µ—Ä–æ–≤ üçÄ, +5üí≤
      const cloverCount = grid.filter(s => s.id === 'clover').length;
      return cloverCount >= 5 ? 5 : 0;
    }

    function applyBookendsBonus(grid) {
      // –ö–Ω–∏–∂–Ω—ã–µ –ø–æ–¥–ø–æ—Ä–∫–∏: –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª—ã –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º –∏ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª–∞—Ö —Å–æ–≤–ø–∞–¥–∞—é—Ç, +4üí≤
      return (grid[0]?.id && grid[0]?.id === grid[14]?.id) ? 4 : 0;
    }

    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–≤–æ–∏—Ç–µ–ª—è ===
    function applyCoinDoubler(bonus) {
      // –ü–µ—Ä–µ–º–Ω–æ–∂–∞–µ–º –≤—Å–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      const multiplier = state.inventory.reduce((acc, item) => {
        if (item.effect?.double_flat_coin_bonus) {
          // –ï—Å–ª–∏ —á–∏—Å–ª–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º, –µ—Å–ª–∏ true ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ 2 (—Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã)
          return acc * (typeof item.effect.double_flat_coin_bonus === 'number' ? item.effect.double_flat_coin_bonus : 2);
        }
        return acc;
      }, 1);
        if (multiplier > 1) {
            const item = state.inventory.find(i => i.effect?.double_flat_coin_bonus);
            if(item) animateInventoryItem(item.id);
        }
      return bonus * multiplier;
    }

    function animateInventoryItem(itemId) {
      // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –æ–±–æ–∏—Ö –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è—Ö –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      const el = document.querySelector(
        `#inventory-items [data-item-id='${itemId}'], #planning-inventory-items [data-item-id='${itemId}']`
      );

      if (el) {
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∏–≥—Ä—ã—à–∞, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        if (el.classList.contains('item-activated-loss')) return;
        // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–º–µ—Ç–∏–ª–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        el.classList.remove('item-activated');
        // –≠—Ç–æ—Ç —Ç—Ä—é–∫ (force reflow) –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –∑–∞–º–µ—Ç–∏—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞
        // –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –º—ã –¥–æ–±–∞–≤–∏–º –µ–≥–æ —Å–Ω–æ–≤–∞, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é.
        void el.offsetWidth;
        
        el.classList.add('item-activated');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏.
        setTimeout(() => {
            if (el) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ —ç–ª–µ–º–µ–Ω—Ç
                 el.classList.remove('item-activated');
            }
        }, 800); // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –≤ CSS

        // [NEW] Echo Stone logic
        if (hasItem('echo_stone') && itemId !== 'echo_stone' && state.activatedItemsThisSpin) {
            if (!state.activatedItemsThisSpin.has(itemId)) {
                state.activatedItemsThisSpin.add(itemId);
                state.echoStoneMultiplier = 1 + state.activatedItemsThisSpin.size;
                updateEchoStoneDisplay();
            }
        }
      }
    }

    function updateEchoStoneDisplay() {
        if (!hasItem('echo_stone')) return;
        const multiplier = state.echoStoneMultiplier || 1;
        const echoStones = document.querySelectorAll("[data-item-id='echo_stone'] .echo-stone-multiplier");
        echoStones.forEach(el => {
            el.textContent = `x${multiplier}`;
            if (multiplier > 1) {
                el.classList.add('active');
            } else {
                el.classList.remove('active');
            }
        });
    }

    // --- –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è applyPassive ---
    function applyPassive(passive, state) {
        if (!passive || !state) return;
        state.activePassives.push(passive);
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ slot_modifier (–æ–Ω–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ updateWeightedSymbols)
        if (passive.type !== 'slot_modifier' && typeof passive.effect === 'function') {
            passive.effect(state);
        }
        addLog(`–í—ã–±—Ä–∞–Ω –ø–∞—Å—Å–∏–≤–Ω—ã–π –±–æ–Ω—É—Å: ${passive.name}.`, 'win');
        window.state = state;
        updateWeightedSymbols();
        if (typeof window.populateStats === 'function') {
            window.populateStats();
        }
    }

    function showPirateWarning() {
        const warningModal = document.createElement('div');
        warningModal.className = 'modal-overlay';
        warningModal.innerHTML = `
            <div class="modal-content warning-modal">
                <h3>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚ö†Ô∏è</h3>
                <p>–í —Ç–µ–Ω–∏ —É–¥–∞—á–∏ —Ç–∞–∏—Ç—Å—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å... –ì–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –∏–Ω–æ–≥–¥–∞ –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–∞—Ö –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∑–ª–æ–≤–µ—â–∏–π —Å–∏–º–≤–æ–ª üè¥‚Äç‚ò†Ô∏è</p>
                <p style="color: #ff4444; font-style: italic;">–®–∞–Ω—Å—ã –º–∞–ª—ã, –Ω–æ —Ü–µ–Ω–∞ –≤—ã—Å–æ–∫–∞...</p>
                <button class="btn-warning-ok">–ü–æ–Ω—è—Ç–Ω–æ</button>
            </div>
        `;
        document.body.appendChild(warningModal);
        
        const btnOk = warningModal.querySelector('.btn-warning-ok');
        btnOk.onclick = () => {
            warningModal.remove();
        };
    }

    // === –ü–û–î–†–û–ë–ù–´–ô –¢–£–õ–¢–ò–ü –î–õ–Ø –ö–ù–û–ü–û–ö –ü–û–ö–£–ü–ö–ò –ü–†–û–ö–†–£–¢–û–í ===
    function getSpinCostBreakdown(pkgNum) {
        const run = state.run;
        const bank = state.bankBalance;
        const debt = state.targetDebt;
        const cycleMultiplier = run === 1 ? 1 : Math.pow(1.9, run - 1);
        let wealthTax = 0;
        if (run > 1) {
            if (bank > 100000) wealthTax = Math.floor(bank / 80);
            else if (bank > 20000) wealthTax = Math.floor(bank / 120);
            else if (bank > 5000) wealthTax = Math.floor(bank / 180);
            else if (bank > 1000) wealthTax = Math.floor(bank / 250);
        }
        const debtTax = run === 1 ? 0 : Math.floor(debt / 6);
        let baseCost, finalCost;
        if (pkgNum === 1) {
            baseCost = Math.floor(CONFIG.SPIN_PACKAGE_1.base_cost * cycleMultiplier);
            if (hasPassive('bulk_buyer')) baseCost = Math.max(1, baseCost - 2);
            finalCost = baseCost + wealthTax + debtTax;
        } else {
            baseCost = Math.floor(CONFIG.SPIN_PACKAGE_2.base_cost * cycleMultiplier);
            finalCost = baseCost + wealthTax + debtTax;
        }
        let lines = [];
        lines.push(`<b>–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${baseCost}üí≤`);
        lines.push(`<b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–∏–∫–ª–∞ (x${cycleMultiplier.toFixed(2)}):</b> ${baseCost !== CONFIG.SPIN_PACKAGE_1.base_cost && baseCost !== CONFIG.SPIN_PACKAGE_2.base_cost ? `+${baseCost - (pkgNum === 1 ? CONFIG.SPIN_PACKAGE_1.base_cost : CONFIG.SPIN_PACKAGE_2.base_cost)}üí≤` : '+0üí≤'}`);
        lines.push(`<b>–ù–∞–ª–æ–≥ –Ω–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–æ:</b> +${wealthTax}üí≤`);
        lines.push(`<b>–ù–∞–ª–æ–≥ –æ—Ç –¥–æ–ª–≥–∞:</b> +${debtTax}üí≤`);
        lines.push(`<b>–ò—Ç–æ–≥–æ:</b> <span style='color:var(--money-color)'>${finalCost}üí≤</span>`);
        return lines.join('<br>');
    }

    function setupSpinCostTooltip() {
        const btn7 = document.getElementById('buy-spins-7');
        const btn3 = document.getElementById('buy-spins-3');
        const tooltip = document.getElementById('spin-cost-tooltip');
        if (!btn7 || !btn3 || !tooltip) return;

        let currentButton = null;
        let isTooltipVisible = false;

        function showTooltip(btn, pkgNum) {
            currentButton = btn;
            tooltip.innerHTML = getSpinCostBreakdown(pkgNum);
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–Ω–æ–ø–∫–∏
            const rect = btn.getBoundingClientRect();
            const scrollY = window.scrollY || window.pageYOffset;
            const scrollX = window.scrollX || window.pageXOffset;
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç—É–ª—Ç–∏–ø —Å–ø—Ä–∞–≤–∞ –æ—Ç –∫–Ω–æ–ø–∫–∏
            let top = rect.top + scrollY;
            let left = rect.right + 12 + scrollX;
            
            tooltip.style.maxWidth = '320px';
            tooltip.style.display = 'block';
            tooltip.style.left = left + 'px';
            tooltip.style.top = top + 'px';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ display: block
            const tooltipRect = tooltip.getBoundingClientRect();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π
            if (tooltipRect.right > window.innerWidth) {
                left = rect.left - tooltipRect.width - 12 + scrollX;
                tooltip.style.left = left + 'px';
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π
            if (tooltipRect.bottom > window.innerHeight) {
                top = rect.top + scrollY - tooltipRect.height + rect.height;
                tooltip.style.top = top + 'px';
            }
            
            // –î–µ–ª–∞–µ–º —Ç—É–ª—Ç–∏–ø –≤–∏–¥–∏–º—ã–º –ø–æ—Å–ª–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            requestAnimationFrame(() => {
                tooltip.style.opacity = '1';
            });
            
            isTooltipVisible = true;
        }

        function hideTooltip() {
            if (!isTooltipVisible) return;
            tooltip.style.opacity = '0';
            currentButton = null;
            isTooltipVisible = false;
            setTimeout(() => {
                if (!isTooltipVisible) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∞–∑–∞–ª—Å—è –ª–∏ —Ç—É–ª—Ç–∏–ø —Å–Ω–æ–≤–∞
                    tooltip.style.display = 'none';
                }
            }, 150);
        }

        function handleMouseMove(e, btn, pkgNum) {
            const rect = btn.getBoundingClientRect();
            if (e.clientX >= rect.left && e.clientX <= rect.right &&
                e.clientY >= rect.top && e.clientY <= rect.bottom) {
                showTooltip(btn, pkgNum); // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—É–ª—Ç–∏–ø
            } else if (currentButton === btn) {
                hideTooltip();
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        btn7.addEventListener('mouseenter', () => showTooltip(btn7, 1));
        btn7.addEventListener('mousemove', (e) => handleMouseMove(e, btn7, 1));
        btn7.addEventListener('mouseleave', hideTooltip);

        btn3.addEventListener('mouseenter', () => showTooltip(btn3, 2));
        btn3.addEventListener('mousemove', (e) => handleMouseMove(e, btn3, 2));
        btn3.addEventListener('mouseleave', hideTooltip);
    }
    document.addEventListener('DOMContentLoaded', setupSpinCostTooltip);

    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ß–∏–Ω–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–ª–æ–º–∞–Ω–Ω—ã–π breakable-–ø—Ä–µ–¥–º–µ—Ç ===
    function repairRandomBrokenItem() {
        // –ò—â–µ–º –≤—Å–µ breakable-–ø—Ä–µ–¥–º–µ—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö uses < max_uses
        const repairable = state.inventory.filter(item => {
            if (item.effect?.luck_chance?.breakable) {
                return item.uses < ((item.effect.luck_chance.max_uses || 1) + getBreakableUsesBoost());
            }
            if (item.effect?.breakable && !item.effect?.luck_chance) {
                return item.uses < ((item.effect.max_uses || 10) + getBreakableUsesBoost());
            }
            return false;
        });
        if (repairable.length > 0) {
            const toRepair = repairable[Math.floor(Math.random() * repairable.length)];
            if (toRepair.effect?.luck_chance?.breakable) {
                toRepair.uses = (toRepair.effect.luck_chance.max_uses || 1) + getBreakableUsesBoost();
            } else if (toRepair.effect?.breakable && !toRepair.effect?.luck_chance) {
                toRepair.uses = (toRepair.effect.max_uses || 10) + getBreakableUsesBoost();
            }
            addLog(`üß∞ –ù–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–∞: –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—á–∏–Ω–∏–ª '${toRepair.name}'!`, 'win');
            animateInventoryItem('master_toolkit');
        }
    }

            // --- [NEW] –ù–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–∞ ---
            if (hasItem('master_toolkit')) {
                repairRandomBrokenItem();
            }

    function addPrismButton() {
        if (!hasItem('probability_prism')) return;
        let btn = document.getElementById('btn-ban-symbol');
        if (!btn) {
            btn = document.createElement('button');
            btn.id = 'btn-ban-symbol';
            btn.textContent = 'üîÆ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å–∏–º–≤–æ–ª';
            btn.style.margin = '6px 0 0 0';
            btn.style.background = 'var(--highlight-color)';
            btn.style.color = '#222';
            btn.style.fontWeight = 'bold';
            btn.style.fontSize = '13px';
            btn.style.padding = '4px 10px';
            btn.style.borderRadius = '5px';
            btn.onclick = openBanSymbolModal;
            ui.inventoryItems.parentElement.insertBefore(btn, ui.inventoryItems);
        }
        // –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞–Ω–∞ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ
        btn.disabled = !!(state.bannedSymbols && state.bannedSymbols.some(b => b.justSet));
    }

    function removePrismButton() {
        const btn = document.getElementById('btn-ban-symbol');
        if (btn) btn.remove();
    }

    // === –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –í–´–ë–û–†–ê –°–ò–ú–í–û–õ–ê ===
    function openBanSymbolModal() {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `<div class="modal-content" style="max-width:400px;">
            <h2>üîÆ –ü—Ä–∏–∑–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏</h2>
            <p>–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–∞–¥–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –ø—Ä–æ–∫—Ä—É—Ç–æ–≤:</p>
            <div id="ban-symbol-list" style="display:flex; flex-wrap:wrap; gap:10px; justify-content:center;"></div>
            <button id="ban-cancel" style="margin-top:15px;">–û—Ç–º–µ–Ω–∞</button>
        </div>`;
        document.body.appendChild(modal);
        const list = modal.querySelector('#ban-symbol-list');
        SYMBOLS.forEach(s => {
            const btn = document.createElement('button');
            btn.textContent = s.graphic + ' ' + s.id;
            btn.style.padding = '8px 12px';
            btn.style.fontSize = '1.2em';
            btn.onclick = () => {
                if (!state.bannedSymbols) state.bannedSymbols = [];
                state.bannedSymbols.push({ symbol: s.id, spinsLeft: 3, justSet: true });
                addLog(`üîÆ –ü—Ä–∏–∑–º–∞: —Å–∏–º–≤–æ–ª ${s.graphic} (${s.id}) –∑–∞–ø—Ä–µ—â—ë–Ω –Ω–∞ 3 –ø—Ä–æ–∫—Ä—É—Ç–∞!`, 'win');
                // --- DEBUG LOG ---
                addLog(`[DEBUG] bannedSymbols: ` + JSON.stringify(state.bannedSymbols), 'normal');
                animateInventoryItem('probability_prism');
                modal.remove();
                removePrismButton(); // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
                updateUI();
            };
            list.appendChild(btn);
        });
        modal.querySelector('#ban-cancel').onclick = () => modal.remove();
        modal.onclick = (e) => { if (e.target === modal) modal.remove(); };
    }

    // === –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –°–ò–ú–í–û–õ–û–í –í generateGrid ===
    const origGenerateGrid = generateGrid;
    generateGrid = function() {
        // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        let banned = (state.bannedSymbols || []).filter(b => b.spinsLeft > 0).map(b => b.symbol);
        if (banned.length > 0) {
            weightedSymbols = weightedSymbols.filter(s => !banned.includes(s.id));
        }
        return origGenerateGrid.apply(this, arguments);
    }

    // === –£–ú–ï–ù–¨–®–ê–ï–ú –°–ß–Å–¢–ß–ò–ö –ü–û–°–õ–ï –ö–ê–ñ–î–û–ì–û –°–ü–ò–ù–ê ===
    const origSpin = spin;
    spin = async function() {
        await origSpin.apply(this, arguments);
        if (state.bannedSymbols && state.bannedSymbols.length > 0) {
            state.bannedSymbols.forEach(b => { if (!b.justSet) b.spinsLeft--; b.justSet = false; });
            state.bannedSymbols = state.bannedSymbols.filter(b => b.spinsLeft > 0);
            updateUI();
        }
    }

    // === –°–ë–†–û–° –ö–ù–û–ü–ö–ò –í –ù–ê–ß–ê–õ–ï –†–ê–£–ù–î–ê ===
    const origStartTurn = startTurn;
    startTurn = function() {
        // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ justSet —É bannedSymbols
        if (state.bannedSymbols && state.bannedSymbols.length > 0) {
            state.bannedSymbols.forEach(b => { b.justSet = false; });
        }
        origStartTurn.apply(this, arguments);
        if (hasItem('probability_prism')) addPrismButton(); else removePrismButton();
    }

    // === –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ú–ê–°–¢–ï–†–°–ö–û–ô –ì–ù–û–ú–ê ===
    function repairDwarfsWorkshop() {
        if (hasItem('dwarfs_workshop')) {
            const effect = ALL_ITEMS.find(i => i.id === 'dwarfs_workshop').effect.on_round_end_repair;
            if (effect.all) {
                let repaired = 0;
                state.inventory.forEach(item => {
                    if (item.effect?.luck_chance?.breakable) {
                        if (item.uses < ((item.effect.luck_chance.max_uses || 1) + getBreakableUsesBoost())) {
                            item.uses = Math.min((item.uses || 0) + effect.count, (item.effect.luck_chance.max_uses || 1) + getBreakableUsesBoost());
                            repaired++;
                        }
                    } else if (item.effect?.breakable && !item.effect?.luck_chance) {
                        if (item.uses < ((item.effect.max_uses || 10) + getBreakableUsesBoost())) {
                            item.uses = Math.min((item.uses || 0) + effect.count, (item.effect.max_uses || 10) + getBreakableUsesBoost());
                            repaired++;
                        }
                    }
                });
                if (repaired > 0) {
                    addLog(`‚öíÔ∏è –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –≥–Ω–æ–º–∞: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ +1 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É ${repaired} –∞–º—É–ª–µ—Ç–æ–≤!`, 'win');
                    animateInventoryItem('dwarfs_workshop');
                }
            }
        }
    }

    // --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ê–ö–¢–£–ê–õ–¨–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô –°–ò–ú–í–û–õ–û–í ---
    function getSymbolCurrentValues() {
        // –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é —Å–∏–º–≤–æ–ª–æ–≤ —Å –±–∞–∑–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        let currentSymbols = JSON.parse(JSON.stringify(SYMBOLS));
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç –õ—É–ø—ã
        if (hasItem('magnifying_glass')) {
            const effect = ALL_ITEMS.find(i => i.id === 'magnifying_glass').effect.base_value_increase;
            currentSymbols.forEach(s => {
                if (effect.symbols.includes(s.id)) {
                    s.value += effect.amount;
                }
            });
        }
        
        // --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –æ—Ç —É—Å–∏–ª–∏—Ç–µ–ª–µ–π –≤–∏—à–Ω–∏ ---
        if (window.state.cherryBaseValue) {
            currentSymbols.forEach(s => {
                if (s.id === 'cherry') {
                    s.value += window.state.cherryBaseValue;
                }
            });
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        const symbolMultipliers = {};
        state.inventory.forEach(item => {
            if (item.effect?.symbol_value_multiplier) {
                const eff = item.effect.symbol_value_multiplier;
                symbolMultipliers[eff.symbol] = (symbolMultipliers[eff.symbol] || 1) * eff.multiplier;
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        // –°—É–º–º–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å –∏ –±–æ–Ω—É—Å –∑–∞ —Ü–∏–∫–ª
        const baseAllSymbolsMultiplierBoost = getItemEffectValue('all_symbols_multiplier_boost', 0, 'sum');
        const perRunAllSymbolsMultiplierBoost = state.inventory.reduce((acc, item) => {
            if (item.effect?.per_run_bonus?.all_symbols_multiplier_boost) {
                return acc + item.effect.per_run_bonus.all_symbols_multiplier_boost * state.run;
            }
            return acc;
        }, 0);
        const allSymbolsMultiplierBoostCurrent = baseAllSymbolsMultiplierBoost + perRunAllSymbolsMultiplierBoost;
        if (allSymbolsMultiplierBoostCurrent > 0) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å –∫–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º
            ['lemon', 'cherry', 'clover', 'bell', 'diamond', 'coins', 'seven'].forEach(symbolId => {
                symbolMultipliers[symbolId] = (symbolMultipliers[symbolId] || 1) + allSymbolsMultiplierBoostCurrent;
            });
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º
        currentSymbols.forEach(symbol => {
            if (symbolMultipliers[symbol.id]) {
                symbol.value = Math.floor(symbol.value * symbolMultipliers[symbol.id]);
            }
        });
        
        return currentSymbols;
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    window.getSymbolCurrentValues = getSymbolCurrentValues;

    // --- [NEW] –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ ---
    function createItemTooltip(item, currentCost, oldCost) {
        const tooltip = document.createElement('div');
        tooltip.className = 'item-tooltip';
        
        const thumbnailValue = item.thumbnail || '?';
        let thumbnailHTML = '';
        if (thumbnailValue.endsWith('.png') || thumbnailValue.endsWith('.jpg') || thumbnailValue.endsWith('.gif')) {
            thumbnailHTML = `<img src="img/${thumbnailValue}" alt="${item.name}" style="width:100%; height:100%; object-fit:cover;">`;
        } else {
            thumbnailHTML = thumbnailValue;
        }
        
        let costHTML = '';
        if (item.cost) {
            costHTML = `${currentCost}üéüÔ∏è`;
            if (oldCost && currentCost < oldCost) {
                costHTML += ` <s style="opacity:0.6">${oldCost}üéüÔ∏è`;
            }
        }
        
        let modifierHTML = '';
        if (item.modifier) {
            const isPenalty = item.isPenalty || false;
            const modifierIcon = isPenalty ? 'üíÄ' : (item.modifier.divine ? 'üî±' : '‚ú®');
            const modifierClass = isPenalty ? 'item-tooltip-modifier penalty' : 'item-tooltip-modifier';
            
            modifierHTML = `
                <div class="${modifierClass}">
                    <div class="item-tooltip-modifier-title">${modifierIcon} ${item.modifier.name}</div>
                    <div class="item-tooltip-modifier-desc">${item.modifier.desc}</div>
                </div>
            `;
        }
        
        let usesHTML = '';
        let showUses = false;
        let uses = null;
        let maxUses = null;
        if (typeof item.uses !== 'undefined' && (item.effect?.max_uses || item.effect?.luck_chance?.max_uses)) {
            showUses = true;
            uses = item.uses;
            maxUses = item.effect.max_uses || item.effect.luck_chance?.max_uses;
        } else if (item.effect?.luck_chance?.breakable) {
            showUses = true;
            uses = item.uses !== undefined ? item.uses : (item.effect.luck_chance.max_uses || 10);
            maxUses = item.effect.luck_chance.max_uses || 10;
        } else if (item.effect?.breakable && item.effect?.max_uses) {
            showUses = true;
            uses = item.uses !== undefined ? item.uses : item.effect.max_uses;
            maxUses = item.effect.max_uses;
        }
        if (showUses && maxUses) {
            usesHTML = `<div class="item-tooltip-uses">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${uses}/${maxUses}</div>`;
        }
        
        let mimicHTML = '';
        if (item.id === 'mimic_chest') {
            let mimicInfoText = '';
            if (item.effect?.mimic?.target) {
                const target = ALL_ITEMS.find(i => i.id === item.effect.mimic.target);
                mimicInfoText = target ? `–ö–æ–ø–∏—Ä—É–µ—Ç: <b>${target.name}</b>` : `–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
            } else {
                mimicInfoText = `<i>–ù–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>`;
            }
            mimicHTML = `<div class="item-tooltip-mimic">${mimicInfoText}</div>`;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
        let titleClass = 'item-tooltip-title';
        if (item.modifier) {
            if (item.modifier.divine) {
                titleClass += ' divine-modifier';
            } else {
                titleClass += ' modified';
                if (item.isPenalty) titleClass += ' modifier-bad';
            }
        }
        
        let piggyHTML = '';
        if(item.id === 'scrap_metal') {
            piggyHTML = `<div style='color:#ffab40; font-size:13px; margin-top:2px; font-weight:bold;'>–í—Å–µ–≥–æ: ${formatNumberWithComma(state.piggyBank)}üí≤</div>`;
        }
        
        tooltip.innerHTML = `
            <div class="item-tooltip-header">
                <div class="item-tooltip-thumbnail">${thumbnailHTML}</div>
                <div class="${titleClass}">${item.name}</div>
                ${costHTML ? `<div class="item-tooltip-cost">${costHTML}</div>` : ''}
            </div>
            <div class="item-tooltip-desc">${item.desc}</div>
            ${modifierHTML}
            ${usesHTML}
            ${mimicHTML}
            ${piggyHTML}
        `;
        
        return tooltip;
    }
    
    // --- [NEW] –§—É–Ω–∫—Ü–∏—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è tooltip ---
    function positionTooltip(tooltip, event) {
        if (!tooltip || !tooltip.parentNode) return;
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —Å–∫—Ä–æ–ª–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const mouseX = event.clientX + window.scrollX;
        const mouseY = event.clientY + window.scrollY;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—É–ª—Ç–∏–ø –≤–∏–¥–∏–º –∏ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä—ã
        const rect = tooltip.getBoundingClientRect();
        if (rect.width === 0 || rect.height === 0) {
            // –ï—Å–ª–∏ —Ç—É–ª—Ç–∏–ø –µ—â–µ –Ω–µ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            tooltip.style.visibility = 'hidden';
            tooltip.style.display = 'block';
            const tempRect = tooltip.getBoundingClientRect();
            tooltip.style.visibility = '';
            tooltip.style.display = '';
            
            if (tempRect.width === 0 || tempRect.height === 0) {
                // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                const vw = window.innerWidth;
                const vh = window.innerHeight;
                
                let tooltipLeft = mouseX + 15;
                let tooltipTop = mouseY - 10;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ tooltip –∑–∞ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π —ç–∫—Ä–∞–Ω–∞
                if (tooltipLeft + 320 > vw - 20) {
                    tooltipLeft = mouseX - 320 - 15;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ tooltip –∑–∞ –ª–µ–≤—ã–π –∫—Ä–∞–π —ç–∫—Ä–∞–Ω–∞
                if (tooltipLeft < 20) {
                    tooltipLeft = 20;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ tooltip –∑–∞ –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π —ç–∫—Ä–∞–Ω–∞
                if (tooltipTop + 200 > vh - 20) {
                    tooltipTop = mouseY - 200 - 10;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ tooltip –∑–∞ –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π —ç–∫—Ä–∞–Ω–∞
                if (tooltipTop < 20) {
                    tooltipTop = 20;
                }
                
                tooltip.style.left = tooltipLeft + 'px';
                tooltip.style.top = tooltipTop + 'px';
                return;
            }
        }
        
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;
        
        let left = mouseX + 15;
        let top = mouseY - 10;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ tooltip –∑–∞ –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π —ç–∫—Ä–∞–Ω–∞
        if (left + rect.width > viewportWidth - 20) {
            left = mouseX - rect.width - 15;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ tooltip –∑–∞ –ª–µ–≤—ã–π –∫—Ä–∞–π —ç–∫—Ä–∞–Ω–∞
        if (left < 20) {
            left = 20;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ tooltip –∑–∞ –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π —ç–∫—Ä–∞–Ω–∞
        if (top + rect.height > viewportHeight - 20) {
            top = mouseY - rect.height - 10;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ tooltip –∑–∞ –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π —ç–∫—Ä–∞–Ω–∞
        if (top < 20) {
            top = 20;
        }
        
        tooltip.style.left = left + 'px';
        tooltip.style.top = top + 'px';
    }

    // --- [NEW] –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Ç—É–ª—Ç–∏–ø–æ–≤ ---
    function hideAllTooltips() {
        const tooltips = document.querySelectorAll('.item-tooltip');
        tooltips.forEach(tooltip => {
            if (tooltip.parentNode) {
                tooltip.classList.remove('show');
                setTimeout(() => {
                    if (tooltip && tooltip.parentNode) {
                        tooltip.parentNode.removeChild(tooltip);
                    }
                }, 200);
            }
        });
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    window.hideAllTooltips = hideAllTooltips;

    // --- [NEW] –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ç—É–ª—Ç–∏–ø–æ–≤ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö –æ–±–ª–∞—Å—Ç–∏ ---
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.item-tooltip') && !e.target.closest('.item')) {
            hideAllTooltips();
        }
    });

    // --- [NEW] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ç—É–ª—Ç–∏–ø–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape ---
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            hideAllTooltips();
        }
    });

    // --- [NEW] –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Ç—É–ª—Ç–∏–ø–æ–≤ ---
    document.addEventListener('mousemove', (e) => {
        const tooltips = document.querySelectorAll('.item-tooltip.show');
        tooltips.forEach(tooltip => {
            if (tooltip.parentNode) {
                positionTooltip(tooltip, e);
            }
        });
    });
});
// === –î–ò–°–ö–õ–ï–ô–ú–ï–† (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) ===
document.addEventListener('DOMContentLoaded', function () {
    const disclaimerModal = document.getElementById('disclaimer-modal');
    const disclaimerAgree = document.getElementById('disclaimer-agree');
    const disclaimerRisks = document.getElementById('disclaimer-risks');
    const disclaimerContinue = document.getElementById('disclaimer-continue');
    const showLicenseLink = document.getElementById('show-license-link');

    // --- –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥–∏—Å–∫–ª–µ–π–º–µ—Ä ---
    if (localStorage.getItem('disclaimerAccepted') === 'true') {
        if (disclaimerModal) disclaimerModal.style.display = 'none';
        return;
    } else {
        if (disclaimerModal) disclaimerModal.style.display = 'flex';
    }

    // –¢–µ–∫—Å—Ç –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è (EULA)
    const licenseText = `
        <h2 style='color:#ff6b35; text-align:center;'>–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (EULA)</h2>
        <p><strong>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 14 –∏—é–ª—è 2025 –≥.</strong></p>
        <p>–ù–∞—Å—Ç–æ—è—â–µ–µ –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (–¥–∞–ª–µ–µ ‚Äì ¬´–°–æ–≥–ª–∞—à–µ–Ω–∏–µ¬ª) —è–≤–ª—è–µ—Ç—Å—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º, –∑–∞–∫–ª—é—á–∞–µ–º—ã–º –º–µ–∂–¥—É –≤–∞–º–∏ (–¥–∞–ª–µ–µ ‚Äì ¬´–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å¬ª) –∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∏–≥—Ä—ã ¬´–¶–∏–∫–ª –î–æ–ª–≥–∞¬ª (–¥–∞–ª–µ–µ ‚Äì ¬´–ü—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å¬ª).</p>
        
        <h3 style='color:#ff9a3c; margin-top:20px;'>1. –ü—Ä–µ–¥–º–µ—Ç –°–æ–≥–ª–∞—à–µ–Ω–∏—è</h3>
        <p>1.1. –ü—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ, –Ω–µ–ø–µ—Ä–µ–¥–∞–≤–∞–µ–º–æ–µ –ø—Ä–∞–≤–æ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã (–¥–∞–ª–µ–µ ‚Äì ¬´–ü—Ä–æ–¥—É–∫—Ç¬ª) –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –ª–∏—á–Ω—ã—Ö, –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö, —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö.</p>
        <p>1.2. –ü—Ä–æ–¥—É–∫—Ç —è–≤–ª—è–µ—Ç—Å—è —Å–∏–º—É–ª—è—Ü–∏–µ–π –∏ –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∞–∑–∞—Ä—Ç–Ω—É—é –∏–≥—Ä—É, –∫–∞–∑–∏–Ω–æ, –ª–æ—Ç–µ—Ä–µ—é –∏–ª–∏ –∏–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –Ω–∞ —Ä–∏—Å–∫–µ –∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—â—É—é –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞.</p>

        <h3 style='color:#ff9a3c; margin-top:20px;'>2. –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å</h3>
        <p>2.1. –ò—Å–ø–æ–ª—å–∑—É—è –ü—Ä–æ–¥—É–∫—Ç, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –≤–∞–º –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å 18 –ª–µ—Ç, –∏ –≤—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ –ø–æ–ª–Ω–æ–π –¥–µ–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è.</p>
        <p>2.2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ—Å–µ—Ç –ø–æ–ª–Ω—É—é –∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è, —Å–æ–≤–µ—Ä—à–∞–µ–º—ã–µ –≤ –ü—Ä–æ–¥—É–∫—Ç–µ, –∞ —Ç–∞–∫–∂–µ –∑–∞ –ª—é–±—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è, –≤–æ–∑–Ω–∏–∫—à–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –ü—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Ä–µ–º—è.</p>
        <p>2.3. –ü—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å –Ω–µ –¥–∞–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π, —è–≤–Ω—ã—Ö –∏–ª–∏ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º—ã—Ö, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–Ω–æ—Å—Ç–∏, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø–æ–ª–Ω–æ—Ç—ã –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ü—Ä–æ–¥—É–∫—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É "–ö–ê–ö –ï–°–¢–¨" ("AS IS").</p>

        <h3 style='color:#ff9a3c; margin-top:20px;'>3. –ò–≥—Ä–æ–≤—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏</h3>
        <p>3.1. –í—Å—è –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞, –ø—Ä–µ–¥–º–µ—Ç—ã, –±–æ–Ω—É—Å—ã –∏ –ø—Ä–æ—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–¥–∞–ª–µ–µ ‚Äì ¬´–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏¬ª) –Ω–µ –∏–º–µ—é—Ç —Ä–µ–∞–ª—å–Ω–æ–π –¥–µ–Ω–µ–∂–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –û–Ω–∏ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±–º–µ–Ω–µ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏, —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —É—Å–ª—É–≥–∏.</p>
        <p>3.2. –õ—é–±—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏ —è–≤–ª—è—é—Ç—Å—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∏ –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É –∏–ª–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.</p>
        <p>3.3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∑–Ω–∞–µ—Ç, —á—Ç–æ –ª—é–±—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã, —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ —É—Ç–µ—Ä—è–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–±–æ–µ–≤, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–ª–∏ –ø–æ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ, –∏ –ü—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Ç–∞–∫–∏–µ –ø–æ—Ç–µ—Ä–∏.</p>

        <h3 style='color:#ff9a3c; margin-top:20px;'>4. –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å</h3>
        <p>4.1. –í—Å–µ –ø—Ä–∞–≤–∞ –Ω–∞ –ü—Ä–æ–¥—É–∫—Ç, –≤–∫–ª—é—á–∞—è –∫–æ–¥, –≥—Ä–∞—Ñ–∏–∫—É, –∑–≤—É–∫–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç—ã, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ü—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—é. –õ—é–±–æ–µ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ü—Ä–æ–¥—É–∫—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.</p>
        
        <h3 style='color:#ff9a3c; margin-top:20px;'>5. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏</h3>
        <p>5.1. –ù–∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö –ü—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø—Ä—è–º–æ–π, –∫–æ—Å–≤–µ–Ω–Ω—ã–π, —Å–ª—É—á–∞–π–Ω—ã–π –∏–ª–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —É—â–µ—Ä–± (–≤–∫–ª—é—á–∞—è, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è—Å—å, —É–ø—É—â–µ–Ω–Ω—É—é –≤—ã–≥–æ–¥—É, –ø–æ—Ç–µ—Ä—é –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥), –≤–æ–∑–Ω–∏–∫—à–∏–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ü—Ä–æ–¥—É–∫—Ç–∞.</p>

        <h3 style='color:#ff9a3c; margin-top:20px;'>6. –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è</h3>
        <p>6.1. –ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ü—Ä–æ–¥—É–∫—Ç, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—á–∏—Ç–∞–ª–∏, –ø–æ–Ω—è–ª–∏ –∏ –±–µ–∑–æ–≥–æ–≤–æ—Ä–æ—á–Ω–æ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è.</p>
        <p>6.2. –ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –∫–∞–∫–∏–º-–ª–∏–±–æ –∏–∑ —É—Å–ª–æ–≤–∏–π, –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ü—Ä–æ–¥—É–∫—Ç–∞.</p>

        <button id='close-license-modal' style='margin-top:24px;background:#ff6b35;color:#fff;border:none;border-radius:6px;padding:10px 24px;font-size:1.1em;font-weight:bold;cursor:pointer;width:100%;'>–Ø –ø—Ä–æ—á–µ–ª –∏ —Å–æ–≥–ª–∞—Å–µ–Ω</button>
    `;

    // –°–æ–∑–¥–∞—ë–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
    let licenseModal = document.createElement('div');
    licenseModal.id = 'license-modal';
    licenseModal.style = 'position:fixed;z-index:10000;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.93);display:none;align-items:center;justify-content:center;overflow-y:auto;padding:20px 0;';
    licenseModal.innerHTML = `
        <div style='background:#1f1f1f;color:#e0e0e0;max-width:800px;width:95vw;max-height:90vh;padding:32px 35px;border-radius:12px;box-shadow:0 4px 32px #000a; margin: 40px auto; overflow-y:auto; display:flex; flex-direction:column;'>
            ${licenseText}
        </div>
    `;
    document.body.appendChild(licenseModal);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤
    function checkDisclaimerState() {
        const isAgreed = disclaimerAgree.checked && disclaimerRisks.checked;
        disclaimerContinue.disabled = !isAgreed;
        disclaimerContinue.style.opacity = isAgreed ? '1' : '0.6';
        disclaimerContinue.style.cursor = isAgreed ? 'pointer' : 'not-allowed';
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    showLicenseLink.addEventListener('click', function (e) {
        e.preventDefault();
        licenseModal.style.display = 'flex';
    });

    licenseModal.addEventListener('click', function (e) {
        if (e.target.id === 'license-modal' || e.target.id === 'close-license-modal') {
            licenseModal.style.display = 'none';
        }
    });

    document.getElementById('close-license-modal').addEventListener('click', function () {
        licenseModal.style.display = 'none';
    });

    disclaimerAgree.addEventListener('change', checkDisclaimerState);
    disclaimerRisks.addEventListener('change', checkDisclaimerState);

    disclaimerContinue.addEventListener('click', function () {
        if (!disclaimerContinue.disabled) {
            disclaimerModal.style.display = 'none';
            // --- –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—è—Ç–∏—è –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–∞ ---
            localStorage.setItem('disclaimerAccepted', 'true');
        }
    });
});