document.addEventListener('DOMContentLoaded', () => {
    const ui = {
        slotMachine: document.getElementById('slot-machine'),
        lever: document.getElementById('lever'),
        spinsLeft: document.getElementById('spins-left'),
        logPanel: document.getElementById('log-panel'),
        statRun: document.getElementById('stat-run'),
        statTurn: document.getElementById('stat-turn'),
        statCoins: document.getElementById('stat-coins'),
        statTickets: document.getElementById('stat-tickets'),
        statLuck: document.getElementById('stat-luck'),
        statDebt: document.getElementById('stat-debt'),
        bankBalance: document.getElementById('bank-balance'),
        atmInterestRate: document.getElementById('atm-interest-rate'),
        depositAmountInput: document.getElementById('deposit-amount'),
        btnDeposit: document.getElementById('btn-deposit'),
        shopItems: document.getElementById('shop-items'),
        btnRerollShop: document.getElementById('btn-reroll-shop'),
        inventoryItems: document.getElementById('inventory-items'),
        btnEndTurn: document.getElementById('btn-end-turn'),
        startScreen: document.getElementById('start-screen'),
        gameOverScreen: document.getElementById('game-over-screen'),
        spinPurchaseModal: document.getElementById('spin-purchase-modal'),
        purchaseModalTitle: document.getElementById('purchase-modal-title'),
        purchaseModalCoins: document.getElementById('purchase-modal-coins'),
        btnBuySpins7: document.getElementById('buy-spins-7'),
        btnBuySpins3: document.getElementById('buy-spins-3'),
        btnBuySpin1: document.getElementById('buy-spin-1'),
        btnBuyNothing: document.getElementById('buy-nothing'),
        btnPlanning: document.getElementById('btn-planning'),
        planningModal: document.getElementById('planning-modal'),
        planningShopItems: document.getElementById('planning-shop-items'),
        planningInventoryItems: document.getElementById('planning-inventory-items'),
        planningTickets: document.getElementById('planning-tickets'),
        btnPlanningReroll: document.getElementById('btn-planning-reroll'),
        btnFinishPlanning: document.getElementById('btn-finish-planning'),
        judgementModal: document.getElementById('judgement-modal'),
        judgementTitle: document.getElementById('judgement-title'),
        judgementText: document.getElementById('judgement-text'),
        judgementContinue: document.getElementById('judgement-continue'),
        finalRun: document.getElementById('final-run'),
        btnStartGame: document.getElementById('btn-start-game'),
        btnRestartGame: document.getElementById('btn-restart-game'),
        endOfRoundModal: document.getElementById('end-of-round-modal'),
        eorTitle: document.getElementById('eor-title'),
        eorCoins: document.getElementById('eor-coins'),
        eorBank: document.getElementById('eor-bank'),
        eorDepositAmount: document.getElementById('eor-deposit-amount'),
        btnEorDeposit: document.getElementById('btn-eor-deposit'),
        btnConfirmEndTurn: document.getElementById('btn-confirm-end-turn'),
        purchaseModalDebt: document.getElementById('purchase-modal-debt'),
        btnPayDebtEarly: document.getElementById('btn-pay-debt-early'),
        earlyPayoffBonusInfo: document.getElementById('early-payoff-bonus-info'),
        earlyPayoffSection: document.getElementById('early-payoff-section'),
        statDebtStart: document.getElementById('stat-debt-start'),
    };

    const CONFIG = {
        ROWS: 3, COLS: 5, REROLL_COST: 2,
        SPIN_ANIMATION_TIME: 1200, 
        SPIN_PACKAGE_1: { spins: 7, tickets: 1, cost: 10, base_cost: 10 },
        SPIN_PACKAGE_2: { spins: 3, tickets: 2, cost: 7, base_cost: 7 },
    };
    const GRAPHICS = {
        lemon: 'üçã', cherry: 'üçí', clover: 'üçÄ', bell: 'üîî', diamond: 'üíé', coins: 'üí∞', seven: '7Ô∏è‚É£',
    };
    const SYMBOLS = [
        { id: 'lemon',    value: 2, weight: 194, graphic: GRAPHICS.lemon },   // 19.4%
        { id: 'cherry',   value: 2, weight: 194, graphic: GRAPHICS.cherry },  // 19.4%
        { id: 'clover',   value: 3, weight: 149, graphic: GRAPHICS.clover },  // 14.9%
        { id: 'bell',     value: 3, weight: 149, graphic: GRAPHICS.bell },    // 14.9%
        { id: 'diamond',  value: 5, weight: 119, graphic: GRAPHICS.diamond }, // 11.9%
        { id: 'coins',    value: 5, weight: 119, graphic: GRAPHICS.coins },   // 11.9%
        { id: 'seven',    value: 7, weight: 75,  graphic: GRAPHICS.seven },   // 7.5%
    ];
    window.SYMBOLS = SYMBOLS;
    const PAYLINES = [
        // Scannable lines (will be checked for 3, 4, 5 in a row)
        { name: "–í–µ—Ä—Ö–Ω—è—è –ª–∏–Ω–∏—è", positions: [0, 1, 2, 3, 4], scannable: true, type: "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è" },
        { name: "–°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è", positions: [5, 6, 7, 8, 9], scannable: true, type: "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è" },
        { name: "–ù–∏–∂–Ω—è—è –ª–∏–Ω–∏—è", positions: [10, 11, 12, 13, 14], scannable: true, type: "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è" },
        
        // Fixed-pattern lines (must match all positions)
        { name: "–ö–æ–ª–æ–Ω–∫–∞ 1", positions: [0, 5, 10], multiplier: 1, type: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è" },
        { name: "–ö–æ–ª–æ–Ω–∫–∞ 2", positions: [1, 6, 11], multiplier: 1, type: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è" },
        { name: "–ö–æ–ª–æ–Ω–∫–∞ 3", positions: [2, 7, 12], multiplier: 1, type: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è" },
        { name: "–ö–æ–ª–æ–Ω–∫–∞ 4", positions: [3, 8, 13], multiplier: 1, type: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è" },
        { name: "–ö–æ–ª–æ–Ω–∫–∞ 5", positions: [4, 9, 14], multiplier: 1, type: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è" },
        { name: "–î–∏–∞–≥–æ–Ω–∞–ª—å ‚Üò", positions: [0, 6, 12], multiplier: 1, type: "–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è" },
        { name: "–î–∏–∞–≥–æ–Ω–∞–ª—å ‚Üô", positions: [10, 6, 2], multiplier: 1, type: "–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è" },
        { name: "–ú–∞–ª–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å ‚Üò", positions: [1, 7, 13], multiplier: 1, type: "–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è" },
        { name: "–ú–∞–ª–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å ‚Üô", positions: [11, 7, 3], multiplier: 1, type: "–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è" },

        { name: "–ó–∞–≥", positions: [0, 6, 12, 8, 4], multiplier: 4, type: "–ó–∏–≥-–ó–∞–≥" },
        { name: "–ó–∏–≥", positions: [10, 6, 2, 8, 14], multiplier: 4, type: "–ó–∏–≥-–ó–∞–≥" },
        { name: "–°—Ç—É–ø–µ–Ω–∏ –≤–Ω–∏–∑", positions: [0, 5, 7, 9, 14], multiplier: 4, type: "–ó–∏–≥-–ó–∞–≥" },
        { name: "–°—Ç—É–ø–µ–Ω–∏ –≤–≤–µ—Ä—Ö", positions: [10, 5, 7, 9, 4], multiplier: 4, type: "–ó–∏–≥-–ó–∞–≥" },
        
        { name: "–ù–µ–±–æ", positions: [2, 6, 7, 8, 12], multiplier: 7, type: "–ù–µ–±–æ/–ó–µ–º–ª—è" },
        { name: "–ó–µ–º–ª—è", positions: [5, 1, 7, 13, 9], multiplier: 7, type: "–ù–µ–±–æ/–ó–µ–º–ª—è" },
    ];

    let state = {};
    let weightedSymbols = [];
    let devDebugLuck = false;

    // --- –î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–î–î–ï–†–ñ–ö–£ –ü–ê–°–°–ò–í–û–ö ---
    let chosenPassive = null;

    function showPassiveChoiceModal() {
        // –°–æ–∑–¥–∞—ë–º –º–æ–¥–∞–ª–∫—É –≤—ã–±–æ—Ä–∞ –ø–∞—Å—Å–∏–≤–∫–∏
        let modal = document.getElementById('passive-choice-modal');
        if (!modal) {
            modal = document.createElement('div');
            modal.id = 'passive-choice-modal';
            modal.className = 'modal-overlay';
            modal.innerHTML = `
                <div class="modal-card">
                    <h2>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Å—Å–∏–≤–∫—É –Ω–∞ –≤—Å—é –∏–≥—Ä—É</h2>
                    <div id="passive-choices" style="display:flex;gap:16px;justify-content:center;"></div>
                    <button id="passive-confirm-btn" disabled>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
                </div>
            `;
            document.body.appendChild(modal);
        }
        const choicesDiv = modal.querySelector('#passive-choices');
        const confirmBtn = modal.querySelector('#passive-confirm-btn');
        choicesDiv.innerHTML = '';
        confirmBtn.disabled = true;
        const passives = getRandomPassives(3);
        passives.forEach((p, idx) => {
            const div = document.createElement('div');
            div.className = 'passive-choice-card';
            div.innerHTML = `
                <div class="passive-choice-emoji">${p.emoji || ''}</div>
                <div class="passive-choice-name">${p.name}</div>
                <div class="passive-choice-desc">${p.desc}</div>
            `;
            div.onclick = () => {
                choicesDiv.querySelectorAll('.passive-choice-card').forEach(el => el.classList.remove('selected'));
                div.classList.add('selected');
                chosenPassive = p;
                confirmBtn.disabled = false;
            };
            choicesDiv.appendChild(div);
        });
        confirmBtn.onclick = () => {
            modal.classList.add('hidden');
            state.chosenPassive = chosenPassive;
            applyPassive(chosenPassive, state);
            updateUI();
        };
        modal.classList.remove('hidden');
    }

    // --- –î–û–ë–ê–í–õ–Ø–ï–ú –í–´–ó–û–í –í –ù–ê–ß–ê–õ–ï –ò–ì–†–´ ---
    const origInitGameWithPassive = initGame;
    initGame = function() {
        origInitGameWithPassive.apply(this, arguments);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–∞—Å—Å–∏–≤–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏ —Ü–∏–∫–ª –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω 2
        if (!state.chosenPassive && state.run >= 2) {
            showPassiveChoiceModal();
        }
    };

    // --- –ü–†–ò–ú–ï–ù–ï–ù–ò–ï slot_mod –ü–ê–°–°–ò–í–û–ö –ü–†–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –°–õ–û–¢–û–í ---
    const origGenerateGrid = generateGrid;
    generateGrid = function() {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º slot_mod –ø–∞—Å—Å–∏–≤–∫–∏
        if (state.chosenPassive && state.chosenPassive.type === 'slot_mod') {
            state.chosenPassive.effect(state);
        }
        return origGenerateGrid.apply(this, arguments);
    };

    // --- –ü–†–ò–ú–ï–ù–ï–ù–ò–ï item_mod –ü–ê–°–°–ò–í–û–ö –ü–†–ò –í–´–ü–õ–ê–¢–ê–• ---
    const origCalculateWinnings = calculateWinnings;
    calculateWinnings = function() {
        origCalculateWinnings.apply(this, arguments);
        // –ö–ª–µ–≤–µ—Ä–Ω—ã–π –±–æ–Ω—É—Å
        if (state.passiveEffects && state.passiveEffects.clover_bonus && state.grid) {
            const cloverCount = state.grid.filter(s => s.id === 'clover').length;
            if (cloverCount > 0 && state.lastWinningLines && state.lastWinningLines.length > 0) {
                const bonus = cloverCount;
                state.coins += bonus;
                addLog('–ö–ª–µ–≤–µ—Ä–Ω—ã–π –±–æ–Ω—É—Å: +' + bonus + 'üí∞ –∑–∞ –∫–ª–µ–≤–µ—Ä—ã –Ω–∞ –ø–æ–ª–µ.', 'win');
            }
        }
        // –í–∏—à–Ω—ë–≤–∞—è —É–¥–∞—á–∞
        if (state.passiveEffects && state.passiveEffects.cherry_luck && state.grid) {
            const cherryCount = state.grid.filter(s => s.id === 'cherry').length;
            if (cherryCount > 0) {
                state.tempLuck = (state.tempLuck || 0) + 1;
                addLog('–í–∏—à–Ω—ë–≤–∞—è —É–¥–∞—á–∞: +1 –∫ —É–¥–∞—á–µ –∑–∞ –≤–∏—à–Ω—é –Ω–∞ –ø–æ–ª–µ.', 'win');
            }
        }
    };

    // –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–£–ù–ö–¶–ò–ò
    function hasItem(itemId) {
        return state.inventory && state.inventory.some(item => item.id === itemId);
    }
    function getItemEffectValue(effectKey, defaultValue, accumulator = 'sum') {
        let items = [...state.inventory];
        // mimic: –∫–æ–ø–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        const mimicItem = items.find(item => item.effect?.mimic);
        if (mimicItem) {
            const targetId = mimicItem.effect.mimic.target;
            const target = ALL_ITEMS.find(i => i.id === targetId);
            // --- –û–¢–õ–ê–î–ö–ê –î–õ–Ø –°–£–ù–î–£–ö–ê-–ú–ò–ú–ò–ö–ê ---
            console.log('[DEBUG] –°—É–Ω–¥—É–∫-–ú–∏–º–∏–∫: mimicItem=', mimicItem, 'targetId=', targetId, 'target=', target);
            if (target) items.push({...target, id: 'mimic_copy'});
        }
        return items.reduce((acc, item) => {
            if (item.effect) {
                // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É
                let value = item.effect;
                for (const key of effectKey.split('.')) {
                    if (value && value.hasOwnProperty(key)) {
                        value = value[key];
                    } else {
                        value = undefined;
                        break;
                    }
                }
                if (value !== undefined) {
                    if (accumulator === 'multiply') return acc * value;
                    return acc + value;
                }
            }
            return acc;
        }, defaultValue);
    }
    function addLog(message, type = 'normal') {
        // –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ log-panel —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å '[DEBUG]', '[–ö–≤–∞–Ω—Ç–æ–≤–∞—è –ó–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å]' –∏–ª–∏ 'Dev:'
        if (typeof message === 'string' && (message.startsWith('[DEBUG]') || message.startsWith('[–ö–≤–∞–Ω—Ç–æ–≤–∞—è –ó–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å]') || message.startsWith('Dev:'))) return;
        const logEntry = document.createElement('p');
        logEntry.textContent = `> ${message}`;
        if (type === 'win') logEntry.style.color = 'var(--highlight-color)';
        if (type === 'loss') logEntry.style.color = 'var(--danger-color)';
        ui.logPanel.insertBefore(logEntry, ui.logPanel.firstChild);
        if (ui.logPanel.children.length > 50) ui.logPanel.removeChild(ui.logPanel.lastChild);
    }

    function updateWeightedSymbols() {
        let currentSymbols = [...SYMBOLS];
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–§–∏–ª—å—Ç—Ä –ù–µ—É–¥–∞—á"
        const removedSymbolId = state.inventory.find(item => item.effect?.remove_symbol)?.effect.remove_symbol;
        if (removedSymbolId) {
            currentSymbols = currentSymbols.filter(s => s.id !== removedSymbolId);
        }
        weightedSymbols = currentSymbols.flatMap(s => Array(s.weight).fill(s));
    }

    function generateGrid() {
        updateWeightedSymbols(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–ª —Å–∏–º–≤–æ–ª–æ–≤ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π

        let tempLuck = 0;
        if(hasItem('blood_ritual')) {
            const effect = ALL_ITEMS.find(i => i.id === 'blood_ritual').effect.on_spin_sacrifice;
            if(state.coins >= effect.condition_coin){
                state.coins -= effect.cost;
                tempLuck += effect.bonus.luck;
                addLog(`–ö—Ä–æ–≤–∞–≤—ã–π –†–∏—Ç—É–∞–ª: -${effect.cost}üí∞, +${effect.bonus.luck} –∫ —É–¥–∞—á–µ –Ω–∞ —ç—Ç–æ—Ç —Å–ø–∏–Ω.`, 'win');
            }
        }
        
        const perRunLuck = hasItem('growing_debt') ? getItemEffectValue('per_run_bonus.luck', 0, 'sum') * state.run : 0;
        if (hasItem('growing_debt')) {
            console.log('[DEBUG] –†–∞—Å—Ç—É—â–∏–π –î–æ–ª–≥: +', getItemEffectValue('per_run_bonus.luck', 0, 'sum'), '–∫ —É–¥–∞—á–µ –∑–∞ –∫–∞–∂–¥—ã–π —Ü–∏–∫–ª. –¢–µ–∫—É—â–∏–π —Ü–∏–∫–ª:', state.run, '=> –±–æ–Ω—É—Å:', perRunLuck);
        }

        const totalLuck = getItemEffectValue('luck', 0) + state.tempLuck + tempLuck + perRunLuck;
        
        // --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —É–¥–∞—á–∞ –≤–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª ---
        const luckySymbolIndex = Math.floor(Math.random() * SYMBOLS.length);
        const luckySymbolId = SYMBOLS[luckySymbolIndex].id;

        let adjustedSymbols = weightedSymbols.map(symbol => {
            if (symbol.id === luckySymbolId) {
                let newWeight = symbol.weight + Math.floor(symbol.value * totalLuck * 40);
                return { ...symbol, weight: newWeight };
            }
            return { ...symbol, weight: symbol.weight };
        });

        // addLog(`–í —ç—Ç–æ—Ç —Å–ø–∏–Ω —É–¥–∞—á–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–µ—Å —Å–∏–º–≤–æ–ª–∞: ${GRAPHICS[luckySymbolId]}`, 'win');
        // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –ø–æ id
        const uniqueWeights = {};
        adjustedSymbols.forEach(s => { uniqueWeights[s.id] = s.weight; });
        const weightsDebug = Object.entries(uniqueWeights)
            .map(([id, w]) => `${GRAPHICS[id]}:${w}`)
            .join(' ');
        console.log(`[DEBUG] –í —ç—Ç–æ—Ç —Å–ø–∏–Ω —É–¥–∞—á–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–µ—Å —Å–∏–º–≤–æ–ª–∞: ${GRAPHICS[luckySymbolId]}. –í–µ—Å–∞: ${weightsDebug}`);
        if (hasItem('twins_mirror')) {
            console.log('[DEBUG] –ó–µ—Ä–∫–∞–ª–æ –ë–ª–∏–∑–Ω–µ—Ü–æ–≤: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã.');
        }

        if (devDebugLuck) {
            // –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞
            let uniqueWeights = {};
            adjustedSymbols.forEach(s => { uniqueWeights[s.id] = s.weight; });
            let weightsStr = Object.entries(uniqueWeights)
                .map(([id, w]) => `${GRAPHICS[id]}:${w}`)
                .join(' ');
            addLog(`Dev: generateGrid() totalLuck=${totalLuck}, –≤–µ—Å–∞: ${weightsStr}`);
            devDebugLuck = false;
        }

        const adjustedWeightedSymbols = adjustedSymbols.flatMap(s => Array(s.weight > 0 ? s.weight : 0).fill(s));

        let grid = Array.from({ length: CONFIG.ROWS * CONFIG.COLS }, () =>
            adjustedWeightedSymbols[Math.floor(Math.random() * adjustedWeightedSymbols.length)]
        );

        // --- –≠–§–§–ï–ö–¢: guarantee_symbol ---
        const guarantee = state.inventory.find(item => item.effect?.guarantee_symbol);
        if (guarantee) {
            const { symbol, count } = guarantee.effect.guarantee_symbol;
            let positions = Array.from({length: grid.length}, (_, i) => i);
            for (let i = 0; i < count; i++) {
                if (positions.length === 0) break;
                const idx = Math.floor(Math.random() * positions.length);
                grid[positions[idx]] = SYMBOLS.find(s => s.id === symbol);
                positions.splice(idx, 1);
            }
            // --- –û–¢–õ–ê–î–ö–ê –î–õ–Ø –ú–ê–ì–ù–ò–¢–ê –°–ï–ú–Å–†–û–ö ---
            if(guarantee.id === 'seven_magnet') {
                console.log('[DEBUG] –ú–∞–≥–Ω–∏—Ç –°–µ–º—ë—Ä–æ–∫: grid –ø–æ—Å–ª–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ =', grid);
            }
        }
        // --- –≠–§–§–ï–ö–¢: sync_cells ---
        const sync = state.inventory.find(item => item.effect?.sync_cells);
        if (sync) {
            const positions = sync.effect.sync_cells.cells;
            if (Array.isArray(positions) && positions.length > 0 && grid.length > 0) {
                const symbol = grid[positions[0]];
                positions.forEach(pos => grid[pos] = symbol);
                // DEBUG LOG
                console.log('[–ö–≤–∞–Ω—Ç–æ–≤–∞—è –ó–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–∑–∏—Ü–∏–∏', positions, '–°–∏–º–≤–æ–ª:', symbol);
            }
        }

        return grid;
    }

    function showTotalWinPopup(amount) {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ø-–∞–ø
        const popup = document.createElement('div');
        popup.className = 'total-win-popup';
        popup.innerHTML = `
            <div class="win-title">–û–ë–©–ò–ô –í–´–ò–ì–†–´–®</div>
            <div class="win-amount">+${amount}üí∞</div>
        `;
        document.body.appendChild(popup);

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π
        if (amount >= 100) {
            const colors = ['#FFD700', '#00ff7f', '#ff3b3b', '#40c4ff', '#b388ff'];
            for (let i = 0; i < 50; i++) {
                const confetti = document.createElement('div');
                confetti.className = 'confetti';
                confetti.style.left = Math.random() * 100 + 'vw';
                confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                confetti.style.animationDuration = (Math.random() * 1 + 1) + 's';
                document.body.appendChild(confetti);
                setTimeout(() => confetti.remove(), 2000);
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø-–∞–ø
        setTimeout(() => {
            popup.classList.add('show');
            // –£–¥–∞–ª—è–µ–º –ø–æ–ø-–∞–ø —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã (1.5 —Å–µ–∫ –ø–æ–∫–∞–∑–∞ + 0.5 fade-out)
            setTimeout(() => {
                popup.classList.remove('show');
                popup.classList.add('fade-out');
                setTimeout(() => popup.remove(), 1000);
            }, 1500);
        }, 100);
    }

    function calculateWinnings() {
        let grid = [...state.grid];
        let totalWinnings = 0;
        const allWinningPositions = new Set();
        let winningLinesInfo = [];
        
        const wildSymbolId = state.inventory.find(item => item.effect?.wild_symbol)?.effect.wild_symbol;

        // --- 0. –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´ ---
        state.tempLuck = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —É–¥–∞—á—É –æ—Ç "–ü–∞–∫—Ç –°–µ–º—ë—Ä–æ–∫"
        state.inventory.forEach(item => {
            if (item.effect?.temporary_luck_on_spin) {
                const symbolId = item.effect.temporary_luck_on_spin;
                const count = grid.filter(s => s.id === symbolId).length;
                if (count > 0) { state.tempLuck += count; }
            }
        });
        if(state.tempLuck > 0) addLog(`–ü–∞–∫—Ç –°–µ–º—ë—Ä–æ–∫: +${state.tempLuck} –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —É–¥–∞—á–µ.`, 'win');

        const substitutions = state.inventory.filter(item => item.effect?.substitute).map(item => item.effect.substitute);
        if (substitutions.length > 0) {
            let substitutionLogged = false;
            grid = grid.map(symbol => {
                const sub = substitutions.find(s => s.from === symbol.id);
                if (sub) {
                    if(!substitutionLogged) { addLog(`–¶–µ–¥—Ä–∞ –ª–∏–º–æ–Ω–∞: üçã —Å—Ç–∞–ª–∏ üçÄ.`, 'win'); substitutionLogged = true; }
                    return SYMBOLS.find(s_data => s_data.id === sub.to) || symbol;
                }
                return symbol;
            });
        }

        // --- 1. –ü–†–û–í–ï–†–ö–ê –õ–ò–ù–ò–ô –í–´–ü–õ–ê–¢ ---
        let activePaylines = [...PAYLINES];
        state.inventory.forEach(item => {
            if (item.effect?.add_payline) { activePaylines.push(item.effect.add_payline); }
        });
        
        const payBothWays = hasItem("twins_mirror") || state.inventory.some(item => item.effect?.pay_both_ways);

        // pay_both_ways: –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è scannable
        if (payBothWays) {
            const mirrored = activePaylines.filter(l => l.scannable).map(line => ({
                ...line,
                name: line.name + ' (–æ–±—Ä–∞—Ç–Ω–æ)',
                positions: [...line.positions].reverse(),
            }));
            activePaylines = activePaylines.concat(mirrored);
        }

        // --- –î–û–ë–ê–í–õ–Ø–ï–ú –≠–§–§–ï–ö–¢–´ –ü–†–ï–î–ú–ï–¢–û–í –ö –í–´–ü–õ–ê–¢–ê–ú ---
        // symbol_value_multiplier
        const symbolMultipliers = {};
        state.inventory.forEach(item => {
            if (item.effect?.symbol_value_multiplier) {
                const eff = item.effect.symbol_value_multiplier;
                symbolMultipliers[eff.symbol] = (symbolMultipliers[eff.symbol] || 1) * eff.multiplier;
            }
        });
        // line_length_win_bonus
        const lineLengthBonuses = {};
        state.inventory.forEach(item => {
            if (item.effect?.line_length_win_bonus) {
                const eff = item.effect.line_length_win_bonus;
                lineLengthBonuses[eff.length] = (lineLengthBonuses[eff.length] || 0) + eff.bonus;
                // --- –û–¢–õ–ê–î–ö–ê –î–õ–Ø –õ–ò–ü–ö–ò–• –ü–ê–õ–¨–¶–ï–í ---
                if(item.id === 'sticky_fingers') {
                    console.log('[DEBUG] –õ–∏–ø–∫–∏–µ –ü–∞–ª—å—Ü—ã: –Ω–∞–π–¥–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç line_length_win_bonus', eff, 'item:', item);
                }
            }
        });
        // on_line_win_bonus
        const lineWinBonuses = {};
        const lineWinTickets = {};
        state.inventory.forEach(item => {
            if (item.effect?.on_line_win_bonus) {
                const eff = item.effect.on_line_win_bonus;
                if (eff.bonus) lineWinBonuses[eff.length] = (lineWinBonuses[eff.length] || 0) + eff.bonus;
                if (eff.tickets) lineWinTickets[eff.length] = (lineWinTickets[eff.length] || 0) + eff.tickets;
            }
        });

        activePaylines.forEach(line => {
            const symbolsOnLine = line.positions.map(pos => grid[pos]);

            // *** –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø SCANNABLE –õ–ò–ù–ò–ô ***
            if (line.scannable) {
                const lengthMultipliers = { 3: 1, 4: 2, 5: 3 };
                let i = 0;
                while (i < symbolsOnLine.length) {
                    const currentSymbol = symbolsOnLine[i];
                    let comboLength = 1;
                    for (let j = i + 1; j < symbolsOnLine.length; j++) {
                        if (symbolsOnLine[j].id === currentSymbol.id) {
                            comboLength++;
                        } else {
                            break;
                        }
                    }

                    if (comboLength >= 3) {
                        let lineMultiplier = lengthMultipliers[comboLength];
                        
                        const typeBonus = state.inventory.filter(item => item.effect?.line_type_multiplier_bonus).reduce((acc, item) => item.effect.line_type_multiplier_bonus.types.some(type => line.type === type) ? acc + item.effect.line_type_multiplier_bonus.bonus : acc, 0);
                        lineMultiplier += typeBonus;
                        
                        const lengthBonus = state.inventory.filter(item => item.effect?.line_length_multiplier_bonus).reduce((acc, item) => (item.effect.line_length_multiplier_bonus.length === comboLength) ? acc * item.effect.line_length_multiplier_bonus.multiplier : acc, 1);
                        lineMultiplier *= lengthBonus;

                        // --- –ü–†–ò–ú–ï–ù–Ø–ï–ú symbol_value_multiplier ---
                        let symbolValue = currentSymbol.value;
                        if (symbolMultipliers[currentSymbol.id]) {
                            symbolValue = Math.floor(symbolValue * symbolMultipliers[currentSymbol.id]);
                        }

                        let win = comboLength * symbolValue * lineMultiplier;

                        // --- –ü–†–ò–ú–ï–ù–Ø–ï–ú line_length_win_bonus ---
                        if (lineLengthBonuses[comboLength]) {
                            win += lineLengthBonuses[comboLength];
                            // --- –û–¢–õ–ê–î–ö–ê –î–õ–Ø –õ–ò–ü–ö–ò–• –ü–ê–õ–¨–¶–ï–í ---
                            if (hasItem('sticky_fingers') && comboLength === 3) {
                                console.log('[DEBUG] –õ–∏–ø–∫–∏–µ –ü–∞–ª—å—Ü—ã: –¥–æ–±–∞–≤–ª–µ–Ω –±–æ–Ω—É—Å', lineLengthBonuses[comboLength], '–∫ –ª–∏–Ω–∏–∏', line.name, '—Å–∏–º–≤–æ–ª', currentSymbol.id, 'win:', win);
                            }
                        }
                        // --- –ü–†–ò–ú–ï–ù–Ø–ï–ú on_line_win_bonus ---
                        if (lineWinBonuses[comboLength]) {
                            win += lineWinBonuses[comboLength];
                        }
                        if (lineWinTickets[comboLength]) {
                            state.tickets += lineWinTickets[comboLength];
                            addLog(`–ü—Ä–∏–Ω—Ç–µ—Ä –¢–∞–ª–æ–Ω–æ–≤: +${lineWinTickets[comboLength]}üéüÔ∏è`, 'win');
                        }

                        const symbolWinBonus = state.inventory.filter(item => item.effect?.symbol_win_bonus).reduce((acc, item) => (item.effect.symbol_win_bonus.symbol === currentSymbol.id) ? acc + item.effect.symbol_win_bonus.bonus : acc, 0);
                        win += symbolWinBonus;
                        
                        const winningPositions = line.positions.slice(i, i + comboLength);
                        winningLinesInfo.push({ name: `${line.name} (x${comboLength})`, symbol: currentSymbol.id, win, positions: winningPositions });
                        totalWinnings += win;
                        winningPositions.forEach(pos => allWinningPositions.add(pos));
                        
                        i += comboLength;
                    } else {
                        i++;
                    }
                }
            } 
            // *** –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–• –õ–ò–ù–ò–ô ***
            else {
                const firstSymbol = symbolsOnLine[0];
                if (symbolsOnLine.every(s => s.id === firstSymbol.id)) {
                    let lineMultiplier = line.multiplier;
                    const typeBonus = state.inventory.filter(item => item.effect?.line_type_multiplier_bonus).reduce((acc, item) => item.effect.line_type_multiplier_bonus.types.some(type => line.type === type) ? acc + item.effect.line_type_multiplier_bonus.bonus : acc, 0);
                    lineMultiplier += typeBonus;

                    const lengthBonus = state.inventory.filter(item => item.effect?.line_length_multiplier_bonus).reduce((acc, item) => (item.effect.line_length_multiplier_bonus.length === line.positions.length) ? acc * item.effect.line_length_multiplier_bonus.multiplier : acc, 1);
                    lineMultiplier *= lengthBonus;

                    // --- –ü–†–ò–ú–ï–ù–Ø–ï–ú symbol_value_multiplier ---
                    let symbolValue = firstSymbol.value;
                    if (symbolMultipliers[firstSymbol.id]) {
                        symbolValue = Math.floor(symbolValue * symbolMultipliers[firstSymbol.id]);
                    }

                    let win = line.positions.length * symbolValue * lineMultiplier;
                    
                    // --- –ü–†–ò–ú–ï–ù–Ø–ï–ú line_length_win_bonus ---
                    if (lineLengthBonuses[line.positions.length]) {
                        win += lineLengthBonuses[line.positions.length];
                        // --- –û–¢–õ–ê–î–ö–ê –î–õ–Ø –õ–ò–ü–ö–ò–• –ü–ê–õ–¨–¶–ï–í ---
                        if (hasItem('sticky_fingers') && line.positions.length === 3) {
                            console.log('[DEBUG] –õ–∏–ø–∫–∏–µ –ü–∞–ª—å—Ü—ã: –¥–æ–±–∞–≤–ª–µ–Ω –±–æ–Ω—É—Å', lineLengthBonuses[line.positions.length], '–∫ –ª–∏–Ω–∏–∏', line.name, '—Å–∏–º–≤–æ–ª', firstSymbol.id, 'win:', win);
                        }
                    }
                    // --- –ü–†–ò–ú–ï–ù–Ø–ï–ú on_line_win_bonus ---
                    if (lineWinBonuses[line.positions.length]) {
                        win += lineWinBonuses[line.positions.length];
                    }
                    if (lineWinTickets[line.positions.length]) {
                        state.tickets += lineWinTickets[line.positions.length];
                        addLog(`–ü—Ä–∏–Ω—Ç–µ—Ä –¢–∞–ª–æ–Ω–æ–≤: +${lineWinTickets[line.positions.length]}üéüÔ∏è`, 'win');
                    }

                    const symbolWinBonus = state.inventory.filter(item => item.effect?.symbol_win_bonus).reduce((acc, item) => (item.effect.symbol_win_bonus.symbol === firstSymbol.id) ? acc + item.effect.symbol_win_bonus.bonus : acc, 0);
                    win += symbolWinBonus;

                    totalWinnings += win;
                    winningLinesInfo.push({ name: line.name, symbol: firstSymbol.id, win, positions: line.positions });
                    line.positions.forEach(pos => allWinningPositions.add(pos));
                }
            }
        });

        // --- 2. –ü–†–û–í–ï–†–ö–ê –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        const symbolCounts = grid.reduce((acc, s) => { acc[s.id] = (acc[s.id] || 0) + 1; return acc; }, {});
        const [topSymbolId, topCount] = Object.entries(symbolCounts).sort((a,b) => b[1] - a[1])[0] || [null, 0];

        if (topCount === 15) {
            const jackpotWin = SYMBOLS.find(s => s.id === topSymbolId).value * 10 * topCount;
            totalWinnings += jackpotWin;
            addLog(`üí• –î–ñ–ï–ö–ü–û–¢!!! üí• (${topSymbolId} x15): +${jackpotWin}üí∞`, 'win');
            for(let i=0; i<15; i++) allWinningPositions.add(i);
            
            // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–∂–µ–∫–ø–æ—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
                const jackpotOverlay = document.createElement('div');
                jackpotOverlay.className = 'jackpot-overlay';
                jackpotOverlay.innerHTML = `
                    <div class="jackpot-content">
                        <div class="jackpot-title">–î–ñ–ï–ö–ü–û–¢!!!</div>
                        <div class="jackpot-amount">+${jackpotWin}üí∞</div>
                    </div>
                `;
                document.body.appendChild(jackpotOverlay);
                
                // –°–æ–∑–¥–∞–µ–º –≤–∑—Ä—ã–≤–∞—é—â–∏–µ—Å—è —á–∞—Å—Ç–∏—Ü—ã
                for (let i = 0; i < 50; i++) {
                    const particle = document.createElement('div');
                    particle.className = 'jackpot-particle';
                    particle.style.setProperty('--angle', `${Math.random() * 360}deg`);
                    particle.style.setProperty('--delay', `${Math.random() * 0.5}s`);
                    jackpotOverlay.appendChild(particle);
                }
                
                // –£–¥–∞–ª—è–µ–º –æ–≤–µ—Ä–ª–µ–π —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    jackpotOverlay.classList.add('fade-out');
                    setTimeout(() => jackpotOverlay.remove(), 1000);
                }, 4000);
            }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –¥–∂–µ–∫–ø–æ—Ç–∞
        } else if (topCount >= 12 && topCount < 15) {
            const eyeWin = SYMBOLS.find(s => s.id === topSymbolId).value * 8 * topCount;
            totalWinnings += eyeWin;
            addLog(`üëÅÔ∏è –ì–õ–ê–ó! üëÅÔ∏è (${topSymbolId} x${topCount}): +${eyeWin}üí∞`, 'win');
            grid.forEach((s, i) => { if(s.id === topSymbolId) allWinningPositions.add(i); });
        }

        // --- 3. –ü–û–°–¢-–ë–û–ù–£–°–´ –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
        const loggedLines = new Set();
        winningLinesInfo.forEach(info => {
             if (!loggedLines.has(info.name)) {
                addLog(`${info.name} (${GRAPHICS[info.symbol]}): +${info.win}üí∞`, 'win');
                loggedLines.add(info.name);
             }
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è on_spin_bonus –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        state.lastWinningLines = winningLinesInfo;

        if (winningLinesInfo.length > 1) {
            let comboMultiplier = 1;
            if (hasItem('combo_counter')) {
                comboMultiplier = state.inventory.find(item => item.id === 'combo_counter')?.effect?.combo_bonus_multiplier || 1.5;
            }
            const comboBonus = Math.floor(totalWinnings * ((1 + (winningLinesInfo.length - 1) * 0.25 - 1) * comboMultiplier));
            totalWinnings += comboBonus;
            addLog(`üî• –ö–û–ú–ë–û x${winningLinesInfo.length}! –ë–æ–Ω—É—Å: +${comboBonus}üí∞`, 'win');

            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–æ–º–±–æ –µ—Å–ª–∏ –±—ã–ª –¥–∂–µ–∫–ø–æ—Ç
            const jackpotDelay = topCount === 15 ? 5500 : 0;
            
            setTimeout(() => {
                highlightWinningCells(Array.from(allWinningPositions), totalWinnings, winningLinesInfo.length > 1, winningLinesInfo);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø-–∞–ø –æ–±—â–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–±–æ
                const sequenceTime = allWinningPositions.size * 150 + 2500; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ + —É–¥–µ—Ä–∂–∞–Ω–∏—è
                if (winningLinesInfo.length > 1) {
                    setTimeout(() => showTotalWinPopup(totalWinnings), sequenceTime);
                }
            }, jackpotDelay);
        } else if (totalWinnings > 0) {
            const jackpotDelay = topCount === 15 ? 5500 : 0;
            setTimeout(() => {
                highlightWinningCells(Array.from(allWinningPositions), totalWinnings, false, winningLinesInfo);
                // –î–ª—è –±–æ–ª—å—à–∏—Ö –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π —Ç–æ–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø-–∞–ø
                if (totalWinnings >= 50) {
                    setTimeout(() => showTotalWinPopup(totalWinnings), 2000);
                }
            }, jackpotDelay);
        }

        state.inventory.forEach(item => {
            if (item.on_spin_bonus) {
                // --- –û–¢–õ–ê–î–ö–ê –î–õ–Ø –†–ê–î–£–ñ–ù–û–ì–û –ö–õ–ï–í–ï–†–ê ---
                if(item.id === 'rainbow_clover') {
                    console.log('[DEBUG] –†–∞–¥—É–∂–Ω—ã–π –∫–ª–µ–≤–µ—Ä: grid=', state.grid, 'totalWinnings=', totalWinnings);
                }
                const bonus = item.on_spin_bonus(state.grid, totalWinnings, state);
                if (bonus > 0) { totalWinnings += bonus; addLog(`${item.name}: +${bonus}üí∞`, 'win'); }
            }
        });
        
        const finalMultiplier = getItemEffectValue('winMultiplier', 1);
        if (finalMultiplier > 1 && totalWinnings > 0) {
            const bonus = Math.floor(totalWinnings * (finalMultiplier - 1));
            totalWinnings += bonus;
            addLog(`–ê–º—É–ª–µ—Ç –§–æ—Ä—Ç—É–Ω—ã: +25% –±–æ–Ω—É—Å! (+${bonus}üí∞)`, 'win');
        }

        // --- LAST CHANCE ---
        if (hasItem('last_chance') && state.spinsLeft === 0 && state.turn === 3) {
            const lastChanceMultiplier = state.inventory.find(item => item.id === 'last_chance')?.effect?.on_last_spin_bonus?.multiplier || 3;
            if (totalWinnings > 0) {
                const bonus = totalWinnings * (lastChanceMultiplier - 1);
                totalWinnings += bonus;
                addLog(`–ü–æ—Å–ª–µ–¥–Ω–∏–π –®–∞–Ω—Å: x${lastChanceMultiplier} –∫ –≤—ã–∏–≥—Ä—ã—à—É! (+${bonus}üí∞)`, 'win');
            }
        }

        totalWinnings = Math.floor(totalWinnings);

        if (totalWinnings > 0) {
            state.coins += totalWinnings;
        } else { 
            addLog('–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ.');
            if (hasItem('scrap_metal')) {
                const lossBonus = getItemEffectValue('on_loss_bonus', 0);
                state.piggyBank += lossBonus;
                addLog(`–ö–æ–ø–∏–ª–∫–∞: +${lossBonus}üí∞. –í—Å–µ–≥–æ: ${state.piggyBank}üí∞`);
            }
        }
    }

    function highlightWinningCells(positions, winAmount, isCombo = false, winningLines = []) {
        const cells = ui.slotMachine.querySelectorAll('.slot-cell');
        let highlightClass = 'highlight';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–∏–≥—Ä—ã—à–∞
        if (winAmount > 50) highlightClass = 'highlight-huge';
        else if (winAmount > 20) highlightClass = 'highlight-big';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –¥–∂–µ–∫–ø–æ—Ç
        const isJackpot = positions.length === 15;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–±–æ-—ç—Ñ—Ñ–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–æ–º–±–æ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π)
        let comboLevel;
        if (isCombo) {
            if (winningLines.length >= 9) comboLevel = 5;
            else if (winningLines.length >= 7) comboLevel = 4;
            else if (winningLines.length >= 5) comboLevel = 3;
            else if (winningLines.length >= 3) comboLevel = 2;
            else comboLevel = 1;
        } else {
            comboLevel = 0;
        }
        
        if (comboLevel > 0) {
            ui.slotMachine.classList.add('combo-active');
            if (isJackpot) ui.slotMachine.classList.add('jackpot');
            
            // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
            const sequenceTime = positions.length * 150; // –í—Ä–µ–º—è –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
            const holdTime = 2500; // –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –≤—Å–µ—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤

            positions.forEach((pos, index) => {
                setTimeout(() => {
                    const cell = cells[pos];
                    if (cell) {
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
                        cell.classList.add('sequential-highlight');
                        if (isJackpot) cell.classList.add('jackpot');
                        
                        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–º–±–æ
                        if (comboLevel >= 3) {
                            for (let i = 0; i < 3; i++) {
                                const particle = document.createElement('div');
                                particle.className = 'particle' + (isJackpot ? ' jackpot' : '');
                                cell.appendChild(particle);
                                setTimeout(() => particle.remove(), 500);
                            }
                        }

                        // –î–ª—è –≤—ã—Å–æ–∫–∏—Ö –∫–æ–º–±–æ (4-5) –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–ª–µ—Ç–∞—é—â–∏–µ –º–æ–Ω–µ—Ç—ã
                        if (comboLevel >= 4) {
                            const coinCount = isJackpot ? (comboLevel === 5 ? 12 : 8) : (comboLevel === 5 ? 8 : 5);
                            const cellRect = cell.getBoundingClientRect();
                            // –¶–µ–Ω—Ç—Ä —è—á–µ–π–∫–∏
                            const cellCenterX = cellRect.left + cellRect.width / 2;
                            const cellCenterY = cellRect.top + cellRect.height / 2;
                            for (let i = 0; i < coinCount; i++) {
                                setTimeout(() => {
                                    const coin = document.createElement('div');
                                    coin.className = 'flying-coin' + (isJackpot ? ' jackpot' : '');
                                    coin.textContent = 'üí∞';
                                    coin.style.position = 'fixed';
                                    coin.style.left = (cellCenterX - 16) + 'px';
                                    coin.style.top = (cellCenterY - 16) + 'px';
                                    coin.style.width = '32px';
                                    coin.style.height = '32px';
                                    coin.style.fontSize = '2em';
                                    coin.style.pointerEvents = 'none';
                                    coin.style.zIndex = 9999;
                                    document.body.appendChild(coin);
                                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≥–æ–ª —Ä–∞–∑–ª—ë—Ç–∞ (–æ—Ç -70 –¥–æ +70 –≥—Ä–∞–¥—É—Å–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏)
                                    const angle = (-70 + Math.random() * 140) * (Math.PI / 180);
                                    const radius = 80 + Math.random() * 40; // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–ª—ë—Ç–∞
                                    const dx = Math.sin(angle) * radius;
                                    const dy = -Math.cos(angle) * radius; // –≤–≤–µ—Ä—Ö
                                    // –ü–µ—Ä–≤–∞—è —Ñ–∞–∑–∞: —Ä–∞–∑–ª—ë—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—É
                                    coin.animate([
                                        { transform: 'translate(0,0) scale(1)', opacity: 1 },
                                        { transform: `translate(${dx}px,${dy}px) scale(1.1)`, opacity: 1 }
                                    ], {
                                        duration: 350,
                                        easing: 'cubic-bezier(0.5,0,0.7,1)'
                                    });
                                    // –í—Ç–æ—Ä–∞—è —Ñ–∞–∑–∞: –ø–∞–¥–µ–Ω–∏–µ –≤–Ω–∏–∑ –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
                                    setTimeout(() => {
                                        coin.animate([
                                            { transform: `translate(${dx}px,${dy}px) scale(1.1)`, opacity: 1 },
                                            { transform: `translate(${dx}px,${dy+180+Math.random()*40}px) scale(0.9)`, opacity: 0 }
                                        ], {
                                            duration: 600,
                                            easing: 'cubic-bezier(0.3,0.7,0.7,1)'
                                        });
                                        setTimeout(() => coin.remove(), 600);
                                    }, 350);
                                }, i * 100);
                            }
                        }

                        // –ü–æ—Å–ª–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∫–æ–º–±–æ
                        setTimeout(() => {
                            cell.classList.remove('sequential-highlight');
                            cell.classList.add(`combo-${comboLevel}`, 'sequential');
                            if (isJackpot) cell.classList.add('jackpot');
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                            const symbol = cell.querySelector('.symbol');
                            if (symbol) {
                                symbol.classList.add('winning');
                                if (isJackpot) symbol.classList.add('jackpot');
                            }
                        }, 500);
                    }
                }, index * 150);
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–±–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
                const comboText = document.createElement('div');
                comboText.className = 'combo-text';
                comboText.textContent = `–ö–û–ú–ë–û x${winningLines.length}!`;
                document.body.appendChild(comboText);
                
                // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                setTimeout(() => comboText.classList.add('show'), 100);
                
                // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                setTimeout(() => {
                    comboText.classList.remove('show');
                    comboText.classList.add('fade-out');
                    setTimeout(() => comboText.remove(), 500);
                }, 1500);
            }, sequenceTime); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∑–∞–≥–æ—Ä–µ–ª–∏—Å—å

            // –û—á–∏—â–∞–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ 2.5 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                cells.forEach(cell => {
                    cell.classList.remove('highlight', 'highlight-big', 'highlight-huge');
                    cell.classList.remove('combo-1', 'combo-2', 'combo-3', 'combo-4', 'combo-5', 'sequential');
                    cell.classList.remove('sequential-highlight');
                    const symbol = cell.querySelector('.symbol');
                    if (symbol) {
                        symbol.classList.remove('winning');
                    }
                });
                ui.slotMachine.classList.remove('combo-active');
            }, sequenceTime + holdTime); // –û–±—â–µ–µ –≤—Ä–µ–º—è = –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å + —É–¥–µ—Ä–∂–∞–Ω–∏–µ

        } else {
            // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
            positions.forEach(pos => cells[pos]?.classList.add(highlightClass));
            
            // –û—á–∏—â–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –≤—ã–∏–≥—Ä—ã—à–µ–π
            setTimeout(() => {
                cells.forEach(cell => {
                    cell.classList.remove('highlight', 'highlight-big', 'highlight-huge');
                });
            }, 2000);
        }
    }

    function populateShop() {
        state.shop = [];
        const availableItems = [...ALL_ITEMS].filter(item => !hasItem(item.id));
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        const commons = availableItems.filter(i => i.rarity === 'common');
        const rares = availableItems.filter(i => i.rarity === 'rare');
        const legendaries = availableItems.filter(i => i.rarity === 'legendary');
        for (let i = 0; i < 5; i++) { // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 3 –Ω–∞ 5
            let pool = [];
            const roll = Math.random();
            if (roll < 0.6 && commons.length > 0) pool = commons;
            else if (roll < 0.9 && rares.length > 0) pool = rares;
            else if (legendaries.length > 0) pool = legendaries;
            else if (commons.length > 0) pool = commons;
            else if (rares.length > 0) pool = rares;
            else if (legendaries.length > 0) pool = legendaries;
            if (pool.length > 0) {
                const randomIndex = Math.floor(Math.random() * pool.length);
                state.shop.push(pool[randomIndex]);
                // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –ø—É–ª–æ–≤
                const idx = availableItems.findIndex(x => x.id === pool[randomIndex].id);
                if (idx !== -1) availableItems.splice(idx, 1);
                if (pool === commons) commons.splice(commons.indexOf(pool[randomIndex]), 1);
                if (pool === rares) rares.splice(rares.indexOf(pool[randomIndex]), 1);
                if (pool === legendaries) legendaries.splice(legendaries.indexOf(pool[randomIndex]), 1);
            }
        }
    }
    
    function animateSpinsCounter(oldValue, newValue) {
        const counter = ui.spinsLeft;
        const counterRect = counter.getBoundingClientRect();
        const counterWrapper = document.createElement('div');
        counterWrapper.className = 'spins-counter';
        counterWrapper.style.height = `${counterRect.height}px`;
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        const oldSpan = document.createElement('span');
        oldSpan.className = 'old-value';
        oldSpan.textContent = oldValue;
        
        const newSpan = document.createElement('span');
        newSpan.className = 'new-value';
        newSpan.textContent = newValue;
        
        counterWrapper.appendChild(oldSpan);
        counterWrapper.appendChild(newSpan);
        
        // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—á—ë—Ç—á–∏–∫–∞
        counter.textContent = '';
        counter.appendChild(counterWrapper);
        
        // –£–¥–∞–ª—è–µ–º –æ–±—ë—Ä—Ç–∫—É –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            counter.textContent = newValue;
        }, 400);
    }

    function showLuckChancePopups(triggeredItems) {
        if (!triggeredItems || triggeredItems.length === 0) return;
        let idx = 0;
        function showNext() {
            const item = triggeredItems[idx];
            // –°–æ–∑–¥–∞—ë–º –ø–æ–ø–∞–ø –≤ —Å—Ç–∏–ª–µ –¥—É–±–ª–æ–Ω–∞, –Ω–æ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            const popup = document.createElement('div');
            popup.className = 'doubloon-popup';
            popup.innerHTML = `
                <div class="doubloon-star">
                    <svg viewBox="0 0 100 100" width="50" height="50" class="doubloon-svg">
                        <polygon points="50,8 61,38 94,38 67,58 77,90 50,70 23,90 33,58 6,38 39,38" fill="gold" stroke="#fffbe6" stroke-width="2"/>
                    </svg>
                    <span class="doubloon-text">${item.name}${item.id === 'doubloon' ? ': +1 –ø—Ä–æ–∫—Ä—É—Ç!' : (item.effect.luck_chance.luck ? `: +${item.effect.luck_chance.luck} –∫ —É–¥–∞—á–µ!` : '')}</span>
                </div>
            `;
            // –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–ø-–∞–ø –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –±–ª–æ–∫–∞ .controls
            const controls = document.querySelector('.controls');
            if (controls) {
                const rect = controls.getBoundingClientRect();
                popup.style.position = 'fixed';
                popup.style.top = (rect.top - 10) + 'px';
                popup.style.left = (rect.left - 10) + 'px';
                popup.style.transform = 'scale(0)';
            }
            document.body.appendChild(popup);
            setTimeout(() => {
                popup.classList.add('show');
                setTimeout(() => {
                    popup.classList.remove('show');
                    popup.classList.add('fade-out');
                    setTimeout(() => {
                        popup.remove();
                        idx++;
                        if (idx < triggeredItems.length) showNext();
                    }, 500);
                }, 1200);
            }, 100);
        }
        showNext();
    }

    function processLuckChanceItems(state) {
        let chanceMultiplier = 1;
        state.inventory.forEach(item => {
            if (item.effect && item.effect.luck_chance_multiplier) {
                chanceMultiplier *= item.effect.luck_chance_multiplier;
            }
        });

        let luckBonus = 0;
        let itemsToRemove = [];
        let triggeredItems = [];
        state.inventory.forEach((item, idx) => {
            if (item.effect && item.effect.luck_chance) {
                const eff = item.effect.luck_chance;
                let chance = eff.chance * chanceMultiplier;
                if (chance > 1) chance = 1;
                if (Math.random() < chance) {
                    triggeredItems.push(item);
                    // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–∞—ë—Ç luck
                    if (eff.luck) {
                        luckBonus += eff.luck;
                        addLog(`${item.name}: +${eff.luck} –∫ —É–¥–∞—á–µ (—à–∞–Ω—Å ${(eff.chance*100).toFixed(1)}% x${chanceMultiplier} = ${(chance*100).toFixed(1)}%)!`, 'win');
                    }
                    // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–∞—ë—Ç –ø—Ä–æ–∫—Ä—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –î—É–±–ª–æ–Ω)
                    if (item.id === 'doubloon') {
                        state.spinsLeft += 1;
                        if (typeof showDoubloonPopup === 'function') showDoubloonPopup();
                        addLog(`${item.name}: +1 –ø—Ä–æ–∫—Ä—É—Ç! (—à–∞–Ω—Å ${(eff.chance*100).toFixed(1)}% x${chanceMultiplier} = ${(chance*100).toFixed(1)}%)`, 'win');
                    }
                    // –ï—Å–ª–∏ breakable, —É–º–µ–Ω—å—à–∞–µ–º uses
                    if (eff.breakable) {
                        if (item.uses === undefined) item.uses = eff.max_uses || 1;
                        item.uses--;
                        if (item.uses <= 0) {
                            addLog(`${item.name} —Å–ª–æ–º–∞–ª—Å—è!`, 'loss');
                            itemsToRemove.push(idx);
                        }
                    }
                }
            }
        });
        // –£–¥–∞–ª—è–µ–º —Å–ª–æ–º–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        for (let i = itemsToRemove.length - 1; i >= 0; i--) {
            state.inventory.splice(itemsToRemove[i], 1);
        }
        if (luckBonus > 0) {
            state.tempLuck = (state.tempLuck || 0) + luckBonus;
        }
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø—ã, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
        if (triggeredItems.length > 0) {
            showLuckChancePopups(triggeredItems);
        }
    }

    async function spin() {
        if (state.spinsLeft <= 0 || state.gameover || state.isSpinning) return;
        
        state.isSpinning = true;
        ui.lever.classList.add('pulled');
        
        // --- –õ–û–ì–ò–ö–ê –°–ß–ê–°–¢–õ–ò–í–û–ô –ú–û–ù–ï–¢–ö–ò ---
        let freeSpin = false;
        if (hasItem('lucky_penny') && !state.firstSpinUsed) {
            freeSpin = true;
            state.firstSpinUsed = true;
            addLog('–°—á–∞—Å—Ç–ª–∏–≤–∞—è –º–æ–Ω–µ—Ç–∫–∞: –ø–µ—Ä–≤—ã–π –ø—Ä–æ–∫—Ä—É—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!', 'win');
        }
        
        // --- –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–ï–î–ú–ï–¢–û–í –° –®–ê–ù–°–û–ú ---
        processLuckChanceItems(state);

        const oldSpinsLeft = state.spinsLeft;
        if (!freeSpin) {
            state.spinsLeft--;
        }
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–æ–≤
        animateSpinsCounter(oldSpinsLeft, state.spinsLeft);
        
        updateUI();
        
        state.grid = generateGrid();
        await runSpinAnimation();
        calculateWinnings();
        
        state.tempLuck = 0;
        state.isSpinning = false;
        ui.lever.classList.remove('pulled');
        updateUI();
    }
    
    function initGame() {
        state = {
            run: 1, // <-- —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ 1
            targetDebt: 66,
            turn: 1,
            coins: 20,
            bankBalance: 0,
            tickets: 5,
            spinsLeft: 0,
            baseInterestRate: 0.30,
            inventory: [],
            shop: [],
            gameover: false,
            isSpinning: false,
            piggyBank: 0,
            tempLuck: 0,
            firstSpinUsed: false,
        };
        // –°–±—Ä–æ—Å —Ü–µ–Ω –Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç—ã –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        CONFIG.SPIN_PACKAGE_1.cost = CONFIG.SPIN_PACKAGE_1.base_cost;
        CONFIG.SPIN_PACKAGE_2.cost = CONFIG.SPIN_PACKAGE_2.base_cost;
        updateInterestRate();
        state.grid = generateGrid();
        
        ui.startScreen.classList.add('hidden');
        ui.gameOverScreen.classList.add('hidden');
        ui.logPanel.innerHTML = '';
        
        renderGrid(true); 

        populateShop();
        addLog(`–ù–∞—á–∞–ª—Å—è –¶–∏–∫–ª –î–æ–ª–≥–∞ #${state.run}. –¶–µ–ª—å: ${state.targetDebt}üí∞ –∑–∞ 3 –¥–Ω—è.`);
        startTurn();
    }

    function startTurn() {
        state.tempLuck = 0;
        state.firstSpinUsed = false;
        // –°–ù–ê–ß–ê–õ–ê –ù–ê–ß–ò–°–õ–Ø–ï–ú –ü–†–û–¶–ï–ù–¢–´, –ü–û–¢–û–ú –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–í–ö–£
        // --- –≠–§–§–ï–ö–¢: on_round_start_coins ---
        const roundStartCoins = getItemEffectValue('on_round_start_coins', 0);
        if (roundStartCoins > 0) {
            state.coins += roundStartCoins;
            addLog(`–ú–æ–Ω–µ—Ç—ã –∑–∞ —Ä–∞—É–Ω–¥: +${roundStartCoins}üí∞.`, 'win');
        }
        // --- –≠–§–§–ï–ö–¢: free_reroll_per_round ---
        state.freeRerolls = getItemEffectValue('free_reroll_per_round', 0);
        if (state.freeRerolls > 0) {
            addLog(`–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ—Ä–æ–ª–ª –º–∞–≥–∞–∑–∏–Ω–∞: ${state.freeRerolls} –∑–∞ —Ä–∞—É–Ω–¥.`, 'win');
        }
        const roundStartSpins = getItemEffectValue('on_round_start_spins', 0);
        if (roundStartSpins > 0) {
            state.spinsLeft += roundStartSpins;
            addLog(`–ö–∞—Ä–º–∞–Ω–Ω—ã–µ —á–∞—Å—ã: +${roundStartSpins} –ø—Ä–æ–∫—Ä—É—Ç –≤ –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞.`, 'win');
        }

        if (state.turn > 1 || state.run > 1) {
            const interest = Math.floor(state.bankBalance * state.baseInterestRate);
            if (interest > 0) {
                state.coins += interest;
                addLog(`–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –∫—ç—à–±–µ–∫: +${interest}üí∞.`, 'win');
            }
        }
        // –¢–û–õ–¨–ö–û –¢–ï–ü–ï–†–¨ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É
        updateInterestRate();
        
        ui.purchaseModalTitle.textContent = `–†–∞—É–Ω–¥ ${state.turn}. –í—Ä–µ–º—è –∑–∞–∫—É–ø–∞—Ç—å—Å—è.`;
        ui.purchaseModalCoins.textContent = `${state.coins}üí∞`;
        if (ui.purchaseModalDebt) ui.purchaseModalDebt.textContent = `${state.targetDebt}üí∞`;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        ui.btnBuySpins7.textContent = `7 –ø—Ä–æ–∫—Ä—É—Ç–æ–≤ + 1üéüÔ∏è (${CONFIG.SPIN_PACKAGE_1.cost}üí∞)`;
        ui.btnBuySpins3.textContent = `3 –ø—Ä–æ–∫—Ä—É—Ç–∞ + 2üéüÔ∏è (${CONFIG.SPIN_PACKAGE_2.cost}üí∞)`;
        ui.btnBuySpin1.textContent = `1 –ø—Ä–æ–∫—Ä—É—Ç (3üí∞)`;

        ui.btnBuySpins7.disabled = state.coins < CONFIG.SPIN_PACKAGE_1.cost;
        ui.btnBuySpins3.disabled = state.coins < CONFIG.SPIN_PACKAGE_2.cost;
        ui.btnBuySpin1.disabled = state.coins < 3 || state.coins >= CONFIG.SPIN_PACKAGE_2.cost;
        if (state.coins < CONFIG.SPIN_PACKAGE_2.cost) {
            ui.btnBuySpin1.style.display = '';
        } else {
            ui.btnBuySpin1.style.display = 'none';
        }
        ui.spinPurchaseModal.classList.remove('hidden');
        updateUI();

        updateMimicTarget();
    }
    
    function buySpins(pkg) {
        if (pkg === 'single') {
            if (state.coins >= 3) {
                state.coins -= 3;
                state.spinsLeft += 1;
                addLog('–ö—É–ø–ª–µ–Ω 1 –ø—Ä–æ–∫—Ä—É—Ç –∑–∞ 3üí∞ (–±–µ–∑ —Ç–∞–ª–æ–Ω–æ–≤).', 'win');
            } else {
                addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö.', 'loss');
            }
            ui.spinPurchaseModal.classList.add('hidden');
            updateUI();
            return;
        }
        if (pkg) {
            if (state.coins >= pkg.cost) {
                state.coins -= pkg.cost;
                state.spinsLeft += pkg.spins;
                state.tickets += pkg.tickets;
                addLog(`–ö—É–ø–ª–µ–Ω–æ: ${pkg.spins} –ø—Ä–æ–∫—Ä—É—Ç–æ–≤ –∏ ${pkg.tickets} —Ç–∞–ª–æ–Ω(–∞/–æ–≤).`);
            } else { addLog(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö.`, 'loss'); }
        }
        ui.spinPurchaseModal.classList.add('hidden');
        updateUI();
    }

    function endTurn() {
        if (state.isSpinning) return;
        // --- –≠–§–§–ï–ö–¢: on_spin_count_bonus ---
        const spinBonus = getItemEffectValue('on_spin_count_bonus', 0);
        if (spinBonus > 0 && state.spinsLeft === 0) {
            state.coins += spinBonus;
            addLog(`–ë–æ–Ω—É—Å –∑–∞ –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏–Ω—ã: +${spinBonus}üí∞.`, 'win');
        }
        ui.eorTitle.textContent = `–ö–æ–Ω–µ—Ü –†–∞—É–Ω–¥–∞ ${state.turn}`;
        ui.eorCoins.textContent = `${state.coins}üí∞`;
        ui.eorBank.textContent = `${state.bankBalance}üí∞`;
        ui.eorDepositAmount.value = '';
        ui.endOfRoundModal.classList.remove('hidden');
    }

    function confirmEndTurn() {
        if (hasItem('scrap_metal') && state.piggyBank > 0) {
            addLog(`üí• –ö–æ–ø–∏–ª–∫–∞ —Ä–∞–∑–±–∏—Ç–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ +${state.piggyBank}üí∞.`, 'win');
            state.coins += state.piggyBank;
            state.piggyBank = 0;
        }

        ui.endOfRoundModal.classList.add('hidden');
        addLog(`--- –†–∞—É–Ω–¥ ${state.turn} –æ–∫–æ–Ω—á–µ–Ω ---`);
        state.turn++;
        if (state.turn > 3) {
            judgementDay();
        } else {
            startTurn();
        }
    }

    // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–ï–†–ï–•–û–î–ê –ù–ê –°–õ–ï–î–£–Æ–©–ò–ô –¶–ò–ö–õ
    function advanceToNextCycle(bonusCoins = 0, bonusTickets = 0) {
        const totalMoney = state.coins + state.bankBalance;
        const standardTickets = 5 + state.run;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        ui.judgementTitle.textContent = "–î–û–õ–ì –í–´–ü–õ–ê–ß–ï–ù";
        ui.judgementTitle.classList.remove('failure');
        
        let bonusText = '';
        if (bonusCoins > 0 || bonusTickets > 0) {
            bonusText = `–ë–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä–æ—Ç—É: <span style=\"color:var(--money-color)\">+${bonusCoins}üí∞</span> –∏ <span style=\"color:var(--ticket-color)\">+${bonusTickets}üéüÔ∏è</span>.<br>`;
        }
        
        ui.judgementText.innerHTML = `–í—ã –≤—ã–∂–∏–ª–∏. –í–µ—Å—å –±–∞–ª–∞–Ω—Å <span style=\"color:var(--money-color)\">${totalMoney}üí∞</span> –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ –±–∞–Ω–∫.<br>
            –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: <span style=\"color:var(--ticket-color)\">${standardTickets}üéüÔ∏è</span>.<br>
            ${bonusText}`;
        
        ui.judgementContinue.onclick = function() {
            ui.judgementModal.classList.add('hidden');
            
            state.run++;
            state.turn = 1;
            
            // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ü–∏–∫–ª–æ–≤, –¥–∞–ª–µ–µ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
            if (state.run === 2) state.targetDebt = 111;
            else if (state.run === 3) state.targetDebt = 666;
            else if (state.run === 4) state.targetDebt = 3333;
            else if (state.run === 5) state.targetDebt = 8888;
            else {
                state.targetDebt = Math.min(Math.floor(state.targetDebt * 2.5 + 10000), 88888888);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç—ã
            CONFIG.SPIN_PACKAGE_1.cost = CONFIG.SPIN_PACKAGE_1.base_cost + (state.run - 1) * 10;
            CONFIG.SPIN_PACKAGE_2.cost = CONFIG.SPIN_PACKAGE_2.base_cost + (state.run - 1) * 10;
            
            state.bankBalance = totalMoney;
            state.coins = bonusCoins;
            state.tickets += standardTickets + bonusTickets;
            state.spinsLeft = 0;
            
            updateInterestRate();
            addLog(`–ù–æ–≤—ã–π –¶–∏–∫–ª –î–æ–ª–≥–∞ #${state.run} –Ω–∞—á–∞–ª—Å—è. –¶–µ–ª—å: ${state.targetDebt}üí∞.`);
            if (bonusCoins > 0 || bonusTickets > 0) addLog(`–ë–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä–æ—Ç—É: +${bonusCoins}üí∞ –∏ +${bonusTickets}üéüÔ∏è`, 'win');
            populateShop();
            startTurn();
        };
        
        ui.judgementModal.classList.remove('hidden');
    }

    // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–£–î–ù–û–ì–û –î–ù–Ø
    function judgementDay() {
        const totalMoney = state.coins + state.bankBalance;
        addLog(`–°–£–î–ù–´–ô –î–ï–ù–¨. –í–∞—à–∞ —Å—É–º–º–∞: ${totalMoney}üí∞. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${state.targetDebt}üí∞.`);
        
        if (state.targetDebt >= 88888888) {
             if (totalMoney >= 88888888) {
                ui.judgementTitle.textContent = "–ü–û–ë–ï–î–ê!";
                ui.judgementTitle.classList.remove('failure');
                ui.judgementText.innerHTML = `–í—ã –≤—ã–ø–ª–∞—Ç–∏–ª–∏ –≤–µ—Å—å –¥–æ–ª–≥! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!<br>–í–∞—à –ø—É—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω.`;
                ui.judgementContinue.onclick = () => { ui.judgementModal.classList.add('hidden'); gameOver(); };
             } else {
                ui.judgementTitle.textContent = "–ü–†–û–í–ê–õ";
                ui.judgementTitle.classList.add('failure');
                ui.judgementText.textContent = `–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã–ø–ª–∞—Ç–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ–ª–≥. –Ø–º–∞ –∂–¥–µ—Ç.`;
                ui.judgementContinue.onclick = () => { ui.judgementModal.classList.add('hidden'); gameOver(); };
             }
             ui.judgementModal.classList.remove('hidden');
             return;
        }

        if (totalMoney >= state.targetDebt) {
            // –ù–∞ 3-–π –¥–µ–Ω—å –±–æ–Ω—É—Å–æ–≤ –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–µ–º advanceToNextCycle –±–µ–∑ –¥–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            advanceToNextCycle(); 
        } else {
            ui.judgementTitle.textContent = "–ü–†–û–í–ê–õ";
            ui.judgementTitle.classList.add('failure');
            ui.judgementText.textContent = `–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Å—É–º–º—É. –Ø–º–∞ –∂–¥–µ—Ç.`;
            ui.judgementContinue.onclick = function() {
                ui.judgementModal.classList.add('hidden');
                gameOver();
            };
            ui.judgementModal.classList.remove('hidden');
        }
    }

    // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –î–û–°–†–û–ß–ù–û–ô –í–´–ü–õ–ê–¢–´
    function payDebtEarly() {
        if (state.turn >= 3) return; // –ë–æ–Ω—É—Å–∞ –Ω–µ—Ç –Ω–∞ 3-–º —Ä–∞—É–Ω–¥–µ
        const totalMoney = state.coins + state.bankBalance;
        if (totalMoney < state.targetDebt) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—É–º–º—É

        let bonusCoins = 0;
        let bonusTickets = 0;

        if (state.turn === 1) {
            bonusCoins = Math.floor(state.targetDebt * 0.25);
            bonusTickets = 5 + state.run;
            addLog('–î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –≤ 1-–π —Ä–∞—É–Ω–¥!', 'win');
        } else if (state.turn === 2) {
            bonusCoins = Math.floor(state.targetDebt * 0.10);
            bonusTickets = 2 + state.run;
            addLog('–î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –≤–æ 2-–π —Ä–∞—É–Ω–¥!', 'win');
        }

        // –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ª–∏—á–Ω—ã–µ
        if (state.coins >= state.targetDebt) {
            state.coins -= state.targetDebt;
        } else {
            // –ï—Å–ª–∏ –Ω–∞–ª–∏—á–Ω—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –±–µ—Ä–µ–º –∏–∑ –±–∞–Ω–∫–∞
            const fromBank = state.targetDebt - state.coins;
            state.bankBalance -= fromBank;
            state.coins = 0;
        }
        
        // –í –±–∞–Ω–∫ –≤–Ω–æ—Å–∏–º —Ä–æ–≤–Ω–æ —Å—É–º–º—É –¥–æ–ª–≥–∞
        state.bankBalance = state.targetDebt;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        ui.judgementTitle.textContent = "–î–û–õ–ì –í–´–ü–õ–ê–ß–ï–ù";
        ui.judgementTitle.classList.remove('failure');
        
        let bonusText = '';
        if (bonusCoins > 0 || bonusTickets > 0) {
            bonusText = `–ë–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä–æ—Ç—É: <span style=\"color:var(--money-color)\">+${bonusCoins}üí∞</span> –∏ <span style=\"color:var(--ticket-color)\">+${bonusTickets}üéüÔ∏è</span>.<br>`;
        }
        
        ui.judgementText.innerHTML = `–í—ã –≤—ã–∂–∏–ª–∏. –î–æ–ª–≥ –ø–æ–≥–∞—à–µ–Ω.<br>
            –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: <span style=\"color:var(--ticket-color)\">${5 + state.run}üéüÔ∏è</span>.<br>
            ${bonusText}`;
        
        ui.judgementContinue.onclick = function() {
            ui.judgementModal.classList.add('hidden');
            
            state.run++;
            state.turn = 1;
            
            // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ü–∏–∫–ª–æ–≤, –¥–∞–ª–µ–µ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
            if (state.run === 2) state.targetDebt = 111;
            else if (state.run === 3) state.targetDebt = 666;
            else if (state.run === 4) state.targetDebt = 3333;
            else if (state.run === 5) state.targetDebt = 8888;
            else {
                state.targetDebt = Math.min(Math.floor(state.targetDebt * 2.5 + 10000), 88888888);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç—ã
            CONFIG.SPIN_PACKAGE_1.cost = CONFIG.SPIN_PACKAGE_1.base_cost + (state.run - 1) * 10;
            CONFIG.SPIN_PACKAGE_2.cost = CONFIG.SPIN_PACKAGE_2.base_cost + (state.run - 1) * 10;
            
            // –ë–∞–Ω–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å (—Ä–∞–≤–µ–Ω —Å—É–º–º–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–æ–ª–≥–∞)
            // –í –Ω–∞–ª–∏—á–Ω—ã–µ –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
            state.coins += bonusCoins;
            state.tickets += (5 + state.run) + bonusTickets;
            state.spinsLeft = 0;
            
            updateInterestRate();
            addLog(`–ù–æ–≤—ã–π –¶–∏–∫–ª –î–æ–ª–≥–∞ #${state.run} –Ω–∞—á–∞–ª—Å—è. –¶–µ–ª—å: ${state.targetDebt}üí∞.`);
            if (bonusCoins > 0 || bonusTickets > 0) addLog(`–ë–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä–æ—Ç—É: +${bonusCoins}üí∞ –∏ +${bonusTickets}üéüÔ∏è`, 'win');
            populateShop();
            startTurn();
        };
        
        ui.judgementModal.classList.remove('hidden');
    }
    
    function gameOver() {
        state.gameover = true;
        ui.finalRun.textContent = state.run;
        ui.gameOverScreen.classList.remove('hidden');
        addLog("–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê.", 'loss');
    }
    
    function deposit(amount, isFromEOR = false) {
        if (isNaN(amount) || amount <= 0) return addLog("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.", 'loss');
        if (amount > state.coins) return addLog("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö.", 'loss');
        state.coins -= amount;
        state.bankBalance += amount;
        addLog(`–í–Ω–µ—Å–µ–Ω–æ –≤ –±–∞–Ω–∫: ${amount}üí∞.`);
        if (isFromEOR) {
            ui.eorDepositAmount.value = '';
            ui.eorCoins.textContent = `${state.coins}üí∞`;
            ui.eorBank.textContent = `${state.bankBalance}üí∞`;
        }
        ui.depositAmountInput.value = '';
        updateUI();
    }

    function rerollShop() {
        // --- –≠–§–§–ï–ö–¢: free_reroll_per_round ---
        if (state.freeRerolls && state.freeRerolls > 0) {
            state.freeRerolls--;
            populateShop();
            addLog('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ—Ä–æ–ª–ª –º–∞–≥–∞–∑–∏–Ω–∞!', 'win');
            // --- –≠–§–§–ï–ö–¢: resellers_ticket ---
            if (hasItem('resellers_ticket')) {
                state.tickets += 1;
                addLog('–ë–∏–ª–µ—Ç –ø–µ—Ä–µ–∫—É–ø—â–∏–∫–∞: +1üéüÔ∏è –∑–∞ —Ä–µ—Ä–æ–ª–ª!', 'win');
            }
            updateUI();
            return;
        }
        if (state.tickets >= CONFIG.REROLL_COST) {
            state.tickets -= CONFIG.REROLL_COST;
            populateShop();
            addLog(`–ú–∞–≥–∞–∑–∏–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –∑–∞ ${CONFIG.REROLL_COST}üéüÔ∏è.`);
            // --- –≠–§–§–ï–ö–¢: resellers_ticket ---
            if (hasItem('resellers_ticket')) {
                state.tickets += 1;
                addLog('–ë–∏–ª–µ—Ç –ø–µ—Ä–µ–∫—É–ø—â–∏–∫–∞: +1üéüÔ∏è –∑–∞ —Ä–µ—Ä–æ–ª–ª!', 'win');
            }
            updateUI();
        } else { addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–ª–æ–Ω–æ–≤.', 'loss'); }
    }

    function buyItem(itemId) {
        if (state.inventory.length >= 9) {
            addLog('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –º–∞–∫—Å–∏–º—É–º 9 –∞–º—É–ª–µ—Ç–æ–≤!', 'loss');
            return;
        }
        const item = state.shop.find(i => i.id === itemId);
        if (!item || state.tickets < item.cost) return addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–ª–æ–Ω–æ–≤.', 'loss');
        state.tickets -= item.cost;
        state.inventory.push(item);
        state.shop = state.shop.filter(i => i.id !== itemId);
        addLog(`–ö—É–ø–ª–µ–Ω –∞–º—É–ª–µ—Ç: ${item.name}`, 'win');
        updateMimicTarget();
        if (ui.planningModal.classList.contains('hidden')) {
            updateUI();
        } else {
            ui.planningTickets.textContent = state.tickets;
            renderPlanningShop();
            renderPlanningInventory();
            updateUI();
        }
    }
    
    function updateUI() {
        ui.statRun.textContent = state.run;
        ui.statTurn.textContent = `${state.turn} / 3`;
        ui.statDebt.textContent = `${state.targetDebt}üí∞`;
        if (ui.statDebtStart) ui.statDebtStart.textContent = `${state.targetDebt}üí∞`;
        ui.statCoins.textContent = `${state.coins}üí∞`;
        ui.bankBalance.textContent = `${state.bankBalance}üí∞`;
        ui.statTickets.textContent = `${state.tickets}üéüÔ∏è`;
        const baseLuck = getItemEffectValue('luck', 0);
        const debtLuck = getItemEffectValue('per_run_bonus.luck', 0) * state.run;
        let luckText = `${baseLuck}`;
        if (debtLuck > 0) luckText += ` (+${debtLuck} –æ—Ç –¥–æ–ª–≥–∞)`;
        if (state.tempLuck > 0) luckText += ` (+${state.tempLuck})`;
        ui.statLuck.textContent = luckText;
        if (!ui.spinsLeft.querySelector('.spins-counter')) {
            ui.spinsLeft.textContent = state.spinsLeft;
        }
        ui.atmInterestRate.textContent = (state.baseInterestRate * 100).toFixed(0);
        
        let bonus = state.inventory.reduce((acc, item) => acc + (item.effect?.interest_rate_bonus || 0), 0);
        let bonusText = '';
        if (bonus > 0) bonusText = ` <span style="color:var(--highlight-color); font-size:12px;">(+${(bonus*100).toFixed(0)}% –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤)</span>`;
        let percent = state.baseInterestRate;
        let bank = state.bankBalance;
        let profit = Math.floor(bank * percent);
        let profitText = `<div style='font-size:13px; margin-top:4px;'>–°–ª–µ–¥. –ø—Ä–æ—Ü–µ–Ω—Ç: <b style='color:var(--money-color)'>+${profit}üí∞</b> (${(percent*100).toFixed(0)}%${bonusText})</div>`;
        let infoBlock = document.getElementById('interest-info-block');
        if (!infoBlock) {
            infoBlock = document.createElement('div');
            infoBlock.id = 'interest-info-block';
            ui.atmInterestRate.parentElement.parentElement.appendChild(infoBlock);
        }
        infoBlock.innerHTML = profitText;
        
        // –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ï–ö–¶–ò–ò –î–û–°–†–û–ß–ù–û–ì–û –ü–û–ì–ê–®–ï–ù–ò–Ø
        if (state.turn >= 3) {
            ui.earlyPayoffSection.style.display = 'none';
        } else {
            ui.earlyPayoffSection.style.display = 'block';
            const totalMoney = state.coins + state.bankBalance;
            const canAfford = totalMoney >= state.targetDebt; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
            ui.btnPayDebtEarly.disabled = !canAfford;

            let bonusInfo = '';
            if (state.turn === 1) {
                const bCoins = Math.floor(state.targetDebt * 0.25);
                const bTickets = 5 + state.run;
                bonusInfo = `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–∞—É–Ω–¥ 1: <b style="color:var(--money-color)">+${bCoins}üí∞</b> –∏ <b style="color:var(--ticket-color)">+${bTickets}üéüÔ∏è</b>`;
            } else if (state.turn === 2) {
                const bCoins = Math.floor(state.targetDebt * 0.10);
                const bTickets = 2 + state.run;
                bonusInfo = `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–∞—É–Ω–¥ 2: <b style="color:var(--money-color)">+${bCoins}üí∞</b> –∏ <b style="color:var(--ticket-color)">+${bTickets}üéüÔ∏è</b>`;
            }
            ui.earlyPayoffBonusInfo.innerHTML = bonusInfo;
        }

        ui.btnEndTurn.disabled = state.isSpinning || state.spinsLeft > 0;
        ui.btnRerollShop.textContent = `Reroll (${CONFIG.REROLL_COST}üéüÔ∏è)`;
        renderInventory(); 
        renderShop();
    }
    
    function renderGrid(isInitialSetup = false) {
        if (!isInitialSetup) return;

        ui.slotMachine.innerHTML = '';
        for (let i = 0; i < CONFIG.ROWS * CONFIG.COLS; i++) {
            const cell = document.createElement('div');
            cell.className = 'slot-cell';
            
            const reel = document.createElement('div');
            reel.className = 'reel';
            cell.appendChild(reel);
            
            ui.slotMachine.appendChild(cell);
        }
        updateReels(true);
    }

    function updateReels(isInitial = false) {
        const reels = ui.slotMachine.querySelectorAll('.reel');
        const finalGrid = state.grid;

        reels.forEach((reel, i) => {
            reel.innerHTML = '';
            
            const reelSymbols = [];
            for (let j = 0; j < 19; j++) {
                reelSymbols.push(weightedSymbols[Math.floor(Math.random() * weightedSymbols.length)]);
            }
            reelSymbols.push(finalGrid[i]);

            reelSymbols.forEach(symbol => {
                const symbolDiv = document.createElement('div');
                symbolDiv.className = 'symbol';
                symbolDiv.textContent = symbol.graphic;
                reel.appendChild(symbolDiv); 
            });

            if (isInitial) {
                reel.style.transition = 'none';
                reel.style.transform = `translateY(-95%)`;
            }
        });
    }
    
    async function runSpinAnimation() {
        updateReels(false);

        const reels = ui.slotMachine.querySelectorAll('.reel');
        const promises = [];
        
        reels.forEach((reel, i) => {
            reel.style.transition = 'none';
            reel.style.transform = 'translateY(0)';
            reel.offsetHeight;

            const delay = (i % CONFIG.COLS) * 100;
            promises.push(new Promise(resolve => {
                setTimeout(() => {
                    reel.style.transition = `transform ${CONFIG.SPIN_ANIMATION_TIME / 1000}s cubic-bezier(0.25, 0.1, 0.25, 1)`;
                    reel.style.transform = `translateY(-95%)`;
                    reel.addEventListener('transitionend', resolve, { once: true });
                }, delay);
            }));
        });
        
        await Promise.all(promises);
        await new Promise(res => setTimeout(res, 200));
    }

    // --- NEW: HELPER FUNCTION TO CREATE ITEM ELEMENTS ---
    function createItemElement(item, purchaseCallback) {
        const itemDiv = document.createElement('div');
        itemDiv.className = `item rarity-${item.rarity}`;
        
        // Set click handlers
        if (purchaseCallback) {
            itemDiv.onclick = () => purchaseCallback(item.id);
            if (state.tickets < item.cost || state.inventory.length >= 9) {
                itemDiv.style.opacity = '0.5';
                itemDiv.style.cursor = 'not-allowed';
            }
        } else {
            itemDiv.style.cursor = 'pointer';
            itemDiv.onclick = () => showAmuletPopup(item);
        }

        // Thumbnail
        const thumbnailDiv = document.createElement('div');
        thumbnailDiv.className = 'item-thumbnail';
        const thumbnailValue = item.thumbnail || '?';
        if (thumbnailValue.endsWith('.png') || thumbnailValue.endsWith('.jpg') || thumbnailValue.endsWith('.gif')) {
            thumbnailDiv.innerHTML = `<img src="img/${thumbnailValue}" alt="${item.name}" style="width:100%; height:100%; object-fit:cover;">`;
        } else {
            thumbnailDiv.textContent = thumbnailValue;
        }

        // Info container
        const infoDiv = document.createElement('div');
        infoDiv.className = 'item-info';
        
        // Header (Name + Cost)
        const headerDiv = document.createElement('div');
        headerDiv.className = 'item-header';
        
        const nameSpan = document.createElement('span');
        nameSpan.className = 'item-name';
        nameSpan.textContent = item.name;
        
        headerDiv.appendChild(nameSpan);

        if (purchaseCallback && item.cost) {
            const costSpan = document.createElement('span');
            costSpan.className = 'item-cost';
            costSpan.textContent = `${item.cost}üéüÔ∏è`;
            headerDiv.appendChild(costSpan);
        }
        
        // Description
        const descP = document.createElement('p');
        descP.className = 'item-desc';
        descP.innerHTML = item.desc; // Use innerHTML to support potential formatting
        
        // Assembling info
        infoDiv.appendChild(headerDiv);
        infoDiv.appendChild(descP);

        // Add uses info if applicable
        if (item.effect?.luck_chance?.breakable) {
            const maxUses = item.effect.luck_chance.max_uses || item.uses || 10;
            const usesSpan = document.createElement('span');
            usesSpan.style.cssText = 'color:#ffab40; font-size:11px; margin-top: auto;';
            usesSpan.textContent = `(–ò—Å–ø: ${item.uses !== undefined ? item.uses : maxUses}/${maxUses})`;
            infoDiv.appendChild(usesSpan);
        }

        // Add mimic info if applicable
        if(item.id === 'mimic_chest') {
            let mimicInfoText = '';
            if(item.effect?.mimic?.target) {
                const target = ALL_ITEMS.find(i => i.id === item.effect.mimic.target);
                mimicInfoText = target ? `–ö–æ–ø–∏—Ä—É–µ—Ç: <b>${target.name}</b>` : `–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
            } else {
                mimicInfoText = `<i>–ù–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>`;
            }
            const mimicDiv = document.createElement('div');
            mimicDiv.style.cssText = 'color:#b388ff; font-size:11px; margin-top: auto;';
            mimicDiv.innerHTML = mimicInfoText;
            infoDiv.appendChild(mimicDiv);
        }

        // Assembling the final item element
        itemDiv.appendChild(thumbnailDiv);
        itemDiv.appendChild(infoDiv);

        return itemDiv;
    }

    function renderShop() {
        ui.shopItems.innerHTML = '';
        if (state.shop.length === 0) {
            ui.shopItems.innerHTML = '<p style="text-align:center; color: #777;">–ü—É—Å—Ç–æ</p>';
        }
        state.shop.forEach(item => {
            const itemDiv = createItemElement(item, buyItem);
            ui.shopItems.appendChild(itemDiv);
        });
    }

    // --- –ü–û–ü–ê–ü –ö–ê–†–¢–û–ß–ö–ò –ê–ú–£–õ–ï–¢–ê ---
    let amuletPopup = null;
    function showAmuletPopup(item) {
        if (amuletPopup) amuletPopup.remove();
        amuletPopup = document.createElement('div');
        amuletPopup.className = 'amulet-popup-overlay';
        
        const thumbnailValue = item.thumbnail || '?';
        let thumbnailHTML = '';
        if (thumbnailValue.endsWith('.png') || thumbnailValue.endsWith('.jpg') || thumbnailValue.endsWith('.gif')) {
            thumbnailHTML = `<img src="img/${thumbnailValue}" alt="${item.name}" style="max-width: 100%; max-height: 100%; object-fit: contain;">`;
        } else {
            thumbnailHTML = thumbnailValue;
        }
        
        amuletPopup.innerHTML = `
            <div class="amulet-popup-card">
                <div class="amulet-popup-thumbnail">${thumbnailHTML}</div>
                <div class="amulet-popup-title">${item.name}</div>
                <div class="amulet-popup-desc">${item.desc}</div>
                <div style="margin-top: 20px;">
                    <button class="amulet-popup-remove">–í—ã–∫–∏–Ω—É—Ç—å</button>
                    <button class="amulet-popup-close">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        `;
        document.body.appendChild(amuletPopup);
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç—å
        amuletPopup.querySelector('.amulet-popup-close').onclick = () => amuletPopup.remove();
        // –ö–ª–∏–∫ –≤–Ω–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        amuletPopup.onclick = (e) => { if (e.target === amuletPopup) amuletPopup.remove(); };
        // –ö–Ω–æ–ø–∫–∞ –≤—ã–∫–∏–Ω—É—Ç—å
        amuletPopup.querySelector('.amulet-popup-remove').onclick = () => {
            removeAmulet(item.id);
            amuletPopup.remove();
        };
    }
    function removeAmulet(itemId) {
        // –ù–∞—Ö–æ–¥–∏–º –∞–º—É–ª–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        const idx = state.inventory.findIndex(i => i.id === itemId);
        if (idx !== -1) {
            // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            const [removed] = state.inventory.splice(idx, 1);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—É–ª –º–∞–≥–∞–∑–∏–Ω–∞ (ALL_ITEMS)
            if (!ALL_ITEMS.some(i => i.id === removed.id)) {
                ALL_ITEMS.push(removed);
            }
            // –í–æ–∑–≤—Ä–∞—Ç —Ç–∞–ª–æ–Ω–æ–≤ –∑–∞ —Ä–µ–¥–∫–∏–µ –∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ
            let refund = 0;
            if (removed.rarity === 'rare') refund = 2;
            if (removed.rarity === 'legendary') refund = 3;
            if (refund > 0) {
                state.tickets += refund;
                addLog(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ ${refund} üéüÔ∏è –∑–∞ –≤—ã–∫–∏–Ω—É—Ç—ã–π –∞–º—É–ª–µ—Ç (${removed.rarity === 'rare' ? '—Ä–µ–¥–∫–∏–π' : '–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'}).`, 'win');
            }
            addLog(`–ê–º—É–ª–µ—Ç "${removed.name}" –≤—ã–∫–∏–Ω—É—Ç –∏ —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ.`, 'loss');
            updateMimicTarget();
            updateUI();
        }
    }

    function renderInventory() {
        ui.inventoryItems.innerHTML = '';
        let counter = document.getElementById('inventory-counter');
        if (!counter) {
            counter = document.createElement('div');
            counter.id = 'inventory-counter';
            counter.style.textAlign = 'right';
            counter.style.fontSize = '13px';
            counter.style.marginBottom = '4px';
            ui.inventoryItems.parentElement.insertBefore(counter, ui.inventoryItems);
        }
        counter.textContent = `–ê–º—É–ª–µ—Ç—ã: ${state.inventory.length} / 9`;
        if (state.inventory.length >= 9) {
            counter.style.color = 'var(--danger-color)';
            counter.style.fontWeight = 'bold';
            counter.style.textShadow = '0 0 6px var(--danger-color)';
        } else {
            counter.style.color = '';
            counter.style.fontWeight = '';
            counter.style.textShadow = '';
        }
        if (state.inventory.length === 0) {
            ui.inventoryItems.innerHTML = '<p style="text-align:center; color: #777; grid-column: 1 / -1;">–ü—É—Å—Ç–æ</p>';
        }
        state.inventory.forEach(item => {
            const itemDiv = createItemElement(item, null);
            ui.inventoryItems.appendChild(itemDiv);
        });
    }

    function openPlanningMode() {
        ui.spinPurchaseModal.classList.add('hidden');
        ui.planningModal.classList.remove('hidden');
        ui.planningTickets.textContent = state.tickets;
        renderPlanningShop();
        renderPlanningInventory();
    }

    function closePlanningMode() {
        ui.planningModal.classList.add('hidden');
        ui.spinPurchaseModal.classList.remove('hidden');
    }

    function renderPlanningShop() {
        ui.planningShopItems.innerHTML = '';
        if (state.shop.length === 0) {
            ui.planningShopItems.innerHTML = '<p style="text-align:center; color: #777;">–ü—É—Å—Ç–æ</p>';
        }
        state.shop.forEach(item => {
            const itemDiv = createItemElement(item, buyItem);
            ui.planningShopItems.appendChild(itemDiv);
        });
    }

    function renderPlanningInventory() {
        ui.planningInventoryItems.innerHTML = '';
        let counter = document.getElementById('planning-inventory-counter');
        if (!counter) {
            counter = document.createElement('div');
            counter.id = 'planning-inventory-counter';
            counter.style.textAlign = 'right';
            counter.style.fontSize = '13px';
            counter.style.marginBottom = '4px';
            ui.planningInventoryItems.parentElement.insertBefore(counter, ui.planningInventoryItems);
        }
        counter.textContent = `–ê–º—É–ª–µ—Ç—ã: ${state.inventory.length} / 9`;
        if (state.inventory.length >= 9) {
            counter.style.color = 'var(--danger-color)';
            counter.style.fontWeight = 'bold';
            counter.style.textShadow = '0 0 6px var(--danger-color)';
        } else {
            counter.style.color = '';
            counter.style.fontWeight = '';
            counter.style.textShadow = '';
        }
        if (state.inventory.length === 0) {
            ui.planningInventoryItems.innerHTML = '<p style="text-align:center; color: #777; grid-column: 1 / -1;">–ü—É—Å—Ç–æ</p>';
        }
        state.inventory.forEach(item => {
            const itemDiv = createItemElement(item, null);
            ui.planningInventoryItems.appendChild(itemDiv);
        });
    }

    function rerollPlanningShop() {
        if (state.tickets >= CONFIG.REROLL_COST) {
            state.tickets -= CONFIG.REROLL_COST;
            populateShop();
            addLog(`–ú–∞–≥–∞–∑–∏–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –∑–∞ ${CONFIG.REROLL_COST}üéüÔ∏è.`);
            // --- –≠–§–§–ï–ö–¢: resellers_ticket ---
            if (hasItem('resellers_ticket')) {
                state.tickets += 1;
                addLog('–ë–∏–ª–µ—Ç –ø–µ—Ä–µ–∫—É–ø—â–∏–∫–∞: +1üéüÔ∏è –∑–∞ —Ä–µ—Ä–æ–ª–ª!', 'win');
            }
            ui.planningTickets.textContent = state.tickets;
            renderPlanningShop();
            updateUI();
        } else { addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–ª–æ–Ω–æ–≤.', 'loss'); }
    }

    // --- –î–û–ë–ê–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ –î–õ–Ø –ü–û–î–°–ß–Å–¢–ê –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ô –°–¢–ê–í–ö–ò ---
    function getMinInterestRate() {
        let min = 0.03;
        const bonus = state.inventory.reduce((acc, item) => acc + (item.effect?.interest_rate_bonus || 0), 0);
        const floor = state.inventory.reduce((acc, item) => acc + (item.effect?.min_interest_rate_floor || 0), 0);
        return min + bonus + floor;
    }

    // --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–í–ö–ò ---
    function updateInterestRate() {
        // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ 30% (0.30)
        let base = 0.30;
        // –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞ —Ü–∏–∫–ª—ã (run)
        base -= (state.run - 1) * 0.03;
        // –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞ –¥–Ω–∏ (turn)
        base -= (state.turn - 1) * 0.10;
        // –ú–∏–Ω–∏–º—É–º
        const minRate = getMinInterestRate();
        if (base < minRate) base = minRate;
        state.baseInterestRate = base;
    }

    // --- –í–´–ë–û–† –¶–ï–õ–ò –î–õ–Ø –°–£–ù–î–£–ö–ê-–ú–ò–ú–ò–ö–ê ---
    function updateMimicTarget() {
        const mimicItem = state.inventory.find(item => item.id === 'mimic_chest');
        if (mimicItem) {
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞–º—É–ª–µ—Ç, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –º–∏–º–∏–∫–∞
            const candidates = state.inventory.filter(item => item.id !== 'mimic_chest');
            if (candidates.length > 0) {
                const target = candidates[Math.floor(Math.random() * candidates.length)];
                mimicItem.effect.mimic = { target: target.id };
                console.log('[DEBUG] –°—É–Ω–¥—É–∫-–ú–∏–º–∏–∫ –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å:', target);
            } else {
                mimicItem.effect.mimic = { target: undefined };
                console.log('[DEBUG] –°—É–Ω–¥—É–∫-–ú–∏–º–∏–∫: –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–º—É–ª–µ—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
            }
        }
    }

    // --- –°–û–ë–´–¢–ò–Ø ---
    ui.btnStartGame.onclick = initGame;
    ui.btnRestartGame.onclick = initGame;
    ui.lever.onclick = spin;
    ui.btnDeposit.onclick = () => deposit(parseInt(ui.depositAmountInput.value, 10), false);
    ui.btnEndTurn.onclick = endTurn;
    ui.btnConfirmEndTurn.onclick = confirmEndTurn;
    ui.btnEorDeposit.onclick = () => deposit(parseInt(ui.eorDepositAmount.value, 10), true);
    ui.btnBuySpins7.onclick = () => buySpins(CONFIG.SPIN_PACKAGE_1);
    ui.btnBuySpins3.onclick = () => buySpins(CONFIG.SPIN_PACKAGE_2);
    ui.btnBuySpin1.onclick = () => buySpins('single');
    ui.btnBuyNothing.onclick = () => buySpins(null);
    ui.btnRerollShop.onclick = rerollShop;
    ui.btnPlanning.onclick = openPlanningMode;
    ui.btnPlanningReroll.onclick = rerollPlanningShop;
    ui.btnFinishPlanning.onclick = closePlanningMode;
    ui.btnPayDebtEarly.onclick = payDebtEarly; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    ui.startScreen.classList.remove('hidden');

    // --- DEV MENU ---
    const devBtn = document.getElementById('dev-menu-btn');
    const devModal = document.getElementById('dev-menu-modal');
    const devAddCoins = document.getElementById('dev-add-coins');
    const devAddTickets = document.getElementById('dev-add-tickets');
    const devSetInterest = document.getElementById('dev-set-interest');
    const devGiveItem = document.getElementById('dev-give-item');
    const devClose = document.getElementById('dev-close-menu');
    const devItemSelect = document.getElementById('dev-item-select');
    const devSymbolChances = document.getElementById('dev-symbol-chances');
    const devApplyChances = document.getElementById('dev-apply-chances');
    const devApplyLuck = document.getElementById('dev-apply-luck');
    const devLuckInput = document.getElementById('dev-luck-input');

    devBtn.onclick = () => { 
        devModal.classList.remove('hidden');
        // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        devItemSelect.innerHTML = '';
        ALL_ITEMS.forEach(item => {
            const opt = document.createElement('option');
            opt.value = item.id;
            opt.textContent = `${item.name} (${item.rarity})`;
            devItemSelect.appendChild(opt);
        });
        // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —à–∞–Ω—Å—ã —Å–∏–º–≤–æ–ª–æ–≤
        devSymbolChances.innerHTML = '';
        SYMBOLS.forEach((sym, idx) => {
            const row = document.createElement('div');
            row.style.display = 'flex';
            row.style.alignItems = 'center';
            row.style.gap = '8px';
            row.style.marginBottom = '2px';
            row.innerHTML = `<span style='width:30px;'>${sym.graphic}</span><input type='number' min='1' style='width:60px;' id='dev-sym-${idx}' value='${sym.weight}'>`;
            devSymbolChances.appendChild(row);
        });
        // –ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —É–¥–∞—á–∏
        devLuckInput.value = state.tempLuck;
    };
    devClose.onclick = () => { devModal.classList.add('hidden'); };
    devAddCoins.onclick = () => { state.coins += 1000; addLog('Dev: +1000 –º–æ–Ω–µ—Ç', 'win'); updateUI(); };
    devAddTickets.onclick = () => { state.tickets += 100; addLog('Dev: +100 —Ç–∞–ª–æ–Ω–æ–≤', 'win'); updateUI(); };
    devSetInterest.onclick = () => { state.baseInterestRate = 0.5; addLog('Dev: –°—Ç–∞–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ 50%', 'win'); updateUI(); };
    devGiveItem.onclick = () => {
        const id = devItemSelect.value;
        if (!state.inventory.some(i => i.id === id)) {
            const item = ALL_ITEMS.find(i => i.id === id);
            state.inventory.push(item);
            addLog(`Dev: –í—ã–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: ${item.name}`, 'win');
            updateUI();
        } else {
            addLog('Dev: –≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.', 'loss');
        }
    };
    devApplyChances.onclick = () => {
        SYMBOLS.forEach((sym, idx) => {
            const val = parseInt(document.getElementById(`dev-sym-${idx}`).value, 10);
            if (!isNaN(val) && val > 0) sym.weight = val;
        });
        updateWeightedSymbols();
        addLog('Dev: –®–∞–Ω—Å—ã —Å–∏–º–≤–æ–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.', 'win');
    };
    devApplyLuck.onclick = () => {
        const val = parseInt(devLuckInput.value, 10);
        if (!isNaN(val)) {
            state.tempLuck = val;
            addLog(`Dev: –í—Ä–µ–º–µ–Ω–Ω–∞—è —É–¥–∞—á–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${val}`, 'win');
            // –í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—É—é —É–¥–∞—á—É –∏ –≤–µ—Å–∞ —Å–∏–º–≤–æ–ª–æ–≤ (—Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)
            const totalLuck = getItemEffectValue('luck', 0) + state.tempLuck + (hasItem('growing_debt') ? getItemEffectValue('per_run_bonus.luck', 0, 'sum') * state.run : 0);
            let weights = SYMBOLS.map(s => `${s.graphic}:${s.weight}`).join(' ');
            addLog(`Dev: –ò—Ç–æ–≥–æ–≤–∞—è —É–¥–∞—á–∞: ${totalLuck}, –≤–µ—Å–∞: ${weights}`);
            devDebugLuck = true;
            updateUI();
        }
    };

    window.showDoubloonPopup = function() {
        const popup = document.createElement('div');
        popup.className = 'doubloon-popup';
        popup.innerHTML = `
            <div class="doubloon-star">
                <svg viewBox="0 0 100 100" width="50" height="50" class="doubloon-svg">
                    <polygon points="50,8 61,38 94,38 67,58 77,90 50,70 23,90 33,58 6,38 39,38" fill="gold" stroke="#fffbe6" stroke-width="2"/>
                </svg>
                <span class="doubloon-text">–î—É–±–ª–æ–Ω +1</span>
            </div>
        `;
        // –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–ø-–∞–ø –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –±–ª–æ–∫–∞ .controls
        const controls = document.querySelector('.controls');
        if (controls) {
            const rect = controls.getBoundingClientRect();
            popup.style.position = 'fixed';
            popup.style.top = (rect.top - 10) + 'px';
            popup.style.left = (rect.left - 10) + 'px';
            popup.style.transform = 'scale(0)';
        }
        document.body.appendChild(popup);
        setTimeout(() => {
            popup.classList.add('show');
            setTimeout(() => {
                popup.classList.remove('show');
                popup.classList.add('fade-out');
                setTimeout(() => popup.remove(), 500);
            }, 1800);
        }, 100);
    }

    // --- –î–û–ë–ê–í–õ–Ø–Æ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –î–û–õ–ì–ê –ù–ê –°–¢–ê–†–¢–ï ---
    function updateStartDebt() {
        const el = document.getElementById('start-debt-value');
        if (el) el.textContent = state.targetDebt;
    }
    // --- –ú–ò–ù–ò-–¢–£–¢–û–†–ò–ê–õ ---
    const tutorialPages = [
        {
            title: '–¶–µ–ª—å –∏–≥—Ä—ã',
            text: '–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–ø–ª–∞—Ç–∏—Ç—å –¥–æ–ª–≥ –∑–∞ 3 —Ä–∞—É–Ω–¥–∞. –ö–∞–∂–¥—ã–π —Ü–∏–∫–ª –¥–æ–ª–≥ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è. –î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 88,888,888üí∞, —á—Ç–æ–±—ã –ø–æ–±–µ–¥–∏—Ç—å!'
        },
        {
            title: '–ü—Ä–æ–∫—Ä—É—Ç—ã –∏ –±–∞–Ω–∫',
            text: '–ü–æ–∫—É–ø–∞–π—Ç–µ –ø—Ä–æ–∫—Ä—É—Ç—ã –∑–∞ –º–æ–Ω–µ—Ç—ã, –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –∏ –≤–Ω–æ—Å–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫. –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –±–∞–Ω–∫ –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã.'
        },
        {
            title: '–ê–º—É–ª–µ—Ç—ã –∏ –º–∞–≥–∞–∑–∏–Ω',
            text: '–ü–æ–∫—É–ø–∞–π—Ç–µ –∞–º—É–ª–µ—Ç—ã –∑–∞ —Ç–∞–ª–æ–Ω—ã. –ê–º—É–ª–µ—Ç—ã –¥–∞—é—Ç –±–æ–Ω—É—Å—ã: –±–æ–ª—å—à–µ –≤—ã–∏–≥—Ä—ã—à–µ–π, –ø—Ä–æ—Ü–µ–Ω—Ç—ã, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã.'
        },
        {
            title: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞—á–∞',
            text: '–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ–∫—É–ø–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–¥–∞—á—É –∏ –±–æ–Ω—É—Å—ã, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤—Å–µ —Ü–∏–∫–ª—ã –∏ –≤—ã–ø–ª–∞—Ç–∏—Ç—å –¥–æ–ª–≥!'
        }
    ];
    let tutorialIndex = 0;
    function showTutorialPage(idx) {
        const pages = document.getElementById('tutorial-pages');
        if (!pages) return;
        const page = tutorialPages[idx];
        pages.innerHTML = `<h3>${page.title}</h3><p>${page.text}</p><div style='text-align:center;margin-top:10px;color:#aaa;'>–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${idx+1} / ${tutorialPages.length}</div>`;
        document.getElementById('tutorial-prev').disabled = idx === 0;
        document.getElementById('tutorial-next').disabled = idx === tutorialPages.length-1;
    }
    function openTutorial() {
        document.getElementById('tutorial-modal').classList.remove('hidden');
        showTutorialPage(tutorialIndex);
    }
    function closeTutorial() {
        document.getElementById('tutorial-modal').classList.add('hidden');
    }
    // --- –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ ---
    const btnShowTutorial = document.getElementById('btn-show-tutorial');
    if (btnShowTutorial) btnShowTutorial.onclick = openTutorial;
    const tutorialPrev = document.getElementById('tutorial-prev');
    const tutorialNext = document.getElementById('tutorial-next');
    const tutorialClose = document.getElementById('tutorial-close');
    if (tutorialPrev) tutorialPrev.onclick = () => { if (tutorialIndex > 0) { tutorialIndex--; showTutorialPage(tutorialIndex); } };
    if (tutorialNext) tutorialNext.onclick = () => { if (tutorialIndex < tutorialPages.length-1) { tutorialIndex++; showTutorialPage(tutorialIndex); } };
    if (tutorialClose) tutorialClose.onclick = closeTutorial;
    // –û–±–Ω–æ–≤–ª—è—Ç—å —Å—É–º–º—É –¥–æ–ª–≥–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
    const origInitGame = initGame;
    initGame = function() {
        origInitGame.apply(this, arguments);
        updateStartDebt();
    };
});