const ALL_PASSIVES = [
    // --- –†–∞–∑–æ–≤—ã–µ –±–∞—Ñ—ã ---
    {
        id: 'start_money',
        name: '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª',
        desc: '–ü–æ–ª—É—á–∏—Ç–µ +20üí∞ –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã.',
        emoji: 'üí∞',
        type: 'one_time',
        effect: (state) => { state.coins += 20; }
    },
    {
        id: 'start_tickets',
        name: '–°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ç–∞–ª–æ–Ω—ã',
        desc: '–ü–æ–ª—É—á–∏—Ç–µ +5üéüÔ∏è –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã.',
        emoji: 'üéüÔ∏è',
        type: 'one_time',
        effect: (state) => { state.tickets += 5; }
    },
    // --- –°–ª–æ—Ç-—ç—Ñ—Ñ–µ–∫—Ç—ã ---
    {
        id: 'lemon_less',
        name: '–ì–æ—Ä—å–∫–∏–π –ª–∏–º–æ–Ω',
        desc: '–õ–∏–º–æ–Ω—ã üçã –≤—ã–ø–∞–¥–∞—é—Ç –Ω–∞ 30% —Ä–µ–∂–µ.',
        emoji: 'üçã',
        type: 'slot_modifier',
        effect: (state) => {
            const lemon = window.SYMBOLS.find(s => s.id === 'lemon');
            if (lemon) lemon.weight = Math.floor(lemon.weight * 0.7);
        }
    },
    {
        id: 'clover_more',
        name: '–ö–ª–µ–≤–µ—Ä–Ω–∞—è —É–¥–∞—á–∞',
        desc: '–ö–ª–µ–≤–µ—Ä—ã üçÄ –≤—ã–ø–∞–¥–∞—é—Ç –Ω–∞ 20% —á–∞—â–µ.',
        emoji: 'üçÄ',
        type: 'slot_modifier',
        effect: (state) => {
            const clover = window.SYMBOLS.find(s => s.id === 'clover');
            if (clover) clover.weight = Math.floor(clover.weight * 1.2);
        }
    },
    // --- –ü—Ä–µ–¥–º–µ—Ç–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã ---
    {
        id: 'clover_bonus',
        name: '–ö–ª–µ–≤–µ—Ä–Ω—ã–π –±–æ–Ω—É—Å',
        desc: '–ö–∞–∂–¥—ã–π –∫–ª–µ–≤–µ—Ä üçÄ –Ω–∞ –ø–æ–ª–µ –¥–∞—ë—Ç +1üí∞ –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ.',
        emoji: 'üå±',
        type: 'item_mod',
        effect: (state) => {
            // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ calculateWinnings
        }
    },
    {
        id: 'cherry_luck',
        name: '–í–∏—à–Ω—ë–≤–∞—è —É–¥–∞—á–∞',
        desc: '–ö–∞–∂–¥—ã–π –ø—Ä–æ–∫—Ä—É—Ç —Å –≤–∏—à–Ω–µ–π üçí –¥–∞—ë—Ç +1 –∫ —É–¥–∞—á–µ –Ω–∞ —ç—Ç–æ—Ç —Å–ø–∏–Ω.',
        emoji: 'üçí',
        type: 'item_mod',
        effect: (state) => {
            // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ calculateWinnings –∏ generateGrid
        }
    },
];

// --- –í–´–ë–û–† 3 –°–õ–£–ß–ê–ô–ù–´–• –ü–ê–°–°–ò–í–û–ö ---
function getRandomPassives(count = 3) {
    const shuffled = [...ALL_PASSIVES].sort(() => Math.random() - 0.5);
    return shuffled.slice(0, count);
}

// --- –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –í–´–ë–†–ê–ù–ù–û–ô –ü–ê–°–°–ò–í–ö–ò ---
function applyPassive(passive, state) {
    if (passive && typeof passive.effect === 'function') {
        passive.effect(state);
    }
}

// --- –≠–ö–°–ü–û–†–¢ –î–õ–Ø –ò–ú–ü–û–†–¢–ê –í –û–°–ù–û–í–ù–û–ô –°–ö–†–ò–ü–¢ ---
if (typeof window !== 'undefined') {
    window.ALL_PASSIVES = ALL_PASSIVES;
    window.getRandomPassives = getRandomPassives;
    window.applyPassive = applyPassive;
}